<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="src_2Tests_8cpp" kind="file">
    <compoundname>Tests.cpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="src_2Hypergraph_2Hypergraph_8h" local="yes">Hypergraph/Hypergraph.h</includes>
    <includes refid="src_2Hypergraph_2Semirings_8h" local="yes">Hypergraph/Semirings.h</includes>
    <includes refid="src_2common_8h" local="yes">./common.h</includes>
    <incdepgraph>
      <node id="393">
        <label>src/Tests.cpp</label>
        <link refid="src/Tests.cpp"/>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
      </node>
      <node id="407">
        <label>Hypergraph/Factory.h</label>
      </node>
      <node id="412">
        <label>./foreach.h</label>
        <link refid="src_2foreach_8h_source"/>
      </node>
      <node id="408">
        <label>Hypergraph/Hypergraph.h</label>
      </node>
      <node id="406">
        <label>cmath</label>
      </node>
      <node id="397">
        <label>cassert</label>
      </node>
      <node id="394">
        <label>string</label>
      </node>
      <node id="401">
        <label>./common.h</label>
      </node>
      <node id="398">
        <label>exception</label>
      </node>
      <node id="402">
        <label>Hypergraph/Semirings.h</label>
        <link refid="src_2Hypergraph_2Semirings_8h_source"/>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
      </node>
      <node id="404">
        <label>bitset</label>
      </node>
      <node id="410">
        <label>ctime</label>
      </node>
      <node id="400">
        <label>vector</label>
      </node>
      <node id="395">
        <label>gtest/gtest.h</label>
      </node>
      <node id="405">
        <label>utility</label>
      </node>
      <node id="411">
        <label>cstdlib</label>
      </node>
      <node id="409">
        <label>./common.h</label>
        <link refid="src_2common_8h_source"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="396">
        <label>Hypergraph/Hypergraph.h</label>
        <link refid="src_2Hypergraph_2Hypergraph_8h_source"/>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
      </node>
      <node id="399">
        <label>set</label>
      </node>
      <node id="403">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="src_2Tests_8cpp_1ae5301d7305b7b25a73685c7019aca33d" prot="public" static="no">
        <name>NUM_LOOPS</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Tests.cpp" line="9" bodyfile="/home/srush/Projects/decoding/src/Tests.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="src_2Tests_8cpp_1ac7dbb3fbaec21c46623fd7762fe95509" prot="public" static="no">
        <name>SEMIRINGTEST</name>
        <param><defname>TYPE</defname></param>
        <initializer>do { \
    TYPE::ValType a = TYPE::randValue(); \
    TYPE::ValType b = TYPE::randValue(); \
    TYPE::ValType c = TYPE::safe_add(a, b); \
    TYPE::ValType d = TYPE::safe_times(a, b); \
    /* Test consistency */ \
    ASSERT_EQ(a, TYPE::normalize(a)); \
    ASSERT_EQ(c, TYPE::safe_add(a,b)); \
    ASSERT_EQ(d, TYPE::safe_times(a,b)); \
    /* Test properties */ \
    ASSERT_EQ(TYPE::safe_add(a, TYPE::zero()), a); \
    ASSERT_EQ(TYPE::safe_times(a, TYPE::one()), a); \
    ASSERT_EQ(TYPE::safe_times(a, TYPE::zero()), TYPE::zero()); \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Tests.cpp" line="27" bodyfile="/home/srush/Projects/decoding/src/Tests.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2Tests_8cpp_1a0e40fe4bfc75f005822f032c1429ed2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Decode, BinarySemiringTests)</argsstring>
        <name>TEST</name>
        <param>
          <type>Decode</type>
        </param>
        <param>
          <type>BinarySemiringTests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Tests.cpp" line="65" bodyfile="/home/srush/Projects/decoding/src/Tests.cpp" bodystart="65" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="src_2Tests_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Tests.cpp" line="84" bodyfile="/home/srush/Projects/decoding/src/Tests.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//test.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Hypergraph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Semirings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;./common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NUM_LOOPS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NUM_LOOPS<sp/>10000</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEMIRINGTEST</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SEMIRINGTEST(TYPE)<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor">do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>a<sp/>=<sp/>TYPE::randValue();<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>b<sp/>=<sp/>TYPE::randValue();<sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>c<sp/>=<sp/>TYPE::safe_add(a,<sp/>b);<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>d<sp/>=<sp/>TYPE::safe_times(a,<sp/>b);<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>consistency<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(a,<sp/>TYPE::normalize(a));<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(c,<sp/>TYPE::safe_add(a,b));<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(d,<sp/>TYPE::safe_times(a,b));<sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>properties<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_add(a,<sp/>TYPE::zero()),<sp/>a);<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_times(a,<sp/>TYPE::one()),<sp/>a);<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_times(a,<sp/>TYPE::zero()),<sp/>TYPE::zero());<sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">}<sp/>while(0)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="31"><highlight class="comment">TEST(Decode,<sp/>TestHypergraph)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>Hypergraph<sp/>test;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>vector&lt;HNode&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>nodes.push_back(test.add_terminal_node(&quot;one&quot;));</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>nodes.push_back(test.add_terminal_node(&quot;two&quot;));</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>nodes.push_back(test.add_terminal_node(&quot;three&quot;));</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>test.start_node(&quot;root&quot;);</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>test.add_edge(nodes,<sp/>&quot;Edgy&quot;);</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>test.end_node();</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>test.finish();</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>ASSERT_EQ(test.nodes().size(),<sp/>4);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>ASSERT_EQ(test.edges().size(),<sp/>1);</highlight></codeline>
<codeline lineno="45"><highlight class="comment">}</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">TEST(Decode,<sp/>SemiringTests)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>srand(time(NULL));<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>CompPotential&lt;ViterbiPotential,<sp/>LogViterbiPotential&gt;<sp/>CVL;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>for(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_LOOPS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(ViterbiPotential);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(LogViterbiPotential);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(InsidePotential);</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(RealPotential);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(TropicalPotential);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(BoolPotential);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(CountingPotential);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(CVL);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>SEMIRINGTEST(SparseVectorPotential);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>SEMIRINGTEST(TreePotential);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="comment">}</highlight></codeline>
<codeline lineno="63"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">TEST(Decode,<sp/>BinarySemiringTests)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(NULL));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCompPotential" kindref="compound">CompPotential&lt;ViterbiPotential, LogViterbiPotential&gt;</ref><sp/>CVL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_LOOPS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryVectorPotential::ValType<sp/>a<sp/>=<sp/>BinaryVectorPotential::randValue();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(BinaryVectorPotential::times(a,<sp/>BinaryVectorPotential::one()),<sp/>a);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(BinaryVectorPotential::times(a,<sp/>BinaryVectorPotential::zero()),<sp/>BinaryVectorPotential::zero());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(BinaryVectorPotential::add(a,<sp/>BinaryVectorPotential::zero()),<sp/>a);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryVectorPotential::ValType<sp/>a<sp/>=<sp/>BinaryVectorPotential::ValType(0xfa);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryVectorPotential::ValType<sp/>b<sp/>=<sp/>BinaryVectorPotential::ValType(0x05);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryVectorPotential::ValType<sp/>c<sp/>=<sp/>BinaryVectorPotential::ValType(0x15);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(BinaryVectorPotential::ValType(0xff),<sp/>BinaryVectorPotential::times(a,<sp/>b));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(BinaryVectorPotential::ValType(0xff),<sp/>BinaryVectorPotential::times(a,<sp/>b));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(BinaryVectorPotential::valid(a,<sp/>b));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(BinaryVectorPotential::valid(a,<sp/>c));</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/decoding/src/Tests.cpp"/>
  </compounddef>
</doxygen>
