<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="Tests_8cpp" kind="file">
    <compoundname>Tests.cpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="Hypergraph_8h" local="yes">Hypergraph/Hypergraph.h</includes>
    <includes refid="semirings_8h" local="yes">Hypergraph/Semirings.h</includes>
    <includes refid="common_8h" local="yes">./common.h</includes>
    <incdepgraph>
      <node id="157">
        <label>Hypergraph/Semirings.h</label>
        <link refid="semirings_8h_source"/>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>src/Tests.cpp</label>
        <link refid="Tests.cpp"/>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>Hypergraph/Factory.h</label>
        <link refid="Factory_8h_source"/>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
      </node>
      <node id="149">
        <label>cassert</label>
      </node>
      <node id="146">
        <label>string</label>
      </node>
      <node id="161">
        <label>map</label>
      </node>
      <node id="150">
        <label>exception</label>
      </node>
      <node id="154">
        <label>ctime</label>
      </node>
      <node id="153">
        <label>./common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>vector</label>
      </node>
      <node id="156">
        <label>./foreach.h</label>
        <link refid="foreach_8h_source"/>
      </node>
      <node id="147">
        <label>gtest/gtest.h</label>
      </node>
      <node id="148">
        <label>Hypergraph/Hypergraph.h</label>
        <link refid="Hypergraph_8h_source"/>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>cstdlib</label>
      </node>
      <node id="160">
        <label>iostream</label>
      </node>
      <node id="151">
        <label>set</label>
      </node>
      <node id="158">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="Tests_8cpp_1ae5301d7305b7b25a73685c7019aca33d" prot="public" static="no">
        <name>NUM_LOOPS</name>
        <initializer>10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" line="9" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Tests_8cpp_1ac7dbb3fbaec21c46623fd7762fe95509" prot="public" static="no">
        <name>SEMIRINGTEST</name>
        <param><defname>TYPE</defname></param>
        <initializer>do { \
    TYPE::ValType a = TYPE::randValue(); \
    TYPE::ValType b = TYPE::randValue(); \
    TYPE::ValType c = TYPE::safe_add(a, b); \
    TYPE::ValType d = TYPE::safe_times(a, b); \
    /* Test consistency */ \
    ASSERT_EQ(a, TYPE::normalize(a)); \
    ASSERT_EQ(c, TYPE::safe_add(a,b)); \
    ASSERT_EQ(d, TYPE::safe_times(a,b)); \
    /* Test properties */ \
    ASSERT_EQ(TYPE::safe_add(a, TYPE::zero()), a); \
    ASSERT_EQ(TYPE::safe_times(a, TYPE::one()), a); \
    ASSERT_EQ(TYPE::safe_times(a, TYPE::zero()), TYPE::zero()); \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" line="13" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Tests_8cpp_1a3e1543cfb1418106c463639f26be6c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Decode, TestHypergraph)</argsstring>
        <name>TEST</name>
        <param>
          <type>Decode</type>
        </param>
        <param>
          <type>TestHypergraph</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" line="31" column="1" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" bodystart="31" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="Tests_8cpp_1af20c62a1fc1f90de8269f352fc7e45e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Decode, SemiringTests)</argsstring>
        <name>TEST</name>
        <param>
          <type>Decode</type>
        </param>
        <param>
          <type>SemiringTests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" line="47" column="1" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" bodystart="47" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="Tests_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" line="64" column="1" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//test.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Hypergraph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Semirings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;./common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NUM_LOOPS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NUM_LOOPS<sp/>10000</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SEMIRINGTEST</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SEMIRINGTEST(TYPE)<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor">do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>a<sp/>=<sp/>TYPE::randValue();<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>b<sp/>=<sp/>TYPE::randValue();<sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>c<sp/>=<sp/>TYPE::safe_add(a,<sp/>b);<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TYPE::ValType<sp/>d<sp/>=<sp/>TYPE::safe_times(a,<sp/>b);<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>consistency<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(a,<sp/>TYPE::normalize(a));<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(c,<sp/>TYPE::safe_add(a,b));<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(d,<sp/>TYPE::safe_times(a,b));<sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>properties<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_add(a,<sp/>TYPE::zero()),<sp/>a);<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_times(a,<sp/>TYPE::one()),<sp/>a);<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_EQ(TYPE::safe_times(a,<sp/>TYPE::zero()),<sp/>TYPE::zero());<sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">}<sp/>while(0)</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">TEST(Decode,<sp/>TestHypergraph)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>test;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;HNode&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes.push_back(test.<ref refid="classHypergraph_1aef5172b80c30235a7491a41096b34071" kindref="member">add_terminal_node</ref>(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes.push_back(test.<ref refid="classHypergraph_1aef5172b80c30235a7491a41096b34071" kindref="member">add_terminal_node</ref>(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes.push_back(test.<ref refid="classHypergraph_1aef5172b80c30235a7491a41096b34071" kindref="member">add_terminal_node</ref>(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>test.start_node(</highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>test.add_edge(nodes,<sp/></highlight><highlight class="stringliteral">&quot;Edgy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="classHypergraph_1af6474ea50a210bb4fb2055d0539c0033" kindref="member">end_node</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>test.<ref refid="classHypergraph_1a1e5f8c394f30d6cb35f20949e2c70fc2" kindref="member">finish</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(test.<ref refid="classHypergraph_1a6ac40aa4309b5d828bee31fc03ebde0a" kindref="member">nodes</ref>().size(),<sp/>4);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(test.<ref refid="classHypergraph_1abf51be949d9e736679a4b51594b4de08" kindref="member">edges</ref>().size(),<sp/>1);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">TEST(Decode,<sp/>SemiringTests)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(NULL));<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCompPotential" kindref="compound">CompPotential&lt;ViterbiPotential, LogViterbiPotential&gt;</ref><sp/>CVL;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_LOOPS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classViterbiPotential" kindref="compound">ViterbiPotential</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classLogViterbiPotential" kindref="compound">LogViterbiPotential</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classInsidePotential" kindref="compound">InsidePotential</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classRealPotential" kindref="compound">RealPotential</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classTropicalPotential" kindref="compound">TropicalPotential</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classBoolPotential" kindref="compound">BoolPotential</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(<ref refid="classCountingPotential" kindref="compound">CountingPotential</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEMIRINGTEST(CVL);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SEMIRINGTEST(SparseVectorPotential);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SEMIRINGTEST(TreePotential);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Tests.cpp"/>
  </compounddef>
</doxygen>
