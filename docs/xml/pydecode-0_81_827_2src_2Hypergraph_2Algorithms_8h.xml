<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h" kind="file">
    <compoundname>Algorithms.h</compoundname>
    <includes local="no">queue</includes>
    <includes local="no">set</includes>
    <includes local="no">vector</includes>
    <includes local="yes">./common.h</includes>
    <includes local="yes">Hypergraph/Hypergraph.h</includes>
    <includes local="yes">Hypergraph/Semirings.h</includes>
    <includes local="yes">Hypergraph/SemiringAlgorithms.h</includes>
    <includes local="yes">Hypergraph/Potentials.h</includes>
    <incdepgraph>
      <node id="79">
        <label>queue</label>
      </node>
      <node id="83">
        <label>Hypergraph/Hypergraph.h</label>
      </node>
      <node id="82">
        <label>./common.h</label>
      </node>
      <node id="84">
        <label>Hypergraph/Semirings.h</label>
      </node>
      <node id="81">
        <label>vector</label>
      </node>
      <node id="86">
        <label>Hypergraph/Potentials.h</label>
      </node>
      <node id="85">
        <label>Hypergraph/SemiringAlgorithms.h</label>
      </node>
      <node id="80">
        <label>set</label>
      </node>
      <node id="78">
        <label>pydecode-0.1.27/src/Hypergraph/Algorithms.h</label>
        <link refid="pydecode-0.1.27/src/Hypergraph/Algorithms.h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structIdComparator" prot="public">IdComparator</innerclass>
    <innerclass refid="structLatticeLabel" prot="public">LatticeLabel</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a4ed2e2683464989ca9bde5c758c85fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; set&lt; int &gt; &gt; *</type>
        <definition>vector&lt;set&lt;int&gt; &gt;* children_nodes</definition>
        <argsstring>(const Hypergraph &amp;graph)</argsstring>
        <name>children_nodes</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="18" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="264" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a0397a98980947009dfd51e95522f21af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref> *</type>
        <definition>HypergraphMap* extend_hypergraph_by_count</definition>
        <argsstring>(Hypergraph *graph, const HypergraphPotentials&lt; CountingPotential &gt; &amp;potentials, int lower_limit, int upper_limit, int goal)</argsstring>
        <name>extend_hypergraph_by_count</name>
        <param>
          <type><ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classCountingPotential" kindref="compound">CountingPotential</ref> &gt; &amp;</type>
          <declname>potentials</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lower_limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>upper_limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="31" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="100" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a9f3f68cd5b3eb07b0a80e5c379693a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classChart" kindref="compound">Chart</ref>&lt; <ref refid="classSetPotential" kindref="compound">SetPotential</ref> &gt; *</type>
        <definition>Chart&lt;SetPotential&gt;* edge_domination</definition>
        <argsstring>(const Hypergraph &amp;graph)</argsstring>
        <name>edge_domination</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="33" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="208" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1aaf7b3a6c4efc5e3e74c7227274eabd1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classChart" kindref="compound">Chart</ref>&lt; <ref refid="classSetPotential" kindref="compound">SetPotential</ref> &gt; *</type>
        <definition>Chart&lt;SetPotential&gt;* node_domination</definition>
        <argsstring>(const Hypergraph &amp;graph)</argsstring>
        <name>node_domination</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> &amp;</type>
          <declname>graph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="34" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a48f6caa2a3e75176243889f7779d5b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Set1</type>
          </param>
          <param>
            <type>class Set2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_disjoint</definition>
        <argsstring>(const Set1 &amp;set1, const Set2 &amp;set2)</argsstring>
        <name>is_disjoint</name>
        <param>
          <type>const Set1 &amp;</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const Set2 &amp;</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="37" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="20" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a60a135f63bb7f93d7bfaca2ef15bb39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; set&lt; int &gt; &gt; *</type>
        <definition>vector&lt;set&lt;int&gt; &gt;* children_sparse</definition>
        <argsstring>(const Hypergraph *graph, const HypergraphPotentials&lt; SparseVectorPotential &gt; &amp;potentials)</argsstring>
        <name>children_sparse</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classSparseVectorPotential" kindref="compound">SparseVectorPotential</ref> &gt; &amp;</type>
          <declname>potentials</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="41" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="234" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a836a839027944938f43d92ebbef0dd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>set&lt; int &gt; *</type>
        <definition>set&lt;int&gt;* updated_nodes</definition>
        <argsstring>(const Hypergraph *graph, const vector&lt; set&lt; int &gt; &gt; &amp;children, const set&lt; int &gt; &amp;updated)</argsstring>
        <name>updated_nodes</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const vector&lt; set&lt; int &gt; &gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const set&lt; int &gt; &amp;</type>
          <declname>updated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="46" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="250" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1a496fb998bc358c00a53f1f282094f2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref> *</type>
        <definition>HypergraphMap* project_hypergraph</definition>
        <argsstring>(const Hypergraph *hypergraph, const HypergraphPotentials&lt; BoolPotential &gt; &amp;edge_mask)</argsstring>
        <name>project_hypergraph</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>hypergraph</declname>
        </param>
        <param>
          <type>const <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classBoolPotential" kindref="compound">BoolPotential</ref> &gt; &amp;</type>
          <declname>edge_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="51" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="279" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1aa770dcae81759f8ca0032565bface051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref> *</type>
        <definition>HypergraphMap* binarize</definition>
        <argsstring>(const Hypergraph *hypergraph)</argsstring>
        <name>binarize</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>hypergraph</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="53" bodyfile="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.cpp" bodystart="331" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_1ad74e822c1c102f7005250f9f893ec789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
        <definition>Hypergraph* make_lattice</definition>
        <argsstring>(int width, int height, const vector&lt; vector&lt; int &gt; &gt; &amp;transitions, vector&lt; LatticeLabel &gt; *labels)</argsstring>
        <name>make_lattice</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; int &gt; &gt; &amp;</type>
          <declname>transitions</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structLatticeLabel" kindref="compound">LatticeLabel</ref> &gt; *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h" line="63" bodyfile="/home/srush/Projects/decoding/src/Hypergraph/Algorithms.cpp" bodystart="477" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>[2013]<sp/>Alexander<sp/>Rush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HYPERGRAPH_ALGORITHMS_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HYPERGRAPH_ALGORITHMS_H_</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;./common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Hypergraph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Semirings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/SemiringAlgorithms.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Potentials.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compute<sp/>tail<sp/>node<sp/>set<sp/>for<sp/>each<sp/>hypergraph<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>*children_nodes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>&amp;graph);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structIdComparator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structIdComparator" kindref="compound">IdComparator</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(HEdge<sp/>edge1,<sp/>HEdge<sp/>edge2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge1-&gt;id()<sp/>&lt;<sp/>edge2-&gt;id();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref><sp/>*extend_hypergraph_by_count(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*graph,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;CountingPotential&gt;</ref><sp/>&amp;potentials,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower_limit,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upper_limit,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>goal);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classChart" kindref="compound">Chart&lt;SetPotential&gt;</ref><sp/>*edge_domination(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>&amp;graph);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classChart" kindref="compound">Chart&lt;SetPotential&gt;</ref><sp/>*node_domination(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>&amp;graph);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Set1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Set2&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_disjoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Set1<sp/>&amp;set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Set2<sp/>&amp;set2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>*children_sparse(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*graph,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SparseVectorPotential&gt;</ref><sp/>&amp;potentials);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">set&lt;int&gt;<sp/>*updated_nodes(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*graph,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;set&lt;int&gt;<sp/>&gt;<sp/>&amp;children,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>set&lt;int&gt;<sp/>&amp;updated);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref><sp/>*project_hypergraph(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*hypergraph,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;BoolPotential&gt;</ref><sp/>&amp;edge_mask);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref><sp/>*binarize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*hypergraph);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structLatticeLabel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structLatticeLabel" kindref="compound">LatticeLabel</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLatticeLabel" kindref="compound">LatticeLabel</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="structLatticeLabel" kindref="compound">LatticeLabel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j_)<sp/>:<sp/>i(i_),<sp/>j(j_)<sp/>{}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*make_lattice(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;vector&lt;int&gt;<sp/>&gt;<sp/>&amp;transitions,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;LatticeLabel&gt;<sp/>*labels);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>HYPERGRAPH_ALGORITHMS_H_</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/decoding/pydecode-0.1.27/src/Hypergraph/Algorithms.h"/>
  </compounddef>
</doxygen>
