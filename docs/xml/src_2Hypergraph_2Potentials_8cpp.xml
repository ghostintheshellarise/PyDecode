<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="src_2Hypergraph_2Potentials_8cpp" kind="file">
    <compoundname>Potentials.cpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="yes">Hypergraph/Potentials.h</includes>
    <incdepgraph>
      <node id="233">
        <label>src/Hypergraph/Potentials.cpp</label>
        <link refid="src/Hypergraph/Potentials.cpp"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
      </node>
      <node id="234">
        <label>vector</label>
      </node>
      <node id="235">
        <label>Hypergraph/Potentials.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="src_2Hypergraph_2Potentials_8cpp_1a8b161d8e3a38c95f3bf00b677d09bbdd" prot="public" static="no">
        <name>SPECIALIZE_HYPER_FOR_SEMI</name>
        <param><defname>X</defname></param>
        <initializer>template class <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt;X&gt;;\
    template class <ref refid="classHypergraphSparsePotentials" kindref="compound">HypergraphSparsePotentials</ref>&lt;X&gt;;\
    template class <ref refid="classHypergraphMappedPotentials" kindref="compound">HypergraphMappedPotentials</ref>&lt;X&gt;;\
    template class <ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials</ref>&lt;X&gt;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" line="11" bodyfile="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2Hypergraph_2Potentials_8cpp_1a696f699ff3e231b2ef8df05d4ee1c9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pairwise_dot</definition>
        <argsstring>(const HypergraphPotentials&lt; SparseVectorPotential &gt; &amp;sparse_potentials, const vector&lt; double &gt; &amp;vec, HypergraphPotentials&lt; LogViterbiPotential &gt; *weights)</argsstring>
        <name>pairwise_dot</name>
        <param>
          <type>const <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classSparseVectorPotential" kindref="compound">SparseVectorPotential</ref> &gt; &amp;</type>
          <declname>sparse_potentials</declname>
        </param>
        <param>
          <type>const vector&lt; double &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classLogViterbiPotential" kindref="compound">LogViterbiPotential</ref> &gt; *</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" line="111" bodyfile="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" bodystart="108" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="src_2Hypergraph_2Potentials_8cpp_1a59746dfd2a8bd4daa0e5e28af8694af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void non_zero_weights</definition>
        <argsstring>(const Hypergraph *graph, const HypergraphPotentials&lt; LogViterbiPotential &gt; &amp;weights, HypergraphVectorPotentials&lt; BoolPotential &gt; *updates)</argsstring>
        <name>non_zero_weights</name>
        <param>
          <type>const <ref refid="classHypergraph" kindref="compound">Hypergraph</ref> *</type>
          <declname>graph</declname>
        </param>
        <param>
          <type>const <ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt; <ref refid="classLogViterbiPotential" kindref="compound">LogViterbiPotential</ref> &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials</ref>&lt; <ref refid="classBoolPotential" kindref="compound">BoolPotential</ref> &gt; *</type>
          <declname>updates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" line="136" bodyfile="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp" bodystart="134" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>[2013]<sp/>Alexander<sp/>Rush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Potentials.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPECIALIZE_HYPER_FOR_SEMI(X)\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>class<sp/>HypergraphPotentials&lt;X&gt;;\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>class<sp/>HypergraphSparsePotentials&lt;X&gt;;\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>class<sp/>HypergraphMappedPotentials&lt;X&gt;;\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>class<sp/>HypergraphVectorPotentials&lt;X&gt;;</highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="classHypergraphVectorPotentials_1ae963eaa55d90077a3dedeb38aaf10c0c" kindref="member">HypergraphVectorPotentials&lt;SemiringType&gt;::times</ref>(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;::check</ref>(other);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>SemiringType::ValType&gt;<sp/>new_potentials(potentials_);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>this-&gt;hypergraph_-&gt;edges())<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials[i]<sp/>=<sp/>SemiringType::times(new_potentials[i],</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other[edge]);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials&lt;SemiringType&gt;</ref>(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;hypergraph_,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemiringType::times(this-&gt;bias_,<sp/>other.bias_));</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;::project_potentials</ref>(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref><sp/>&amp;projection)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>check(*projection.domain_graph());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>SemiringType::ValType&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potentials(projection.range_graph()-&gt;<ref refid="classHypergraph_1abf51be949d9e736679a4b51594b4de08" kindref="member">edges</ref>().size());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>projection.domain_graph()-&gt;<ref refid="classHypergraph_1abf51be949d9e736679a4b51594b4de08" kindref="member">edges</ref>())<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>new_edge<sp/>=<sp/>projection.map(edge);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_edge<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>new_edge-&gt;<ref refid="classHyperedge_1ac91530ad31342ab5519e43680b112fe9" kindref="member">id</ref>()<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(new_edge-&gt;<ref refid="classHyperedge_1ac91530ad31342ab5519e43680b112fe9" kindref="member">id</ref>()<sp/>&lt;<sp/>projection.range_graph()-&gt;<ref refid="classHypergraph_1abf51be949d9e736679a4b51594b4de08" kindref="member">edges</ref>().size());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potentials[new_edge-&gt;<ref refid="classHyperedge_1ac91530ad31342ab5519e43680b112fe9" kindref="member">id</ref>()]<sp/>=<sp/>score(edge);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials&lt;SemiringType&gt;</ref>(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection.range_graph(),<sp/>potentials,<sp/>bias_);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="classHypergraphSparsePotentials_1ab377fb2fdda7f4e3259b38e7c495a4fa" kindref="member">HypergraphSparsePotentials&lt;SemiringType&gt;::times</ref>(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;::check</ref>(other);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>SemiringType::ValType&gt;<sp/>new_potentials(potentials_);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>this-&gt;hypergraph_-&gt;edges())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials[i]<sp/>=<sp/>SemiringType::times(new_potentials[i],</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other[edge]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials&lt;SemiringType&gt;</ref>(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;hypergraph_,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemiringType::times(this-&gt;bias_,<sp/>other.bias_));</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="classHypergraphMappedPotentials" kindref="compound">HypergraphMappedPotentials&lt;SemiringType&gt;::HypergraphMappedPotentials</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>*base_potentials,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphMap" kindref="compound">HypergraphMap</ref><sp/>*projection)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials</ref>&lt;SemiringType&gt;(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection-&gt;domain_graph(),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_potentials-&gt;bias()),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_potentials_(base_potentials),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection_(projection)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>base_potentials-&gt;check(*projection-&gt;range_graph());</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="classHypergraphMappedPotentials_1a75d910cc6d09975c2818229e149747b3" kindref="member">HypergraphMappedPotentials&lt;SemiringType&gt;::times</ref>(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SemiringType&gt;</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;typename<sp/>SemiringType::ValType&gt;<sp/>new_potentials(</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection_-&gt;range_graph()-&gt;edges().size());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>projection_-&gt;range_graph()-&gt;edges())<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials[i]<sp/>=<sp/>SemiringType::times(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_potentials_-&gt;score(edge),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.score(edge));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHypergraphMappedPotentials" kindref="compound">HypergraphMappedPotentials&lt;SemiringType&gt;</ref>(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials&lt;SemiringType&gt;</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection_-&gt;range_graph(),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_potentials,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SemiringType::times(this-&gt;bias_,<sp/>other.bias())),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>projection_);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SemiringType::ValType</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="classHypergraphMappedPotentials" kindref="compound">HypergraphMappedPotentials&lt;SemiringType&gt;::score</ref>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>new_edge<sp/>=<sp/>projection_-&gt;map(edge);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_potentials_-&gt;score(new_edge);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pairwise_dot(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;SparseVectorPotential&gt;</ref><sp/>&amp;sparse_potentials,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;double&gt;<sp/>&amp;vec,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;LogViterbiPotential&gt;</ref><sp/>*weights)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>&amp;pots<sp/>=<sp/>weights-&gt;potentials();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparseVector<sp/>&amp;edge_constraints,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparse_potentials.potentials())<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparsePair<sp/>&amp;pair,<sp/>edge_constraints)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec[pair.first]<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>pair.second<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pots[i]<sp/>=</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogViterbiPotential::times(pots[i],</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair.second<sp/>*<sp/>vec[pair.first]);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>SparseVector<sp/>bias_constraints<sp/>=<sp/>sparse_potentials.bias();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>LogViterbiPotential::ValType<sp/>&amp;bias<sp/>=<sp/>weights-&gt;bias();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparsePair<sp/>&amp;pair,<sp/>bias_constraints)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bias<sp/>=<sp/>LogViterbiPotential::times(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights-&gt;bias(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogViterbiPotential::ValType(pair.second<sp/>*<sp/>vec[pair.first]));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>non_zero_weights(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>*graph,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraphPotentials" kindref="compound">HypergraphPotentials&lt;LogViterbiPotential&gt;</ref><sp/>&amp;weights,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHypergraphVectorPotentials" kindref="compound">HypergraphVectorPotentials&lt;BoolPotential&gt;</ref><sp/>*updates)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="classHyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>graph-&gt;<ref refid="classHypergraph_1abf51be949d9e736679a4b51594b4de08" kindref="member">edges</ref>())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updates-&gt;insert(edge,<sp/>weights[edge]<sp/>!=<sp/>0.0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classViterbiPotential" kindref="compound">ViterbiPotential</ref>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classLogViterbiPotential" kindref="compound">LogViterbiPotential</ref>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classInsidePotential" kindref="compound">InsidePotential</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classBoolPotential" kindref="compound">BoolPotential</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classSparseVectorPotential" kindref="compound">SparseVectorPotential</ref>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classMinSparseVectorPotential" kindref="compound">MinSparseVectorPotential</ref>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classMaxSparseVectorPotential" kindref="compound">MaxSparseVectorPotential</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classBinaryVectorPotential" kindref="compound">BinaryVectorPotential</ref>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classCountingPotential" kindref="compound">CountingPotential</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">SPECIALIZE_HYPER_FOR_SEMI(<ref refid="classSetPotential" kindref="compound">SetPotential</ref>)</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/decoding/src/Hypergraph/Potentials.cpp"/>
  </compounddef>
</doxygen>
