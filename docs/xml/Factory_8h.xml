<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="Factory_8h" kind="file">
    <compoundname>Factory.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes refid="Hypergraph_8h" local="yes">Hypergraph/Hypergraph.h</includes>
    <includes refid="common_8h" local="yes">./common.h</includes>
    <includedby refid="Factory_8cpp" local="yes">src/Hypergraph/Factory.cpp</includedby>
    <includedby refid="semirings_8h" local="yes">src/Hypergraph/semirings.h</includedby>
    <incdepgraph>
      <node id="68">
        <label>src/Hypergraph/Factory.h</label>
        <link refid="Factory.h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>cassert</label>
      </node>
      <node id="71">
        <label>string</label>
      </node>
      <node id="70">
        <label>map</label>
      </node>
      <node id="74">
        <label>exception</label>
      </node>
      <node id="78">
        <label>ctime</label>
      </node>
      <node id="77">
        <label>./common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>vector</label>
      </node>
      <node id="80">
        <label>./foreach.h</label>
        <link refid="foreach_8h_source"/>
      </node>
      <node id="72">
        <label>Hypergraph/Hypergraph.h</label>
        <link refid="Hypergraph_8h_source"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>cstdlib</label>
      </node>
      <node id="69">
        <label>iostream</label>
      </node>
      <node id="75">
        <label>set</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="82">
        <label>src/Hypergraph/semirings.h</label>
        <link refid="semirings_8h_source"/>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>src/Hypergraph/Factory.h</label>
        <link refid="Factory.h"/>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>src/Hypergraph/Algorithms.h</label>
        <link refid="Algorithms_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classBaseRegistry" prot="public">BaseRegistry</innerclass>
    <innerclass refid="structGenericRegistry" prot="public">GenericRegistry</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="Factory_8h_1ae5fdce1ac5c3b8382e2d17631bd02520" prot="public" static="no">
        <name>BASE_SEMIRING_REGISTRY_DECLARATION</name>
        <param><defname>NAME</defname></param>
        <initializer>static RandomSemiringRegistry&lt;NAME&gt; registry</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="12" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Factory_8h_1a0e08095775e00de19d8063cfcd4d3e12" prot="public" static="no">
        <name>BASE_SEMIRING_REGISTRY_DEFINITION</name>
        <param><defname>NAME</defname></param>
        <initializer>RandomSemiringRegistry&lt;NAME&gt; NAME::registry = RandomSemiringRegistry&lt;NAME&gt;(#NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="15" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Factory_8h_1af8e71478dd4f24bc3dbda8ffcefb74de" prot="public" static="no">
        <name>BASE_SEMIRING_REGISTRY_REDEFINE</name>
        <param><defname>NAME</defname></param>
        <initializer>NAME::registry = RandomSemiringRegistry&lt;NAME&gt;(#NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="18" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Factory_8h_1aaf70cb4af0f2237884803ef37d8548ab" prot="public" static="no">
        <name>STATIC_SEMIRING_REGISTRY_DECLARATION</name>
        <param><defname>NAME</defname></param>
        <initializer>static StaticSemiringRegistry&lt;NAME&gt; registry</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="21" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Factory_8h_1a811f3b9bb380f334b4ea53aadd1eaea9" prot="public" static="no">
        <name>STATIC_SEMIRING_REGISTRY_DEFINITION</name>
        <param><defname>NAME</defname></param>
        <initializer>StaticSemiringRegistry&lt;NAME&gt; NAME::registry = StaticSemiringRegistry&lt;NAME&gt;(#NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="24" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Factory_8h_1a0827f71f1e37d5ae751f9dd7570469ef" prot="public" static="no">
        <name>STATIC_SEMIRING_REGISTRY_REDEFINE</name>
        <param><defname>NAME</defname></param>
        <initializer>NAME::registry = StaticSemiringRegistry&lt;NAME&gt;(#NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="27" column="9" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Factory_8h_1a09434652bb3d2c3c4edd3506af604439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>B *</type>
        <definition>B* createT</definition>
        <argsstring>()</argsstring>
        <name>createT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" line="85" column="1" bodyfile="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h" bodystart="85" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>[2013]<sp/>Alexander<sp/>Rush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HYPERGRAPH_FACTORY_H_</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HYPERGRAPH_FACTORY_H_</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Hypergraph/Hypergraph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;./common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASE_SEMIRING_REGISTRY_DECLARATION(NAME)<sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>RandomSemiringRegistry&lt;NAME&gt;<sp/>registry</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASE_SEMIRING_REGISTRY_DEFINITION(NAME)<sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RandomSemiringRegistry&lt;NAME&gt;<sp/>NAME::registry<sp/>=<sp/>RandomSemiringRegistry&lt;NAME&gt;(#NAME)</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASE_SEMIRING_REGISTRY_REDEFINE(NAME)<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NAME::registry<sp/>=<sp/>RandomSemiringRegistry&lt;NAME&gt;(#NAME)</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_SEMIRING_REGISTRY_DECLARATION(NAME)<sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>StaticSemiringRegistry&lt;NAME&gt;<sp/>registry</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_SEMIRING_REGISTRY_DEFINITION(NAME)<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>StaticSemiringRegistry&lt;NAME&gt;<sp/>NAME::registry<sp/>=<sp/>StaticSemiringRegistry&lt;NAME&gt;(#NAME)</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_SEMIRING_REGISTRY_REDEFINE(NAME)<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NAME::registry<sp/>=<sp/>StaticSemiringRegistry&lt;NAME&gt;(#NAME)</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31" refid="classBaseRegistry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBaseRegistry" kindref="compound">BaseRegistry</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>(*creator_fnptr)();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>creator_fnptr&gt;<sp/>RegistryMap;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>creator_fnptr&gt;<sp/>RegistryPair;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classBaseRegistry" kindref="compound">BaseRegistry</ref>()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;creator_fnptr&gt;<sp/>retrieve_classes()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry<sp/>=<sp/>!registry<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RegistryMap<sp/>:<sp/>registry;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;creator_fnptr&gt;<sp/>creators;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cerr&lt;&lt;<sp/>&quot;map<sp/>size<sp/>at<sp/>retrieve:<sp/>&quot;<sp/>&lt;&lt;<sp/>registry-&gt;size()<sp/>&lt;&lt;<sp/>&quot;<sp/>at:<sp/>&quot;<sp/>&lt;&lt;<sp/>registry<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal">(RegistryPair<sp/>pr,<sp/>*registry)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creators.push_back(pr.second);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>creators;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RegistryMap<sp/>*<sp/>getMap()<sp/>{<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registry<sp/>=<sp/>!registry<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RegistryMap<sp/>:<sp/>registry;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cerr&lt;&lt;<sp/>&quot;map<sp/>size:<sp/>&quot;<sp/>&lt;&lt;<sp/>registry-&gt;size()<sp/>&lt;&lt;<sp/>&quot;<sp/>at:<sp/>&quot;<sp/>&lt;&lt;<sp/>registry<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registry;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RegistryMap*<sp/>registry;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>BaseSemiring;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;<sp/>BaseSemiring*<sp/>createRandomSemiring()<sp/>{<sp/>return<sp/>new<sp/>T(T::randValue());<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct<sp/>RandomSemiringRegistry<sp/>:<sp/>BaseRegistry&lt;BaseSemiring*&gt;<sp/>{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>RandomSemiringRegistry(std::string<sp/>const&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cerr&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>&quot;<sp/>and<sp/>&quot;<sp/>&lt;&lt;<sp/>typeid(*createRandomSemiring&lt;T&gt;()).name()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseRegistry&lt;BaseSemiring*&gt;::getMap()-&gt;insert(BaseRegistry&lt;BaseSemiring*&gt;::RegistryPair(s,<sp/>&amp;createRandomSemiring&lt;T&gt;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>StaticBaseSemiringPotential;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;<sp/>StaticBaseSemiringPotential*<sp/>createStaticSemiring()<sp/>{<sp/>return<sp/>T::create();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct<sp/>StaticSemiringRegistry<sp/>:<sp/>BaseRegistry&lt;StaticBaseSemiringPotential*&gt;<sp/>{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>StaticSemiringRegistry(std::string<sp/>const&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cerr&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>&quot;<sp/>and<sp/>&quot;<sp/>&lt;&lt;<sp/>typeid(*createStaticSemiring&lt;T&gt;()).name()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseRegistry&lt;StaticBaseSemiringPotential*&gt;::getMap()-&gt;insert(BaseRegistry&lt;StaticBaseSemiringPotential*&gt;::RegistryPair(s,<sp/>&amp;createStaticSemiring&lt;T&gt;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;<sp/>B*<sp/>createT()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T();<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>B&gt;</highlight></codeline>
<codeline lineno="88" refid="structGenericRegistry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structGenericRegistry" kindref="compound">GenericRegistry</ref><sp/>:<sp/><ref refid="classBaseRegistry" kindref="compound">BaseRegistry</ref>&lt;B*&gt;<sp/>{<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structGenericRegistry" kindref="compound">GenericRegistry</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{<sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBaseRegistry" kindref="compound">BaseRegistry&lt;B&gt;::getMap</ref>()-&gt;insert(BaseRegistry&lt;B&gt;::RegistryPair(s,<sp/>&amp;createT&lt;T,<sp/>B&gt;));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HYPERGRAPH_FACTORY_H_</highlight></codeline>
    </programlisting>
    <location file="/Volumes/Enki_Files/Documents/school/research/PyDecode/src/Hypergraph/Factory.h"/>
  </compounddef>
</doxygen>
