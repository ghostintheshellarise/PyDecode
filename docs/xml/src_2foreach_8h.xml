<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="src_2foreach_8h" kind="file">
    <compoundname>foreach.h</compoundname>
    <includedby refid="src_2common_8h" local="yes">src/common.h</includedby>
    <invincdepgraph>
      <node id="51">
        <label>src/Hypergraph/Semirings_flymake.h</label>
        <link refid="Semirings__flymake_8h_source"/>
      </node>
      <node id="48">
        <label>pydecode-0.1.27/src/Hypergraph/Map.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Map_8h_source"/>
      </node>
      <node id="53">
        <label>src/Hypergraph/Hypergraph_flymake.h</label>
        <link refid="Hypergraph__flymake_8h_source"/>
      </node>
      <node id="33">
        <label>src/foreach.h</label>
        <link refid="src/foreach.h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>src/Hypergraph/BeamSearch_flymake.h</label>
        <link refid="BeamSearch__flymake_8h_source"/>
      </node>
      <node id="36">
        <label>pydecode-0.1.27/src/Hypergraph/BeamSearch.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2BeamSearch_8h_source"/>
      </node>
      <node id="39">
        <label>pydecode-0.1.27/src/Hypergraph/Potentials.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Potentials_8h_source"/>
      </node>
      <node id="45">
        <label>src/Hypergraph/Factory.h</label>
        <link refid="src_2Hypergraph_2Factory_8h_source"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>src/Hypergraph/Semirings.h</label>
        <link refid="src_2Hypergraph_2Semirings_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>pydecode-0.1.27/src/Hypergraph/Factory.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Factory_8h_source"/>
      </node>
      <node id="40">
        <label>pydecode-0.1.27/src/Hypergraph/SemiringAlgorithms.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2SemiringAlgorithms_8h_source"/>
      </node>
      <node id="50">
        <label>src/Hypergraph/SemiringAlgorithms.h</label>
        <link refid="src_2Hypergraph_2SemiringAlgorithms_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>src/Hypergraph/Algorithms.h</label>
        <link refid="src_2Hypergraph_2Algorithms_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>src/Hypergraph/Potentials.h</label>
        <link refid="src_2Hypergraph_2Potentials_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/Hypergraph/BeamSearch.h</label>
        <link refid="src_2Hypergraph_2BeamSearch_8h_source"/>
      </node>
      <node id="38">
        <label>pydecode-0.1.27/src/Hypergraph/Hypergraph.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Hypergraph_8h_source"/>
      </node>
      <node id="34">
        <label>src/common.h</label>
        <link refid="src_2common_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>src/Hypergraph/Map.h</label>
        <link refid="src_2Hypergraph_2Map_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>src/Hypergraph/Hypergraph.h</label>
        <link refid="src_2Hypergraph_2Hypergraph_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>pydecode-0.1.27/src/Hypergraph/Algorithms.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Algorithms_8h_source"/>
      </node>
      <node id="41">
        <label>pydecode-0.1.27/src/Hypergraph/Semirings.h</label>
        <link refid="pydecode-0_81_827_2src_2Hypergraph_2Semirings_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structboost_1_1foreach__detail_1_1auto__any__base" prot="public">boost::foreach_detail::auto_any_base</innerclass>
    <innerclass refid="structboost_1_1foreach__detail_1_1auto__any" prot="public">boost::foreach_detail::auto_any</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1foreach__detail">boost::foreach_detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="src_2foreach_8h_1aef3119ff8b1f6351e946044c4988571b" prot="public" static="no">
        <name>BOOST_FOREACH</name>
        <param><defname>item</defname></param>
        <param><defname>container</defname></param>
        <initializer>if (<ref refid="structboost_1_1foreach__detail_1_1auto__any__base" kindref="compound">boost::foreach_detail::auto_any_base</ref> const&amp; b = boost::foreach_detail::begin(container)) {} else       \
    if (<ref refid="structboost_1_1foreach__detail_1_1auto__any__base" kindref="compound">boost::foreach_detail::auto_any_base</ref> const&amp; e = boost::foreach_detail::end(container))   {} else       \
    for (;!boost::foreach_detail::done(b,e,container);  boost::foreach_detail::next(b,container))   \
        if (bool ugly_and_unique_break = false) {} else       \
        for (item = boost::foreach_detail::deref(b,container); !ugly_and_unique_break; ugly_and_unique_break = true)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/decoding/src/foreach.h" line="73" bodyfile="/home/srush/Projects/decoding/src/foreach.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>BOOST_FOREACH</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">//<sp/>A<sp/>stripped<sp/>down<sp/>version<sp/>of<sp/>FOREACH<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>illustration<sp/>purposes.<sp/>NOT<sp/>FOR<sp/>GENERAL<sp/>USE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>complete<sp/>implementation,<sp/>see<sp/>BOOST_FOREACH<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://boost-sandbox.sourceforge.net/vault/index.php?directory=eric_niebler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2004<sp/>Eric<sp/>Niebler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adapted<sp/>to<sp/>Assimp<sp/>November<sp/>29th,<sp/>2008<sp/>(Alexander<sp/>Gessler).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Added<sp/>code<sp/>to<sp/>handle<sp/>both<sp/>const<sp/>and<sp/>non-const<sp/>iterators,<sp/>simplified<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parts.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">foreach_detail<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//<sp/>auto_any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">auto_any_base</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">auto_any<sp/>:<sp/>auto_any_base</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>auto_any(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t)<sp/>:<sp/>item(t)<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>T<sp/>item;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">T&amp;<sp/>auto_any_cast(auto_any_base<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>any)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">auto_any&lt;T&gt;<sp/>const&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(any).item;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//<sp/>FOREACH<sp/>helper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">auto_any&lt;typename<sp/>T::const_iterator&gt;<sp/>begin(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.begin();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">auto_any&lt;typename<sp/>T::const_iterator&gt;<sp/>end(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.end();</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done(auto_any_base<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cur,<sp/>auto_any_base<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>end,<sp/>T&amp;)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::iterator<sp/>iter_type;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>auto_any_cast&lt;iter_type&gt;(cur)<sp/>==<sp/>auto_any_cast&lt;iter_type&gt;(end);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>next(auto_any_base<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cur,<sp/>T&amp;)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>++auto_any_cast&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::iterator&gt;(cur);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::reference<sp/>deref(auto_any_base<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cur,<sp/>T&amp;)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*auto_any_cast&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::iterator&gt;(cur);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>foreach_detail</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight><highlight class="comment">//<sp/>FOREACH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_FOREACH(item,<sp/>container)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(boost::foreach_detail::auto_any_base<sp/>const&amp;<sp/>b<sp/>=<sp/>boost::foreach_detail::begin(container))<sp/>{}<sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(boost::foreach_detail::auto_any_base<sp/>const&amp;<sp/>e<sp/>=<sp/>boost::foreach_detail::end(container))<sp/><sp/><sp/>{}<sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(;!boost::foreach_detail::done(b,e,container);<sp/><sp/>boost::foreach_detail::next(b,container))<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(bool<sp/>ugly_and_unique_break<sp/>=<sp/>false)<sp/>{}<sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(item<sp/>=<sp/>boost::foreach_detail::deref(b,container);<sp/>!ugly_and_unique_break;<sp/>ugly_and_unique_break<sp/>=<sp/>true)</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/decoding/src/foreach.h"/>
  </compounddef>
</doxygen>
