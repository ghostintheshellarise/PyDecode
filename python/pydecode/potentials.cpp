/* Generated by Cython 0.21dev on Tue Apr 15 14:41:53 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21dev"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_PyIndex_Check PyIndex_Check
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
#define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
#define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pydecode__potentials
#define __PYX_HAVE_API__pydecode__potentials
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "Hypergraph/Hypergraph.h"
#include "Hypergraph/Map.h"
#include <list>
#include <utility>
#include <set>
#include <map>
#include "Hypergraph/SemiringAlgorithms.h"
#include "Hypergraph/Semirings.h"
#include "Hypergraph/Potentials.h"
#include "Hypergraph/Algorithms.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "potentials.pyx",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "type.pxd",
};
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;

#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||           \
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) && \
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && MSC_VER
    #include <Windows.h>
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using MSVC atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview) \
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview) \
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview) \
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview) \
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif


/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_8pydecode_10potentials_Labeling;
struct __pyx_obj_8pydecode_10potentials__LazyEdges;
struct __pyx_obj_8pydecode_10potentials__LazyVertices;
struct __pyx_obj_8pydecode_10potentials_Hypergraph;
struct __pyx_obj_8pydecode_10potentials_GraphBuilder;
struct __pyx_obj_8pydecode_10potentials_Vertex;
struct __pyx_obj_8pydecode_10potentials_Edge;
struct __pyx_obj_8pydecode_10potentials_Path;
struct __pyx_obj_8pydecode_10potentials_HypergraphMap;
struct __pyx_obj_8pydecode_10potentials_BackPointers;
struct __pyx_obj_8pydecode_10potentials_Potentials;
struct __pyx_obj_8pydecode_10potentials_Chart;
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_ViterbiChart;
struct __pyx_obj_8pydecode_10potentials_ViterbiValue;
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart;
struct __pyx_obj_8pydecode_10potentials_LogViterbiValue;
struct __pyx_obj_8pydecode_10potentials_InsidePotentials;
struct __pyx_obj_8pydecode_10potentials_InsideChart;
struct __pyx_obj_8pydecode_10potentials_InsideValue;
struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials;
struct __pyx_obj_8pydecode_10potentials_MinMaxChart;
struct __pyx_obj_8pydecode_10potentials_MinMaxValue;
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart;
struct __pyx_obj_8pydecode_10potentials_SparseVectorValue;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue;
struct __pyx_obj_8pydecode_10potentials_CountingPotentials;
struct __pyx_obj_8pydecode_10potentials_CountingChart;
struct __pyx_obj_8pydecode_10potentials_CountingValue;
struct __pyx_obj_8pydecode_10potentials_BoolPotentials;
struct __pyx_obj_8pydecode_10potentials_BoolChart;
struct __pyx_obj_8pydecode_10potentials_BoolValue;
struct __pyx_obj_8pydecode_10potentials_Node;
struct __pyx_obj_8pydecode_10potentials_Marginals;
struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals;
struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals;
struct __pyx_obj_8pydecode_10potentials__InsideMarginals;
struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals;
struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__CountingMarginals;
struct __pyx_obj_8pydecode_10potentials__BoolMarginals;
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__;
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr;
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__;
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "pydecode/potentials.pxd":36
 *         bool equal(const CHyperpath path)
 * 
 * cdef class Labeling:             # <<<<<<<<<<<<<<
 *     cdef edge_labels
 *     cdef node_labels
 */
struct __pyx_obj_8pydecode_10potentials_Labeling {
  PyObject_HEAD
  PyObject *edge_labels;
  PyObject *node_labels;
};


/* "pydecode/potentials.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */
struct __pyx_obj_8pydecode_10potentials__LazyEdges {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges *__pyx_vtab;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *_graph;
  std::vector<Hyperedge const *> _edges;
};


/* "pydecode/potentials.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyVertices:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */
struct __pyx_obj_8pydecode_10potentials__LazyVertices {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices *__pyx_vtab;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *_graph;
  std::vector<Hypernode const *> _nodes;
};


/* "pydecode/potentials.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */
struct __pyx_obj_8pydecode_10potentials_Hypergraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Labeling *labeling;
  PyObject *_cached_edges;
};


/* "pydecode/potentials.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_GraphBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_GraphBuilder *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
  PyObject *edge_labels;
  PyObject *node_labels;
  PyObject *started;
};


/* "pydecode/potentials.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Vertex:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */
struct __pyx_obj_8pydecode_10potentials_Vertex {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *__pyx_vtab;
  Hypernode const *nodeptr;
  Hypergraph *graphptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_Edge {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_Edge *__pyx_vtab;
  Hyperedge const *edgeptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_Path *__pyx_vtab;
  Hyperpath const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */
struct __pyx_obj_8pydecode_10potentials_HypergraphMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *__pyx_vtab;
  HypergraphMap const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *range_graph;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *domain_graph;
};


/* "pydecode/potentials.pxd":125
 *         CHyperpath *construct_path()
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *      cdef const CBackPointers *thisptr
 *      cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_BackPointers {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtab;
  BackPointers const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":131
 *                             Hypergraph graph)
 * 
 * cdef class Potentials:             # <<<<<<<<<<<<<<
 *      cdef Hypergraph hypergraph
 *      cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_Potentials {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *hypergraph;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":135
 *      cdef kind
 * 
 * cdef class Chart:             # <<<<<<<<<<<<<<
 *      pass
 * 
 */
struct __pyx_obj_8pydecode_10potentials_Chart {
  PyObject_HEAD
};


/* "pydecode/potentials.pxd":234
 * 
 * 
 * cdef class ViterbiPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphViterbiPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtab;
  HypergraphPotentials<ViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":241
 *               HypergraphMap projection)
 * 
 * cdef class ViterbiChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<ViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":245
 *     cdef kind
 * 
 * cdef class ViterbiValue:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef ViterbiValue init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":343
 * 
 * 
 * cdef class LogViterbiPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphLogViterbiPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtab;
  HypergraphPotentials<LogViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":350
 *               HypergraphMap projection)
 * 
 * cdef class LogViterbiChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CLogViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<LogViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":354
 *     cdef kind
 * 
 * cdef class LogViterbiValue:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef LogViterbiValue init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":452
 * 
 * 
 * cdef class InsidePotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphInsidePotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_InsidePotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtab;
  HypergraphPotentials<InsidePotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":459
 *               HypergraphMap projection)
 * 
 * cdef class InsideChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CInsideChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_InsideChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<InsidePotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":463
 *     cdef kind
 * 
 * cdef class InsideValue:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef InsideValue init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials_InsideValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":561
 * 
 * 
 * cdef class MinMaxPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphMinMaxPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *__pyx_vtab;
  HypergraphPotentials<MinMaxPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":568
 *               HypergraphMap projection)
 * 
 * cdef class MinMaxChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CMinMaxChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MinMaxChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<MinMaxPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":572
 *     cdef kind
 * 
 * cdef class MinMaxValue:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef MinMaxValue init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials_MinMaxValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":670
 * 
 * 
 * cdef class SparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphSparseVectorPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtab;
  HypergraphPotentials<SparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":677
 *               HypergraphMap projection)
 * 
 * cdef class SparseVectorChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<SparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":681
 *     cdef kind
 * 
 * cdef class SparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":779
 * 
 * 
 * cdef class MinSparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphMinSparseVectorPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtab;
  HypergraphPotentials<MinSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":786
 *               HypergraphMap projection)
 * 
 * cdef class MinSparseVectorChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CMinSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<MinSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":790
 *     cdef kind
 * 
 * cdef class MinSparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":888
 * 
 * 
 * cdef class MaxSparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphMaxSparseVectorPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtab;
  HypergraphPotentials<MaxSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":895
 *               HypergraphMap projection)
 * 
 * cdef class MaxSparseVectorChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CMaxSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<MaxSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":899
 *     cdef kind
 * 
 * cdef class MaxSparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":997
 * 
 * 
 * cdef class CountingPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphCountingPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_CountingPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtab;
  HypergraphPotentials<CountingPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":1004
 *               HypergraphMap projection)
 * 
 * cdef class CountingChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CCountingChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_CountingChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<CountingPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":1008
 *     cdef kind
 * 
 * cdef class CountingValue:             # <<<<<<<<<<<<<<
 *     cdef int thisval
 *     cdef CountingValue init(self, int val)
 */
struct __pyx_obj_8pydecode_10potentials_CountingValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *__pyx_vtab;
  int thisval;
};


/* "pydecode/potentials.pxd":1106
 * 
 * 
 * cdef class BoolPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     cdef CHypergraphBoolPotentials *thisptr
 *     cdef HypergraphMap projection
 */
struct __pyx_obj_8pydecode_10potentials_BoolPotentials {
  struct __pyx_obj_8pydecode_10potentials_Potentials __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtab;
  HypergraphPotentials<BoolPotential> *thisptr;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *projection;
};


/* "pydecode/potentials.pxd":1113
 *               HypergraphMap projection)
 * 
 * cdef class BoolChart(Chart):             # <<<<<<<<<<<<<<
 *     cdef CBoolChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_BoolChart {
  struct __pyx_obj_8pydecode_10potentials_Chart __pyx_base;
  Chart<BoolPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":1117
 *     cdef kind
 * 
 * cdef class BoolValue:             # <<<<<<<<<<<<<<
 *     cdef bool thisval
 *     cdef BoolValue init(self, bool val)
 */
struct __pyx_obj_8pydecode_10potentials_BoolValue {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *__pyx_vtab;
  bool thisval;
};


/* "pydecode/potentials.pyx":324
 *         return (self.nodeptr.id() == -1)
 * 
 * cdef class Node(Vertex):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_8pydecode_10potentials_Node {
  struct __pyx_obj_8pydecode_10potentials_Vertex __pyx_base;
};


/* "pydecode/potentials.pyx":761
 * 
 * 
 * cdef class Marginals:             # <<<<<<<<<<<<<<
 *     r"""
 *     Marginal values with a hypergraph and potentials.
 */
struct __pyx_obj_8pydecode_10potentials_Marginals {
  PyObject_HEAD
};


/* "pydecode/potentials.pyx":1029
 * 
 * 
 * cdef class _ViterbiMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *__pyx_vtab;
  Marginals<ViterbiPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":1387
 * 
 * 
 * cdef class _LogViterbiMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CLogViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *__pyx_vtab;
  Marginals<LogViterbiPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":1745
 * 
 * 
 * cdef class _InsideMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CInsideMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__InsideMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *__pyx_vtab;
  Marginals<InsidePotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2103
 * 
 * 
 * cdef class _MinMaxMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMinMaxMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__MinMaxMarginals *__pyx_vtab;
  Marginals<MinMaxPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2400
 * 
 * 
 * cdef class _SparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *__pyx_vtab;
  Marginals<SparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2694
 * 
 * 
 * cdef class _MinSparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMinSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_vtab;
  Marginals<MinSparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2988
 * 
 * 
 * cdef class _MaxSparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMaxSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_vtab;
  Marginals<MaxSparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":3313
 * 
 * 
 * cdef class _CountingMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CCountingMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__CountingMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *__pyx_vtab;
  Marginals<CountingPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":3641
 * 
 * 
 * cdef class _BoolMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CBoolMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__BoolMarginals {
  struct __pyx_obj_8pydecode_10potentials_Marginals __pyx_base;
  struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *__pyx_vtab;
  Marginals<BoolPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":39
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self;
};


/* "pydecode/potentials.pyx":40
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *__pyx_outer_scope;
  Hyperedge const *__pyx_v_edge;
  std::vector<Hyperedge const *>::iterator __pyx_t_0;
  std::vector<Hyperedge const *> *__pyx_t_1;
};


/* "pydecode/potentials.pyx":56
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 */
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self;
};


/* "pydecode/potentials.pyx":57
 * 
 *     def __iter__(self):
 *         return (Vertex().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *__pyx_outer_scope;
  Hypernode const *__pyx_v_node;
  std::vector<Hypernode const *>::iterator __pyx_t_0;
  std::vector<Hypernode const *> *__pyx_t_1;
};


/* "View.MemoryView":99
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":269
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":302
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":922
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "pydecode/potentials.pyx":28
 *             return self.node_labels[obj.id]
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     def __init__(self, graph):
 *         self._graph = graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__LazyEdges *, std::vector<Hyperedge const *>);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges *__pyx_vtabptr_8pydecode_10potentials__LazyEdges;


/* "pydecode/potentials.pyx":45
 *         return self._edges.size()
 * 
 * cdef class _LazyVertices:             # <<<<<<<<<<<<<<
 *     def __init__(self, graph):
 *         self._graph = graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__LazyVertices *, std::vector<Hypernode const *>);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices *__pyx_vtabptr_8pydecode_10potentials__LazyVertices;


/* "pydecode/potentials.pyx":62
 *         return self._nodes.size()
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     r"""
 *     The search space of a dynamic program.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *(*init)(struct __pyx_obj_8pydecode_10potentials_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10potentials_Labeling *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph *__pyx_vtabptr_8pydecode_10potentials_Hypergraph;


/* "pydecode/potentials.pyx":142
 *         return s
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     r"""
 *     Direct constructor for hypergraphs.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_GraphBuilder {
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *(*init)(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *, Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_GraphBuilder *__pyx_vtabptr_8pydecode_10potentials_GraphBuilder;


/* "pydecode/potentials.pyx":249
 *         return node
 * 
 * cdef class Vertex:             # <<<<<<<<<<<<<<
 *     r"""
 *     Hypergraph vertex.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Vertex {
  struct __pyx_obj_8pydecode_10potentials_Vertex *(*init)(struct __pyx_obj_8pydecode_10potentials_Vertex *, Hypernode const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *__pyx_vtabptr_8pydecode_10potentials_Vertex;


/* "pydecode/potentials.pyx":327
 *     pass
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     r"""
 *     Hypergraph hyperedge.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Edge {
  struct __pyx_obj_8pydecode_10potentials_Edge *(*init)(struct __pyx_obj_8pydecode_10potentials_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Edge *__pyx_vtabptr_8pydecode_10potentials_Edge;


/* "pydecode/potentials.pyx":402
 * 
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     r"""
 *     Path through the hypergraph.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Path {
  struct __pyx_obj_8pydecode_10potentials_Path *(*init)(struct __pyx_obj_8pydecode_10potentials_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
  PyObject *(*equal)(struct __pyx_obj_8pydecode_10potentials_Path *, struct __pyx_obj_8pydecode_10potentials_Path *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Path *__pyx_vtabptr_8pydecode_10potentials_Path;


/* "pydecode/potentials.pyx":499
 * 
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     """
 *     Map between two hypergraphs.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap {
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *(*init)(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *__pyx_vtabptr_8pydecode_10potentials_HypergraphMap;


/* "pydecode/potentials.pyx":3751
 * 
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *     """
 *     The back pointers generated by the Viterbi algorithm.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *(*init)(struct __pyx_obj_8pydecode_10potentials_BackPointers *, BackPointers const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtabptr_8pydecode_10potentials_BackPointers;


/* "pydecode/potentials.pyx":781
 * 
 * 
 * cdef class ViterbiPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Real-valued max probability potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *, HypergraphPotentials<ViterbiPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials;


/* "pydecode/potentials.pyx":952
 * 
 * 
 * cdef class ViterbiValue:             # <<<<<<<<<<<<<<
 *     cdef ViterbiValue init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue {
  struct __pyx_obj_8pydecode_10potentials_ViterbiValue *(*init)(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *__pyx_vtabptr_8pydecode_10potentials_ViterbiValue;


/* "pydecode/potentials.pyx":1139
 * 
 * 
 * cdef class LogViterbiPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Real-valued max log-probability potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *, HypergraphPotentials<LogViterbiPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials;


/* "pydecode/potentials.pyx":1310
 * 
 * 
 * cdef class LogViterbiValue:             # <<<<<<<<<<<<<<
 *     cdef LogViterbiValue init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *(*init)(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *__pyx_vtabptr_8pydecode_10potentials_LogViterbiValue;


/* "pydecode/potentials.pyx":1497
 * 
 * 
 * cdef class InsidePotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Real-valued probability potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *, HypergraphPotentials<InsidePotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtabptr_8pydecode_10potentials_InsidePotentials;


/* "pydecode/potentials.pyx":1668
 * 
 * 
 * cdef class InsideValue:             # <<<<<<<<<<<<<<
 *     cdef InsideValue init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue {
  struct __pyx_obj_8pydecode_10potentials_InsideValue *(*init)(struct __pyx_obj_8pydecode_10potentials_InsideValue *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *__pyx_vtabptr_8pydecode_10potentials_InsideValue;


/* "pydecode/potentials.pyx":1855
 * 
 * 
 * cdef class MinMaxPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Real-valued min value potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *, HypergraphPotentials<MinMaxPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *__pyx_vtabptr_8pydecode_10potentials_MinMaxPotentials;


/* "pydecode/potentials.pyx":2026
 * 
 * 
 * cdef class MinMaxValue:             # <<<<<<<<<<<<<<
 *     cdef MinMaxValue init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue {
  struct __pyx_obj_8pydecode_10potentials_MinMaxValue *(*init)(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *__pyx_vtabptr_8pydecode_10potentials_MinMaxValue;


/* "pydecode/potentials.pyx":2183
 * 
 * 
 * cdef class SparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Sparse-vector valued weights.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *, HypergraphPotentials<SparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials;


/* "pydecode/potentials.pyx":2336
 * 
 * 
 * cdef class SparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *(*init)(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *__pyx_vtabptr_8pydecode_10potentials_SparseVectorValue;


/* "pydecode/potentials.pyx":2477
 * 
 * 
 * cdef class MinSparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 * 
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *, HypergraphPotentials<MinSparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials;


/* "pydecode/potentials.pyx":2630
 * 
 * 
 * cdef class MinSparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *(*init)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *__pyx_vtabptr_8pydecode_10potentials_MinSparseVectorValue;


/* "pydecode/potentials.pyx":2771
 * 
 * 
 * cdef class MaxSparseVectorPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 * 
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *, HypergraphPotentials<MaxSparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials;


/* "pydecode/potentials.pyx":2924
 * 
 * 
 * cdef class MaxSparseVectorValue:             # <<<<<<<<<<<<<<
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *(*init)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *__pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorValue;


/* "pydecode/potentials.pyx":3065
 * 
 * 
 * cdef class CountingPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Natural-valued counting potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *, HypergraphPotentials<CountingPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtabptr_8pydecode_10potentials_CountingPotentials;


/* "pydecode/potentials.pyx":3236
 * 
 * 
 * cdef class CountingValue:             # <<<<<<<<<<<<<<
 *     cdef CountingValue init(self, int val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue {
  struct __pyx_obj_8pydecode_10potentials_CountingValue *(*init)(struct __pyx_obj_8pydecode_10potentials_CountingValue *, int);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *__pyx_vtabptr_8pydecode_10potentials_CountingValue;


/* "pydecode/potentials.pyx":3423
 * 
 * 
 * cdef class BoolPotentials(Potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Boolean-valued logical potentials.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *, HypergraphPotentials<BoolPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtabptr_8pydecode_10potentials_BoolPotentials;


/* "pydecode/potentials.pyx":3577
 * 
 * 
 * cdef class BoolValue:             # <<<<<<<<<<<<<<
 *     cdef BoolValue init(self, bool val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue {
  struct __pyx_obj_8pydecode_10potentials_BoolValue *(*init)(struct __pyx_obj_8pydecode_10potentials_BoolValue *, bool);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *__pyx_vtabptr_8pydecode_10potentials_BoolValue;


/* "pydecode/potentials.pyx":324
 *         return (self.nodeptr.id() == -1)
 * 
 * cdef class Node(Vertex):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_8pydecode_10potentials_Node {
  struct __pyx_vtabstruct_8pydecode_10potentials_Vertex __pyx_base;
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Node *__pyx_vtabptr_8pydecode_10potentials_Node;


/* "pydecode/potentials.pyx":1029
 * 
 * 
 * cdef class _ViterbiMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *, Marginals<ViterbiPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *__pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals;


/* "pydecode/potentials.pyx":1387
 * 
 * 
 * cdef class _LogViterbiMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CLogViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *, Marginals<LogViterbiPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *__pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals;


/* "pydecode/potentials.pyx":1745
 * 
 * 
 * cdef class _InsideMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CInsideMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *, Marginals<InsidePotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *__pyx_vtabptr_8pydecode_10potentials__InsideMarginals;


/* "pydecode/potentials.pyx":2103
 * 
 * 
 * cdef class _MinMaxMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMinMaxMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MinMaxMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *, Marginals<MinMaxPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinMaxMarginals *__pyx_vtabptr_8pydecode_10potentials__MinMaxMarginals;


/* "pydecode/potentials.pyx":2400
 * 
 * 
 * cdef class _SparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *, Marginals<SparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals;


/* "pydecode/potentials.pyx":2694
 * 
 * 
 * cdef class _MinSparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMinSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *, Marginals<MinSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals;


/* "pydecode/potentials.pyx":2988
 * 
 * 
 * cdef class _MaxSparseVectorMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CMaxSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *, Marginals<MaxSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals;


/* "pydecode/potentials.pyx":3313
 * 
 * 
 * cdef class _CountingMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CCountingMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *, Marginals<CountingPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *__pyx_vtabptr_8pydecode_10potentials__CountingMarginals;


/* "pydecode/potentials.pyx":3641
 * 
 * 
 * cdef class _BoolMarginals(Marginals):             # <<<<<<<<<<<<<<
 *     cdef const CBoolMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *, Marginals<BoolPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *__pyx_vtabptr_8pydecode_10potentials__BoolMarginals;


/* "View.MemoryView":302
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":922
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values); /*proto*/
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static void __Pyx_RaiseBufferIndexError(int axis); /*proto*/

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t); /* proto */

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#define UNARY_NEG_WOULD_OVERFLOW(x)            (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name); /*proto*/

#include <new>

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static PyObject *__pyx_memview_get_double(const char *itemp); /* proto */
static int __pyx_memview_set_double(const char *itemp, PyObject *obj); /* proto */

static PyObject *__pyx_memview_get_int(const char *itemp); /* proto */
static int __pyx_memview_set_int(const char *itemp, PyObject *obj); /* proto */

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                                        char order, int ndim);

static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'pydecode.potentials' */
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Labeling = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LazyEdges = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LazyVertices = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Hypergraph = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_GraphBuilder = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Vertex = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Edge = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Path = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_HypergraphMap = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BackPointers = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Potentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Chart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsidePotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsideChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsideValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinMaxPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinMaxChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinMaxValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolValue = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Node = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_Marginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__ViterbiMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__InsideMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MinMaxMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__CountingMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__BoolMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_2___iter__ = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *__pyx_v_8pydecode_10potentials__hypergraph_registry_counts = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static PyObject *__pyx_f_8pydecode_10potentials_convert_edges(std::vector<Hyperedge const *>, struct __pyx_obj_8pydecode_10potentials_Hypergraph *); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials_convert_nodes(std::vector<Hypernode const *>, struct __pyx_obj_8pydecode_10potentials_Hypergraph *); /*proto*/
static double __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Viterbi_from_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Viterbivector_to_numpy(std::vector<double> const &); /*proto*/
static double __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__LogViterbivector_to_numpy(std::vector<double> const &); /*proto*/
static double __pyx_f_8pydecode_10potentials__Inside_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Inside_from_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Insidevector_to_numpy(std::vector<double> const &); /*proto*/
static double __pyx_f_8pydecode_10potentials__MinMax_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MinMax_from_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MinMaxvector_to_numpy(std::vector<double> const &); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__SparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static int __pyx_f_8pydecode_10potentials__Counting_to_cpp(int); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Counting_from_cpp(int); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Countingvector_to_numpy(std::vector<int> const &); /*proto*/
static bool __pyx_f_8pydecode_10potentials__Bool_to_cpp(bool); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Bool_from_cpp(bool); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static std::pair<int,int> __pyx_convert_pair_from_py_int____int(PyObject *); /*proto*/
static std::vector<std::pair<int,int> > __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(const std::pair<int,int> &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(const std::vector<std::pair<int,int> > &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
#define __Pyx_MODULE_NAME "pydecode.potentials"
int __pyx_module_is_main_pydecode__potentials = 0;

/* Implementation of 'pydecode.potentials' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static int __pyx_pf_8pydecode_10potentials_8Labeling___init__(struct __pyx_obj_8pydecode_10potentials_Labeling *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_node_labels, PyObject *__pyx_v_edge_labels); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Labeling_2__getitem__(struct __pyx_obj_8pydecode_10potentials_Labeling *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static int __pyx_pf_8pydecode_10potentials_10_LazyEdges___init__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self, PyObject *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_2__getitem__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_8__iter___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_4__iter__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pydecode_10potentials_10_LazyEdges_6__len__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_13_LazyVertices___init__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self, PyObject *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_2__getitem__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_8__iter___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_4__iter__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pydecode_10potentials_13_LazyVertices_6__len__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_10Hypergraph_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_4builder(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_8vertices___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_5nodes___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_4root___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_6__str__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_12GraphBuilder___init__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_2__enter__(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_4__exit__(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_6add_node(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label); /* proto */
static void __pyx_pf_8pydecode_10potentials_6Vertex___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8pydecode_10potentials_6Vertex_2__hash__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_4__repr__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_2id___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_8subedges___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_11is_terminal___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_5label___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_6__str__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_6Vertex_8__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_10_removed(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8pydecode_10potentials_4Edge_2__hash__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_4Edge_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_6__repr__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_4tail___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_4head___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_5label___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_2id___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_8_removed(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_4Path___dealloc__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e); /* proto */
static int __pyx_pf_8pydecode_10potentials_4Path_2__cinit__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_edges); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_4__str__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_4Path_6__contains__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_8__iter__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_10__richcmp__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_8vertices___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Path_5nodes___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25HypergraphAccessException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25HypergraphAccessException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_31HypergraphConstructionException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_31HypergraphConstructionException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_13HypergraphMap___cinit__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_2compose(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_4invert(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph___get__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_16range_hypergraph___get__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_13HypergraphMap_6__dealloc__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_8__getitem__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_10_build_range_hypergraph(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_12_build_domain_hypergraph(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_show(struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_2times(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4clone(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_6project(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4bias___get__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_8from_array(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_X, CYTHON_UNUSED PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_10dot(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static int __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_10__add__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_6as_array(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_10__add__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_6as_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_16InsidePotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_26dot(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_10__add__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_11InsideChart___init__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_6as_array(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_16MinMaxPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_11MinMaxChart___init__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_11MinMaxChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxChart_6as_array(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_18CountingPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_from_value(int __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_10__add__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_13CountingChart___init__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_6as_array(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, int __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static int __pyx_pf_8pydecode_10potentials_14BoolPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static void __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_from_value(bool __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_10__add__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_9BoolChart___init__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, bool __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, PyObject *__pyx_v_thres); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8prune(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, PyObject *__pyx_v_thres); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14make_pruning_projections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16project(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18binarize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20pairwise_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_vec, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22extend_hypergraph_by_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, int __pyx_v_lower_limit, int __pyx_v_upper_limit, int __pyx_v_goal); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array_getbuffer_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *get_memview_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static int __pyx_MemviewEnum_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static int __pyx_memoryview_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview_getbuffer_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_memoryview_transpose_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview__get__base_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_shape_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_strides_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_suboffsets_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_ndim_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_itemsize_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_nbytes_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_get_size_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static void __pyx_memoryviewslice_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryviewslice__get__base_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_8pydecode_10potentials_Labeling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__LazyEdges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__LazyVertices(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Hypergraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_GraphBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Vertex(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Edge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Path(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_HypergraphMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BackPointers(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Potentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Chart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_InsidePotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_Marginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__ViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__InsideMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MinMaxMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__CountingMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__BoolMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_X[] = "X";
static char __pyx_k_b[] = "b";
static char __pyx_k_c[] = "c";
static char __pyx_k_d[] = "\t%d -> ";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__3[] = "\n";
static char __pyx_k__8[] = ":";
static char __pyx_k_bp[] = "bp";
static char __pyx_k_id[] = "id";
static char __pyx_k_np[] = "np";
static char __pyx_k_d_2[] = " %d ";
static char __pyx_k_d_3[] = "d";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_get[] = "get";
static char __pyx_k_key[] = "key";
static char __pyx_k_obj[] = "obj";
static char __pyx_k_one[] = "one";
static char __pyx_k_s_s[] = " %s %s \n";
static char __pyx_k_str[] = "__str__";
static char __pyx_k_val[] = "val";
static char __pyx_k_vec[] = "vec";
static char __pyx_k_Bool[] = "Bool";
static char __pyx_k_args[] = "args";
static char __pyx_k_base[] = "base";
static char __pyx_k_bias[] = "bias";
static char __pyx_k_filt[] = "filt";
static char __pyx_k_goal[] = "goal";
static char __pyx_k_head[] = "head";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_name[] = "name";
static char __pyx_k_ndim[] = "ndim";
static char __pyx_k_pack[] = "pack";
static char __pyx_k_path[] = "path";
static char __pyx_k_root[] = "root";
static char __pyx_k_rvec[] = "rvec";
static char __pyx_k_self[] = "self";
static char __pyx_k_send[] = "send";
static char __pyx_k_size[] = "size";
static char __pyx_k_sort[] = "sort";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_tail[] = "tail";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_zero[] = "zero";
static char __pyx_k_20s_s[] = "%20s : %s";
static char __pyx_k_Chart[] = "Chart";
static char __pyx_k_chart[] = "chart";
static char __pyx_k_class[] = "__class__";
static char __pyx_k_close[] = "close";
static char __pyx_k_edges[] = "edges";
static char __pyx_k_error[] = "error";
static char __pyx_k_flags[] = "flags";
static char __pyx_k_graph[] = "graph";
static char __pyx_k_label[] = "label";
static char __pyx_k_nodes[] = "nodes";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_prune[] = "prune";
static char __pyx_k_range[] = "range";
static char __pyx_k_shape[] = "shape";
static char __pyx_k_start[] = "start";
static char __pyx_k_thres[] = "thres";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_value[] = "value";
static char __pyx_k_EDGE_d[] = "EDGE:%d";
static char __pyx_k_Inside[] = "Inside";
static char __pyx_k_MinMax[] = "MinMax";
static char __pyx_k_NODE_d[] = "NODE:%d";
static char __pyx_k_Root_s[] = "Root %s";
static char __pyx_k_append[] = "append";
static char __pyx_k_bias_2[] = "_bias";
static char __pyx_k_filter[] = "filter";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_in_map[] = "in_map";
static char __pyx_k_in_vec[] = "in_vec";
static char __pyx_k_inside[] = "inside";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_name_2[] = "__name__";
static char __pyx_k_struct[] = "struct";
static char __pyx_k_unpack[] = "unpack";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_Viterbi[] = "Viterbi";
static char __pyx_k_asarray[] = "asarray";
static char __pyx_k_created[] = "created";
static char __pyx_k_fortran[] = "fortran";
static char __pyx_k_memview[] = "memview";
static char __pyx_k_one_raw[] = "one_raw";
static char __pyx_k_outside[] = "outside";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_project[] = "project";
static char __pyx_k_removed[] = "_removed";
static char __pyx_k_thisptr[] = "thisptr";
static char __pyx_k_viterbi[] = "viterbi";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_Counting[] = "Counting";
static char __pyx_k_Ellipsis[] = "Ellipsis";
static char __pyx_k_Passed_s[] = "Passed %s.";
static char __pyx_k_binarize[] = "binarize";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_subedges[] = "subedges";
static char __pyx_k_vertices[] = "vertices";
static char __pyx_k_zero_raw[] = "zero_raw";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_Marginals[] = "Marginals";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_best_path[] = "best_path";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_exception[] = "exception";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_marginals[] = "marginals";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_out_chart[] = "out_chart";
static char __pyx_k_threshold[] = "threshold";
static char __pyx_k_used_back[] = "used_back";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_LogViterbi[] = "LogViterbi";
static char __pyx_k_Potentials[] = "Potentials";
static char __pyx_k_Received_s[] = "Received %s";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_from_value[] = "from_value";
static char __pyx_k_potentials[] = "potentials";
static char __pyx_k_projection[] = "projection";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_used_chart[] = "used_chart";
static char __pyx_k_Bad_edge_id[] = "Bad edge id.";
static char __pyx_k_Bad_node_id[] = "Bad node id.";
static char __pyx_k_Bool_inside[] = "Bool.inside";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_edge_labels[] = "edge_labels";
static char __pyx_k_lower_limit[] = "lower_limit";
static char __pyx_k_node_labels[] = "node_labels";
static char __pyx_k_upper_limit[] = "upper_limit";
static char __pyx_k_Bool_outside[] = "Bool.outside";
static char __pyx_k_Bool_viterbi[] = "Bool.viterbi";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_SparseVector[] = "SparseVector";
static char __pyx_k_inside_chart[] = "inside_chart";
static char __pyx_k_pairwise_dot[] = "pairwise_dot";
static char __pyx_k_staticmethod[] = "staticmethod";
static char __pyx_k_Inside_inside[] = "Inside.inside";
static char __pyx_k_MinMax_inside[] = "MinMax.inside";
static char __pyx_k_inside_values[] = "inside_values";
static char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static char __pyx_k_Inside_outside[] = "Inside.outside";
static char __pyx_k_Inside_viterbi[] = "Inside.viterbi";
static char __pyx_k_MinMax_outside[] = "MinMax.outside";
static char __pyx_k_Viterbi_inside[] = "Viterbi.inside";
static char __pyx_k_hypergraph_map[] = "hypergraph_map";
static char __pyx_k_outside_values[] = "outside_values";
static char __pyx_k_Counting_inside[] = "Counting.inside";
static char __pyx_k_MaxSparseVector[] = "MaxSparseVector";
static char __pyx_k_MinSparseVector[] = "MinSparseVector";
static char __pyx_k_Viterbi_outside[] = "Viterbi.outside";
static char __pyx_k_Viterbi_viterbi[] = "Viterbi.viterbi";
static char __pyx_k_allocate_buffer[] = "allocate_buffer";
static char __pyx_k_bool_potentials[] = "bool_potentials";
static char __pyx_k_dtype_is_object[] = "dtype_is_object";
static char __pyx_k_Counting_outside[] = "Counting.outside";
static char __pyx_k_Counting_viterbi[] = "Counting.viterbi";
static char __pyx_k_prune_hypergraph[] = "prune_hypergraph";
static char __pyx_k_range_hypergraph[] = "range_hypergraph";
static char __pyx_k_LogViterbi_inside[] = "LogViterbi.inside";
static char __pyx_k_compute_marginals[] = "compute_marginals";
static char __pyx_k_domain_hypergraph[] = "domain_hypergraph";
static char __pyx_k_LogViterbi_outside[] = "LogViterbi.outside";
static char __pyx_k_LogViterbi_viterbi[] = "LogViterbi.viterbi";
static char __pyx_k_strided_and_direct[] = "<strided and direct>";
static char __pyx_k_SparseVector_inside[] = "SparseVector.inside";
static char __pyx_k_pydecode_potentials[] = "pydecode.potentials";
static char __pyx_k_SparseVector_outside[] = "SparseVector.outside";
static char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static char __pyx_k_Bool_prune_hypergraph[] = "Bool.prune_hypergraph";
static char __pyx_k_cinit___locals_lambda[] = "__cinit__.<locals>.<lambda>";
static char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static char __pyx_k_Bool_compute_marginals[] = "Bool.compute_marginals";
static char __pyx_k_MaxSparseVector_inside[] = "MaxSparseVector.inside";
static char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static char __pyx_k_MinSparseVector_inside[] = "MinSparseVector.inside";
static char __pyx_k_No_inequality_on_paths[] = "No inequality on paths.";
static char __pyx_k_build_range_hypergraph[] = "_build_range_hypergraph";
static char __pyx_k_Inside_prune_hypergraph[] = "Inside.prune_hypergraph";
static char __pyx_k_MaxSparseVector_outside[] = "MaxSparseVector.outside";
static char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static char __pyx_k_MinMax_prune_hypergraph[] = "MinMax.prune_hypergraph";
static char __pyx_k_MinSparseVector_outside[] = "MinSparseVector.outside";
static char __pyx_k_build_domain_hypergraph[] = "_build_domain_hypergraph";
static char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static char __pyx_k_Inside_compute_marginals[] = "Inside.compute_marginals";
static char __pyx_k_MinMax_compute_marginals[] = "MinMax.compute_marginals";
static char __pyx_k_Viterbi_prune_hypergraph[] = "Viterbi.prune_hypergraph";
static char __pyx_k_getbuffer_obj_view_flags[] = "getbuffer(obj, view, flags)";
static char __pyx_k_make_pruning_projections[] = "make_pruning_projections";
static char __pyx_k_Counting_prune_hypergraph[] = "Counting.prune_hypergraph";
static char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static char __pyx_k_HypergraphAccessException[] = "HypergraphAccessException";
static char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static char __pyx_k_There_is_no_edge_labeling[] = "There is no edge labeling.";
static char __pyx_k_There_is_no_node_labeling[] = "There is no node labeling.";
static char __pyx_k_Viterbi_compute_marginals[] = "Viterbi.compute_marginals";
static char __pyx_k_Counting_compute_marginals[] = "Counting.compute_marginals";
static char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static char __pyx_k_extend_hypergraph_by_count[] = "extend_hypergraph_by_count";
static char __pyx_k_LogViterbi_prune_hypergraph[] = "LogViterbi.prune_hypergraph";
static char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_LogViterbi_compute_marginals[] = "LogViterbi.compute_marginals";
static char __pyx_k_Hypergraph_Edges_s_Vertices_s[] = "Hypergraph: Edges: %s Vertices: %s";
static char __pyx_k_SparseVector_prune_hypergraph[] = "SparseVector.prune_hypergraph";
static char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static char __pyx_k_SparseVector_compute_marginals[] = "SparseVector.compute_marginals";
static char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static char __pyx_k_Edges_must_be_pairs_of_the_form[] = "Edges must be pairs of the form (tail_nodes, label).";
static char __pyx_k_HypergraphAccessException___str[] = "HypergraphAccessException.__str__";
static char __pyx_k_HypergraphConstructionException[] = "HypergraphConstructionException";
static char __pyx_k_home_srush_Projects_decoding_py[] = "/home/srush/Projects/decoding/python/pydecode/potentials.pyx";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static char __pyx_k_An_edge_must_have_at_least_one_t[] = "An edge must have at least one tail node.";
static char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_HypergraphAccessException___init[] = "HypergraphAccessException.__init__";
static char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static char __pyx_k_MaxSparseVector_compute_marginal[] = "MaxSparseVector.compute_marginals";
static char __pyx_k_MaxSparseVector_prune_hypergraph[] = "MaxSparseVector.prune_hypergraph";
static char __pyx_k_MinSparseVector_compute_marginal[] = "MinSparseVector.compute_marginals";
static char __pyx_k_MinSparseVector_prune_hypergraph[] = "MinSparseVector.prune_hypergraph";
static char __pyx_k_Must_constuct_graph_in_with_bloc[] = "Must constuct graph in 'with' block.";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Only_nodes_and_edges_have_Bool_m[] = "Only nodes and edges have Bool marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Counti[] = "Only nodes and edges have Counting marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Inside[] = "Only nodes and edges have Inside marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_LogVit[] = "Only nodes and edges have LogViterbi marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_MaxSpa[] = "Only nodes and edges have MaxSparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_MinMax[] = "Only nodes and edges have MinMax marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_MinSpa[] = "Only nodes and edges have MinSparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Sparse[] = "Only nodes and edges have SparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Viterb[] = "Only nodes and edges have Viterbi marginal values.";
static char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static char __pyx_k_HypergraphConstructionException_2[] = "HypergraphConstructionException.__init__";
static char __pyx_k_HypergraphConstructionException_3[] = "HypergraphConstructionException.__str__";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_20s_s;
static PyObject *__pyx_kp_s_An_edge_must_have_at_least_one_t;
static PyObject *__pyx_kp_s_Bad_edge_id;
static PyObject *__pyx_kp_s_Bad_node_id;
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_n_s_Bool_compute_marginals;
static PyObject *__pyx_n_s_Bool_inside;
static PyObject *__pyx_n_s_Bool_outside;
static PyObject *__pyx_n_s_Bool_prune_hypergraph;
static PyObject *__pyx_n_s_Bool_viterbi;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Chart;
static PyObject *__pyx_n_s_Counting;
static PyObject *__pyx_n_s_Counting_compute_marginals;
static PyObject *__pyx_n_s_Counting_inside;
static PyObject *__pyx_n_s_Counting_outside;
static PyObject *__pyx_n_s_Counting_prune_hypergraph;
static PyObject *__pyx_n_s_Counting_viterbi;
static PyObject *__pyx_kp_s_EDGE_d;
static PyObject *__pyx_kp_s_Edges_must_be_pairs_of_the_form;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_HypergraphAccessException;
static PyObject *__pyx_n_s_HypergraphAccessException___init;
static PyObject *__pyx_n_s_HypergraphAccessException___str;
static PyObject *__pyx_n_s_HypergraphConstructionException;
static PyObject *__pyx_n_s_HypergraphConstructionException_2;
static PyObject *__pyx_n_s_HypergraphConstructionException_3;
static PyObject *__pyx_kp_s_Hypergraph_Edges_s_Vertices_s;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_n_s_Inside;
static PyObject *__pyx_n_s_Inside_compute_marginals;
static PyObject *__pyx_n_s_Inside_inside;
static PyObject *__pyx_n_s_Inside_outside;
static PyObject *__pyx_n_s_Inside_prune_hypergraph;
static PyObject *__pyx_n_s_Inside_viterbi;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_LogViterbi;
static PyObject *__pyx_n_s_LogViterbi_compute_marginals;
static PyObject *__pyx_n_s_LogViterbi_inside;
static PyObject *__pyx_n_s_LogViterbi_outside;
static PyObject *__pyx_n_s_LogViterbi_prune_hypergraph;
static PyObject *__pyx_n_s_LogViterbi_viterbi;
static PyObject *__pyx_n_s_Marginals;
static PyObject *__pyx_n_s_MaxSparseVector;
static PyObject *__pyx_n_s_MaxSparseVector_compute_marginal;
static PyObject *__pyx_n_s_MaxSparseVector_inside;
static PyObject *__pyx_n_s_MaxSparseVector_outside;
static PyObject *__pyx_n_s_MaxSparseVector_prune_hypergraph;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_MinMax;
static PyObject *__pyx_n_s_MinMax_compute_marginals;
static PyObject *__pyx_n_s_MinMax_inside;
static PyObject *__pyx_n_s_MinMax_outside;
static PyObject *__pyx_n_s_MinMax_prune_hypergraph;
static PyObject *__pyx_n_s_MinSparseVector;
static PyObject *__pyx_n_s_MinSparseVector_compute_marginal;
static PyObject *__pyx_n_s_MinSparseVector_inside;
static PyObject *__pyx_n_s_MinSparseVector_outside;
static PyObject *__pyx_n_s_MinSparseVector_prune_hypergraph;
static PyObject *__pyx_kp_s_Must_constuct_graph_in_with_bloc;
static PyObject *__pyx_kp_s_NODE_d;
static PyObject *__pyx_kp_s_No_inequality_on_paths;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Bool_m;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Counti;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Inside;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_LogVit;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_MinMax;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_MinSpa;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Sparse;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Viterb;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_kp_s_Passed_s;
static PyObject *__pyx_n_s_Potentials;
static PyObject *__pyx_kp_s_Received_s;
static PyObject *__pyx_kp_s_Root_s;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SparseVector;
static PyObject *__pyx_n_s_SparseVector_compute_marginals;
static PyObject *__pyx_n_s_SparseVector_inside;
static PyObject *__pyx_n_s_SparseVector_outside;
static PyObject *__pyx_n_s_SparseVector_prune_hypergraph;
static PyObject *__pyx_kp_s_There_is_no_edge_labeling;
static PyObject *__pyx_kp_s_There_is_no_node_labeling;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Viterbi;
static PyObject *__pyx_n_s_Viterbi_compute_marginals;
static PyObject *__pyx_n_s_Viterbi_inside;
static PyObject *__pyx_n_s_Viterbi_outside;
static PyObject *__pyx_n_s_Viterbi_prune_hypergraph;
static PyObject *__pyx_n_s_Viterbi_viterbi;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_best_path;
static PyObject *__pyx_n_s_bias;
static PyObject *__pyx_n_s_bias_2;
static PyObject *__pyx_n_s_binarize;
static PyObject *__pyx_n_s_bool_potentials;
static PyObject *__pyx_n_s_bp;
static PyObject *__pyx_n_s_build_domain_hypergraph;
static PyObject *__pyx_n_s_build_range_hypergraph;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_chart;
static PyObject *__pyx_n_s_cinit___locals_lambda;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_compute_marginals;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_created;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_kp_s_d_2;
static PyObject *__pyx_n_s_d_3;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_domain_hypergraph;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_edge_labels;
static PyObject *__pyx_n_s_edges;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exception;
static PyObject *__pyx_n_s_extend_hypergraph_by_count;
static PyObject *__pyx_n_s_filt;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_from_value;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_goal;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_head;
static PyObject *__pyx_kp_s_home_srush_Projects_decoding_py;
static PyObject *__pyx_n_s_hypergraph_map;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_map;
static PyObject *__pyx_n_s_in_vec;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_inside;
static PyObject *__pyx_n_s_inside_chart;
static PyObject *__pyx_n_s_inside_values;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lower_limit;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_pruning_projections;
static PyObject *__pyx_n_s_marginals;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_node_labels;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_one;
static PyObject *__pyx_n_s_one_raw;
static PyObject *__pyx_n_s_out_chart;
static PyObject *__pyx_n_s_outside;
static PyObject *__pyx_n_s_outside_values;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pairwise_dot;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_potentials;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_project;
static PyObject *__pyx_n_s_projection;
static PyObject *__pyx_n_s_prune;
static PyObject *__pyx_n_s_prune_hypergraph;
static PyObject *__pyx_n_s_pydecode_potentials;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_range_hypergraph;
static PyObject *__pyx_n_s_removed;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_s_rvec;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_subedges;
static PyObject *__pyx_n_s_tail;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thisptr;
static PyObject *__pyx_n_s_thres;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_upper_limit;
static PyObject *__pyx_n_s_used_back;
static PyObject *__pyx_n_s_used_chart;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_vec;
static PyObject *__pyx_n_s_vertices;
static PyObject *__pyx_n_s_viterbi;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zero;
static PyObject *__pyx_n_s_zero_raw;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__7;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__163;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__173;
static PyObject *__pyx_codeobj__175;
static PyObject *__pyx_codeobj__177;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__191;
static PyObject *__pyx_codeobj__193;
static PyObject *__pyx_codeobj__195;
static PyObject *__pyx_codeobj__197;
static PyObject *__pyx_codeobj__199;

/* "pydecode/potentials.pyx":10
 * 
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_8Labeling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_8Labeling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_node_labels = 0;
  PyObject *__pyx_v_edge_labels = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_node_labels,&__pyx_n_s_edge_labels,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":11
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,
 *                  node_labels=None, edge_labels=None):             # <<<<<<<<<<<<<<
 *         self.edge_labels = edge_labels
 *         self.node_labels = node_labels
 */
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node_labels);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edge_labels);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_node_labels = values[1];
    __pyx_v_edge_labels = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Labeling.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Labeling___init__(((struct __pyx_obj_8pydecode_10potentials_Labeling *)__pyx_v_self), __pyx_v_graph, __pyx_v_node_labels, __pyx_v_edge_labels);

  /* "pydecode/potentials.pyx":10
 * 
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_8Labeling___init__(struct __pyx_obj_8pydecode_10potentials_Labeling *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_node_labels, PyObject *__pyx_v_edge_labels) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":12
 *     def __init__(self, Hypergraph graph,
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels             # <<<<<<<<<<<<<<
 *         self.node_labels = node_labels
 * 
 */
  __Pyx_INCREF(__pyx_v_edge_labels);
  __Pyx_GIVEREF(__pyx_v_edge_labels);
  __Pyx_GOTREF(__pyx_v_self->edge_labels);
  __Pyx_DECREF(__pyx_v_self->edge_labels);
  __pyx_v_self->edge_labels = __pyx_v_edge_labels;

  /* "pydecode/potentials.pyx":13
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 *         self.node_labels = node_labels             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_INCREF(__pyx_v_node_labels);
  __Pyx_GIVEREF(__pyx_v_node_labels);
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = __pyx_v_node_labels;

  /* "pydecode/potentials.pyx":10
 * 
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":15
 *         self.node_labels = node_labels
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Labeling_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_8Labeling_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Labeling_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_Labeling *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Labeling_2__getitem__(struct __pyx_obj_8pydecode_10potentials_Labeling *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":16
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":17
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:             # <<<<<<<<<<<<<<
 *                 raise HypergraphAccessException(
 *                     "There is no edge labeling.")
 */
    __pyx_t_2 = (__pyx_v_self->edge_labels == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pydecode/potentials.pyx":18
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pydecode/potentials.pyx":20
 *                 raise HypergraphAccessException(
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->edge_labels, __pyx_t_4); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":22
 *             return self.edge_labels[obj.id]
 * 
 *         if isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":23
 * 
 *         if isinstance(obj, Vertex):
 *             if self.node_labels is None:             # <<<<<<<<<<<<<<
 *                 raise HypergraphAccessException(
 *                     "There is no node labeling.")
 */
    __pyx_t_2 = (__pyx_v_self->node_labels == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pydecode/potentials.pyx":24
 *         if isinstance(obj, Vertex):
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pydecode/potentials.pyx":26
 *                 raise HypergraphAccessException(
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]             # <<<<<<<<<<<<<<
 * 
 * cdef class _LazyEdges:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->node_labels, __pyx_t_4); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":15
 *         self.node_labels = node_labels
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.Labeling.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":29
 * 
 * cdef class _LazyEdges:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_10_LazyEdges_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_10_LazyEdges_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._LazyEdges.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_10_LazyEdges___init__(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_10_LazyEdges___init__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self, PyObject *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":30
 * cdef class _LazyEdges:
 *     def __init__(self, graph):
 *         self._graph = graph             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):
 */
  if (!(likely(((__pyx_v_graph) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_graph, __pyx_ptype_8pydecode_10potentials_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_graph;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_v_self->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":29
 * 
 * cdef class _LazyEdges:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LazyEdges.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":32
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):             # <<<<<<<<<<<<<<
 *         self._edges = edges
 *         return self
 */

static PyObject *__pyx_f_8pydecode_10potentials_10_LazyEdges_init(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self, std::vector<Hyperedge const *> __pyx_v_edges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":33
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):
 *         self._edges = edges             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_edges = __pyx_v_edges;

  /* "pydecode/potentials.pyx":34
 *     cdef init(self, vector[const CHyperedge *] edges):
 *         self._edges = edges
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":32
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):             # <<<<<<<<<<<<<<
 *         self._edges = edges
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":36
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Edge().init(self._edges[item], self._graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10_LazyEdges_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10_LazyEdges_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10_LazyEdges_2__getitem__(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_2__getitem__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":37
 * 
 *     def __getitem__(self, item):
 *         return Edge().init(self._edges[item], self._graph)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_v_self->_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Edge *)((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_1), (__pyx_v_self->_edges[__pyx_t_2]), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":36
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Edge().init(self._edges[item], self._graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials._LazyEdges.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":39
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10_LazyEdges_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10_LazyEdges_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10_LazyEdges_4__iter__(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pydecode_10potentials_10_LazyEdges_8__iter___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pydecode/potentials.pyx":40
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_8__iter___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_1_genexpr(__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_8pydecode_10potentials_10_LazyEdges_8__iter___2generator, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.potentials._LazyEdges.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pydecode_10potentials_10_LazyEdges_8__iter___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<Hyperedge const *>::iterator __pyx_t_1;
  std::vector<Hyperedge const *> *__pyx_t_2;
  Hyperedge const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = &__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_edges;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_edge = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_graph);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Edge *)((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4), __pyx_cur_scope->__pyx_v_edge, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_5))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "pydecode/potentials.pyx":39
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10potentials_10_LazyEdges_4__iter__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct____iter__(__pyx_ptype_8pydecode_10potentials___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "pydecode/potentials.pyx":40
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_8pydecode_10potentials_10_LazyEdges_8__iter___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":39
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LazyEdges.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":42
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._edges.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pydecode_10potentials_10_LazyEdges_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pydecode_10potentials_10_LazyEdges_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10_LazyEdges_6__len__(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pydecode_10potentials_10_LazyEdges_6__len__(struct __pyx_obj_8pydecode_10potentials__LazyEdges *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pydecode/potentials.pyx":43
 * 
 *     def __len__(self):
 *         return self._edges.size()             # <<<<<<<<<<<<<<
 * 
 * cdef class _LazyVertices:
 */
  __pyx_r = __pyx_v_self->_edges.size();
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":42
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._edges.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":46
 * 
 * cdef class _LazyVertices:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_13_LazyVertices_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_13_LazyVertices_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._LazyVertices.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_LazyVertices___init__(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_13_LazyVertices___init__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self, PyObject *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":47
 * cdef class _LazyVertices:
 *     def __init__(self, graph):
 *         self._graph = graph             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):
 */
  if (!(likely(((__pyx_v_graph) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_graph, __pyx_ptype_8pydecode_10potentials_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __pyx_v_graph;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_v_self->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":46
 * 
 * cdef class _LazyVertices:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LazyVertices.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":49
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):             # <<<<<<<<<<<<<<
 *         self._nodes = nodes
 *         return self
 */

static PyObject *__pyx_f_8pydecode_10potentials_13_LazyVertices_init(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self, std::vector<Hypernode const *> __pyx_v_nodes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":50
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):
 *         self._nodes = nodes             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_nodes = __pyx_v_nodes;

  /* "pydecode/potentials.pyx":51
 *     cdef init(self, vector[const CHypernode *] nodes):
 *         self._nodes = nodes
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":49
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):             # <<<<<<<<<<<<<<
 *         self._nodes = nodes
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":53
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_LazyVertices_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13_LazyVertices_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_LazyVertices_2__getitem__(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_2__getitem__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":54
 * 
 *     def __getitem__(self, item):
 *         return Vertex().init(self._nodes[item], self._graph)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_item); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_v_self->_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1), (__pyx_v_self->_nodes[__pyx_t_2]), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":53
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials._LazyVertices.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":56
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_LazyVertices_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13_LazyVertices_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_LazyVertices_4__iter__(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pydecode_10potentials_13_LazyVertices_8__iter___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pydecode/potentials.pyx":57
 * 
 *     def __iter__(self):
 *         return (Vertex().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_8__iter___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_3_genexpr(__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_8pydecode_10potentials_13_LazyVertices_8__iter___2generator1, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.potentials._LazyVertices.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pydecode_10potentials_13_LazyVertices_8__iter___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<Hypernode const *>::iterator __pyx_t_1;
  std::vector<Hypernode const *> *__pyx_t_2;
  Hypernode const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = &__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_nodes;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_node = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_graph);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_4), __pyx_cur_scope->__pyx_v_node, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_5))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "pydecode/potentials.pyx":56
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10potentials_13_LazyVertices_4__iter__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_2___iter__(__pyx_ptype_8pydecode_10potentials___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "pydecode/potentials.pyx":57
 * 
 *     def __iter__(self):
 *         return (Vertex().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_8pydecode_10potentials_13_LazyVertices_8__iter___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":56
 *         return Vertex().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LazyVertices.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":59
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._nodes.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pydecode_10potentials_13_LazyVertices_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pydecode_10potentials_13_LazyVertices_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_LazyVertices_6__len__(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_8pydecode_10potentials_13_LazyVertices_6__len__(struct __pyx_obj_8pydecode_10potentials__LazyVertices *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pydecode/potentials.pyx":60
 * 
 *     def __len__(self):
 *         return self._nodes.size()             # <<<<<<<<<<<<<<
 * 
 * cdef class Hypergraph:
 */
  __pyx_r = __pyx_v_self->_nodes.size();
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":59
 *         return (Vertex().init(node, self._graph) for node in self._nodes)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._nodes.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":81
 *       List of vertex set :math:`{\cal V}` in topological order.
 *     """
 *     def __cinit__(Hypergraph self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a new hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph___cinit__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":85
 *         Create a new hypergraph.
 *         """
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.labeling = None
 *         self._cached_edges = None
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":86
 *         """
 *         self.thisptr = NULL
 *         self.labeling = None             # <<<<<<<<<<<<<<
 *         self._cached_edges = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->labeling));
  __pyx_v_self->labeling = ((struct __pyx_obj_8pydecode_10potentials_Labeling *)Py_None);

  /* "pydecode/potentials.pyx":87
 *         self.thisptr = NULL
 *         self.labeling = None
 *         self._cached_edges = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_cached_edges);
  __Pyx_DECREF(__pyx_v_self->_cached_edges);
  __pyx_v_self->_cached_edges = Py_None;

  /* "pydecode/potentials.pyx":81
 *       List of vertex set :math:`{\cal V}` in topological order.
 *     """
 *     def __cinit__(Hypergraph self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a new hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":89
 *         self._cached_edges = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_10Hypergraph_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_10Hypergraph_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_10Hypergraph_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_10Hypergraph_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":90
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":91
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1             # <<<<<<<<<<<<<<
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr
 */
    __pyx_t_2 = __pyx_v_self->thisptr->id();
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_InPlaceSubtract(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_2, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":92
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:             # <<<<<<<<<<<<<<
 *                 del self.thisptr
 *                 self.thisptr = NULL
 */
    __pyx_t_2 = __pyx_v_self->thisptr->id();
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "pydecode/potentials.pyx":93
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr             # <<<<<<<<<<<<<<
 *                 self.thisptr = NULL
 * 
 */
      delete __pyx_v_self->thisptr;

      /* "pydecode/potentials.pyx":94
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr
 *                 self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef Hypergraph init(self, const CHypergraph *ptr,
 */
      __pyx_v_self->thisptr = NULL;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":89
 *         self._cached_edges = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pydecode.potentials.Hypergraph.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":96
 *                 self.thisptr = NULL
 * 
 *     cdef Hypergraph init(self, const CHypergraph *ptr,             # <<<<<<<<<<<<<<
 *                          Labeling labeling):
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 */

static struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_f_8pydecode_10potentials_10Hypergraph_init(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self, Hypergraph const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Labeling *__pyx_v_labeling) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":99
 *                          Labeling labeling):
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 *         assert self.thisptr is NULL             # <<<<<<<<<<<<<<
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:
 *             _hypergraph_registry_counts[ptr.id()] += 1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->thisptr == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":100
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 *         assert self.thisptr is NULL
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:             # <<<<<<<<<<<<<<
 *             _hypergraph_registry_counts[ptr.id()] += 1
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ptr->id()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pydecode/potentials.pyx":101
 *         assert self.thisptr is NULL
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:
 *             _hypergraph_registry_counts[ptr.id()] += 1             # <<<<<<<<<<<<<<
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1
 */
    __pyx_t_5 = __pyx_v_ptr->id();
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_5, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":103
 *             _hypergraph_registry_counts[ptr.id()] += 1
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1             # <<<<<<<<<<<<<<
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling
 */
    __pyx_t_5 = __pyx_v_ptr->id();
    if (unlikely(__Pyx_SetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_5, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":104
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1
 *         self.thisptr = <CHypergraph *> ptr             # <<<<<<<<<<<<<<
 *         self.labeling = labeling
 *         return self
 */
  __pyx_v_self->thisptr = ((Hypergraph *)__pyx_v_ptr);

  /* "pydecode/potentials.pyx":105
 *             _hypergraph_registry_counts[ptr.id()] = 1
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_labeling));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labeling));
  __Pyx_GOTREF(__pyx_v_self->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->labeling));
  __pyx_v_self->labeling = __pyx_v_labeling;

  /* "pydecode/potentials.pyx":106
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def builder(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":96
 *                 self.thisptr = NULL
 * 
 *     cdef Hypergraph init(self, const CHypergraph *ptr,             # <<<<<<<<<<<<<<
 *                          Labeling labeling):
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":108
 *         return self
 * 
 *     def builder(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHypergraph()
 *         #_hypergraph_registry[self.thisptr.id()] = self
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5builder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Hypergraph_4builder[] = "Hypergraph.builder(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5builder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("builder (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_4builder(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_4builder(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("builder", 0);

  /* "pydecode/potentials.pyx":109
 * 
 *     def builder(self):
 *         self.thisptr = new CHypergraph()             # <<<<<<<<<<<<<<
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1
 */
  __pyx_v_self->thisptr = new Hypergraph();

  /* "pydecode/potentials.pyx":111
 *         self.thisptr = new CHypergraph()
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1             # <<<<<<<<<<<<<<
 *         return GraphBuilder().init(self, self.thisptr)
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->id();
  if (unlikely(__Pyx_SetItemInt(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_1, __pyx_int_1, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":112
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1
 *         return GraphBuilder().init(self, self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     property vertices:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_GraphBuilder)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_GraphBuilder *)((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_t_2), __pyx_v_self, __pyx_v_self->thisptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":108
 *         return self
 * 
 *     def builder(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHypergraph()
 *         #_hypergraph_registry[self.thisptr.id()] = self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.builder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":115
 * 
 *     property vertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self).init(self.thisptr.nodes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_8vertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_8vertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_8vertices___get__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_8vertices___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":116
 *     property vertices:
 *         def __get__(self):
 *             return _LazyVertices(self).init(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 * 
 *     property nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LazyVertices)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices *)((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2), __pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":115
 * 
 *     property vertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self).init(self.thisptr.nodes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.vertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":119
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self).init(self.thisptr.nodes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_5nodes___get__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_5nodes___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":120
 *     property nodes:
 *         def __get__(self):
 *             return _LazyVertices(self).init(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 * 
 *     property root:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LazyVertices)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices *)((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2), __pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":119
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self).init(self.thisptr.nodes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":123
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Vertex().init(self.thisptr.root(), self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_4root_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_4root_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_4root___get__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_4root___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":124
 *     property root:
 *         def __get__(self):
 *             return Vertex().init(self.thisptr.root(), self)             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1), __pyx_v_self->thisptr->root(), __pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":123
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Vertex().init(self.thisptr.root(), self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.root.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":127
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_5edges___get__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":128
 *     property edges:
 *         def __get__(self):
 *             return _LazyEdges(self).init(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LazyEdges)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges *)((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_t_2), __pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":127
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":130
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Hypergraph_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Hypergraph_6__str__(((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Hypergraph_6__str__(struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/potentials.pyx":131
 * 
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),             # <<<<<<<<<<<<<<
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":132
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"             # <<<<<<<<<<<<<<
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nodes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pydecode/potentials.pyx":131
 * 
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),             # <<<<<<<<<<<<<<
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Hypergraph_Edges_s_Vertices_s, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":132
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"             # <<<<<<<<<<<<<<
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:
 */
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_s = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":133
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"             # <<<<<<<<<<<<<<
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_root); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Root_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s__3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":134
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:             # <<<<<<<<<<<<<<
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":135
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))             # <<<<<<<<<<<<<<
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_edge);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_edge);
    __Pyx_GIVEREF(__pyx_v_edge);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_4 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "pydecode/potentials.pyx":136
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)             # <<<<<<<<<<<<<<
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_head); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "pydecode/potentials.pyx":137
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:             # <<<<<<<<<<<<<<
 *                 s += " %d " % (node.id)
 *             s += "\n"
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_tail); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_6);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pydecode/potentials.pyx":138
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)             # <<<<<<<<<<<<<<
 *             s += "\n"
 *         return s
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_d_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pydecode/potentials.pyx":139
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)
 *             s += "\n"             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_kp_s__3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":140
 *                 s += " %d " % (node.id)
 *             s += "\n"
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class GraphBuilder:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":130
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         s = "Hypergraph: Edges: %s Vertices: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.Hypergraph.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":153
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_12GraphBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_12GraphBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12GraphBuilder___init__(((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_12GraphBuilder___init__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":157
 *         pass
 * 
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = hyper
 */

static struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_f_8pydecode_10potentials_12GraphBuilder_init(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_hyper, Hypergraph *__pyx_v_ptr) {
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":158
 * 
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = hyper
 *         self.edge_labels = []
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":159
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):
 *         self.thisptr = ptr
 *         self.graph = hyper             # <<<<<<<<<<<<<<
 *         self.edge_labels = []
 *         self.node_labels = []
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_hyper;

  /* "pydecode/potentials.pyx":160
 *         self.thisptr = ptr
 *         self.graph = hyper
 *         self.edge_labels = []             # <<<<<<<<<<<<<<
 *         self.node_labels = []
 *         self.started = False
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->edge_labels);
  __Pyx_DECREF(__pyx_v_self->edge_labels);
  __pyx_v_self->edge_labels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":161
 *         self.graph = hyper
 *         self.edge_labels = []
 *         self.node_labels = []             # <<<<<<<<<<<<<<
 *         self.started = False
 *         return self
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":162
 *         self.edge_labels = []
 *         self.node_labels = []
 *         self.started = False             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = Py_False;

  /* "pydecode/potentials.pyx":163
 *         self.node_labels = []
 *         self.started = False
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":157
 *         pass
 * 
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = hyper
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":165
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         # """
 *         # Start building the hypergraph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12GraphBuilder_2__enter__[] = "GraphBuilder.__enter__(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_12GraphBuilder_2__enter__(((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_2__enter__(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "pydecode/potentials.pyx":171
 *         # Use as with hypergraph.builder() as b:
 *         # """
 *         self.started = True             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = Py_True;

  /* "pydecode/potentials.pyx":172
 *         # """
 *         self.started = True
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exception, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":165
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         # """
 *         # Start building the hypergraph.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":174
 *         return self
 * 
 *     def __exit__(self, exception, b, c):             # <<<<<<<<<<<<<<
 *         # """End building the hypergraph
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12GraphBuilder_4__exit__[] = "GraphBuilder.__exit__(self, exception, b, c)";
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exception = 0;
  CYTHON_UNUSED PyObject *__pyx_v_b = 0;
  CYTHON_UNUSED PyObject *__pyx_v_c = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exception,&__pyx_n_s_b,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exception)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exception = values[0];
    __pyx_v_b = values[1];
    __pyx_v_c = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12GraphBuilder_4__exit__(((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_v_self), __pyx_v_exception, __pyx_v_b, __pyx_v_c);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_4__exit__(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c) {
  PyObject *__pyx_v_final_edge_labels = NULL;
  PyObject *__pyx_v_final_node_labels = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "pydecode/potentials.pyx":179
 *         # Automatically called when exiting with block.
 *         # """
 *         if exception:             # <<<<<<<<<<<<<<
 *             return False
 *         self.started = False
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_exception); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":180
 *         # """
 *         if exception:
 *             return False             # <<<<<<<<<<<<<<
 *         self.started = False
 *         self.thisptr.finish()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":181
 *         if exception:
 *             return False
 *         self.started = False             # <<<<<<<<<<<<<<
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = Py_False;

  /* "pydecode/potentials.pyx":182
 *             return False
 *         self.started = False
 *         self.thisptr.finish()             # <<<<<<<<<<<<<<
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 */
  try {
    __pyx_v_self->thisptr->finish();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":183
 *         self.started = False
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()             # <<<<<<<<<<<<<<
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 * 
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->edges().size()<0) ? 0:__pyx_v_self->thisptr->edges().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_final_edge_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":184
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 *         final_node_labels = [None] * self.thisptr.nodes().size()             # <<<<<<<<<<<<<<
 * 
 *         for node, t in self.node_labels:
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->nodes().size()<0) ? 0:__pyx_v_self->thisptr->nodes().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_final_node_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":186
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 * 
 *         for node, t in self.node_labels:             # <<<<<<<<<<<<<<
 *             if not node._removed():
 *                 final_node_labels[node.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->node_labels) || PyTuple_CheckExact(__pyx_v_self->node_labels)) {
    __pyx_t_2 = __pyx_v_self->node_labels; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->node_labels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pydecode/potentials.pyx":187
 * 
 *         for node, t in self.node_labels:
 *             if not node._removed():             # <<<<<<<<<<<<<<
 *                 final_node_labels[node.id] = t
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_removed); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = ((!__pyx_t_1) != 0);
    if (__pyx_t_10) {

      /* "pydecode/potentials.pyx":188
 *         for node, t in self.node_labels:
 *             if not node._removed():
 *                 final_node_labels[node.id] = t             # <<<<<<<<<<<<<<
 * 
 *         for edge, t in self.edge_labels:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyObject_SetItem(__pyx_v_final_node_labels, __pyx_t_7, __pyx_v_t) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":190
 *                 final_node_labels[node.id] = t
 * 
 *         for edge, t in self.edge_labels:             # <<<<<<<<<<<<<<
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->edge_labels) || PyTuple_CheckExact(__pyx_v_self->edge_labels)) {
    __pyx_t_2 = __pyx_v_self->edge_labels; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->edge_labels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_7 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pydecode/potentials.pyx":191
 * 
 *         for edge, t in self.edge_labels:
 *             if not edge._removed():             # <<<<<<<<<<<<<<
 *                 final_edge_labels[edge.id] = t
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_removed); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = ((!__pyx_t_10) != 0);
    if (__pyx_t_1) {

      /* "pydecode/potentials.pyx":192
 *         for edge, t in self.edge_labels:
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t             # <<<<<<<<<<<<<<
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,
 *                                        final_edge_labels)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyObject_SetItem(__pyx_v_final_edge_labels, __pyx_t_6, __pyx_v_t) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L13;
    }
    __pyx_L13:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":193
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,             # <<<<<<<<<<<<<<
 *                                        final_edge_labels)
 * 
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __Pyx_INCREF(__pyx_v_final_node_labels);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_final_node_labels);
  __Pyx_GIVEREF(__pyx_v_final_node_labels);
  __Pyx_INCREF(__pyx_v_final_edge_labels);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_final_edge_labels);
  __Pyx_GIVEREF(__pyx_v_final_edge_labels);
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Labeling)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->graph->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph->labeling));
  __pyx_v_self->graph->labeling = ((struct __pyx_obj_8pydecode_10potentials_Labeling *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":174
 *         return self
 * 
 *     def __exit__(self, exception, b, c):             # <<<<<<<<<<<<<<
 *         # """End building the hypergraph
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_final_edge_labels);
  __Pyx_XDECREF(__pyx_v_final_node_labels);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":196
 *                                        final_edge_labels)
 * 
 *     def add_node(self, edges=[], label=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add a node to the hypergraph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_7add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12GraphBuilder_6add_node[] = "GraphBuilder.add_node(self, edges=[], label=None)\n\n        Add a node to the hypergraph.\n\n        Parameters\n        ------------\n\n        edges :\n           An iterator where each of the items is of the form\n           ([v_2, v_3..], label)  where v_2 ... are :py:class:`Vertex` s and\n           label is an edge label of any type.\n\n        label : any\n           Optional label for the node.\n\n\n        Returns\n        --------------\n        :py:class:`Vertex`\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_12GraphBuilder_7add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k__4;
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
    __pyx_v_label = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12GraphBuilder_6add_node(((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)__pyx_v_self), __pyx_v_edges, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12GraphBuilder_6add_node(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label) {
  Hypernode const *__pyx_v_nodeptr;
  std::vector<Hypernode const *> __pyx_v_tail_node_ptrs;
  Hyperedge const *__pyx_v_edgeptr;
  PyObject *__pyx_v_edge_cons = NULL;
  PyObject *__pyx_v_tail_nodes = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_tail_node = NULL;
  struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  Hyperedge const *__pyx_t_18;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "pydecode/potentials.pyx":217
 *         """
 * 
 *         if not self.started:             # <<<<<<<<<<<<<<
 *             raise HypergraphConstructionException(
 *                 "Must constuct graph in 'with' block.")
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->started); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":218
 * 
 *         if not self.started:
 *             raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                 "Must constuct graph in 'with' block.")
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphConstructionException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":224
 *         cdef vector[const CHypernode *] tail_node_ptrs
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:             # <<<<<<<<<<<<<<
 *             nodeptr = self.thisptr.add_terminal_node()
 *         else:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_edges, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":225
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:
 *             nodeptr = self.thisptr.add_terminal_node()             # <<<<<<<<<<<<<<
 *         else:
 *             nodeptr = self.thisptr.start_node()
 */
    __pyx_v_nodeptr = __pyx_v_self->thisptr->add_terminal_node();
    goto __pyx_L4;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":227
 *             nodeptr = self.thisptr.add_terminal_node()
 *         else:
 *             nodeptr = self.thisptr.start_node()             # <<<<<<<<<<<<<<
 *             for edge_cons in edges:
 *                 try:
 */
    __pyx_v_nodeptr = __pyx_v_self->thisptr->start_node();

    /* "pydecode/potentials.pyx":228
 *         else:
 *             nodeptr = self.thisptr.start_node()
 *             for edge_cons in edges:             # <<<<<<<<<<<<<<
 *                 try:
 *                     tail_nodes, t = edge_cons
 */
    if (PyList_CheckExact(__pyx_v_edges) || PyTuple_CheckExact(__pyx_v_edges)) {
      __pyx_t_3 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_edge_cons, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pydecode/potentials.pyx":229
 *             nodeptr = self.thisptr.start_node()
 *             for edge_cons in edges:
 *                 try:             # <<<<<<<<<<<<<<
 *                     tail_nodes, t = edge_cons
 *                 except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "pydecode/potentials.pyx":230
 *             for edge_cons in edges:
 *                 try:
 *                     tail_nodes, t = edge_cons             # <<<<<<<<<<<<<<
 *                 except:
 *                     raise HypergraphConstructionException(
 */
          if ((likely(PyTuple_CheckExact(__pyx_v_edge_cons))) || (PyList_CheckExact(__pyx_v_edge_cons))) {
            PyObject* sequence = __pyx_v_edge_cons;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_10);
            #else
            __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_v_edge_cons); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
            index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_4)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __pyx_L16_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_tail_nodes, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_10);
          __pyx_t_10 = 0;
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "pydecode/potentials.pyx":231
 *                 try:
 *                     tail_nodes, t = edge_cons
 *                 except:             # <<<<<<<<<<<<<<
 *                     raise HypergraphConstructionException(
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 */
        /*except:*/ {
          __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_4, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_11);

          /* "pydecode/potentials.pyx":232
 *                     tail_nodes, t = edge_cons
 *                 except:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))
 */
          __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphConstructionException); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_13);

          /* "pydecode/potentials.pyx":234
 *                     raise HypergraphConstructionException(
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))             # <<<<<<<<<<<<<<
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(
 */
          __pyx_t_14 = __Pyx_PyString_Format(__pyx_kp_s_Received_s, __pyx_v_edge_cons); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = PyNumber_Add(__pyx_kp_s_Edges_must_be_pairs_of_the_form, __pyx_t_14); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "pydecode/potentials.pyx":232
 *                     tail_nodes, t = edge_cons
 *                 except:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))
 */
          __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_15);
          __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_14, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_Raise(__pyx_t_15, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }

      /* "pydecode/potentials.pyx":235
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:             # <<<<<<<<<<<<<<
 *                     raise HypergraphConstructionException(
 *                         "An edge must have at least one tail node.")
 */
      __pyx_t_16 = PyObject_Length(__pyx_v_tail_nodes); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = ((__pyx_t_16 == 0) != 0);
      if (__pyx_t_2) {

        /* "pydecode/potentials.pyx":236
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "An edge must have at least one tail node.")
 * 
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphConstructionException); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "pydecode/potentials.pyx":239
 *                         "An edge must have at least one tail node.")
 * 
 *                 tail_node_ptrs.clear()             # <<<<<<<<<<<<<<
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Vertex> tail_node).nodeptr)
 */
      __pyx_v_tail_node_ptrs.clear();

      /* "pydecode/potentials.pyx":240
 * 
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:             # <<<<<<<<<<<<<<
 *                     tail_node_ptrs.push_back((<Vertex> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 */
      if (PyList_CheckExact(__pyx_v_tail_nodes) || PyTuple_CheckExact(__pyx_v_tail_nodes)) {
        __pyx_t_4 = __pyx_v_tail_nodes; __Pyx_INCREF(__pyx_t_4); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_16 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tail_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_17 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_17 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_11 = __pyx_t_17(__pyx_t_4);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_tail_node, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "pydecode/potentials.pyx":241
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Vertex> tail_node).nodeptr)             # <<<<<<<<<<<<<<
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 */
        __pyx_v_tail_node_ptrs.push_back(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_tail_node)->nodeptr);
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pydecode/potentials.pyx":242
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Vertex> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)             # <<<<<<<<<<<<<<
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()
 */
      try {
        __pyx_t_18 = __pyx_v_self->thisptr->add_edge(__pyx_v_tail_node_ptrs);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_edgeptr = __pyx_t_18;

      /* "pydecode/potentials.pyx":243
 *                     tail_node_ptrs.push_back((<Vertex> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))             # <<<<<<<<<<<<<<
 *             self.thisptr.end_node()
 *         cdef Vertex node = Vertex().init(nodeptr, self.graph)
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = ((PyObject *)__pyx_v_self->graph);
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Edge *)((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4), __pyx_v_edgeptr, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_11))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      __pyx_t_10 = 0;
      __pyx_t_19 = __Pyx_PyObject_Append(__pyx_v_self->edge_labels, __pyx_t_11); if (unlikely(__pyx_t_19 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":244
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()             # <<<<<<<<<<<<<<
 *         cdef Vertex node = Vertex().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))
 */
    __pyx_v_self->thisptr->end_node();
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":245
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()
 *         cdef Vertex node = Vertex().init(nodeptr, self.graph)             # <<<<<<<<<<<<<<
 *         self.node_labels.append((node, label))
 *         return node
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_11);
  __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_3), __pyx_v_nodeptr, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_11))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_node = ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "pydecode/potentials.pyx":246
 *             self.thisptr.end_node()
 *         cdef Vertex node = Vertex().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_INCREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  __pyx_t_19 = __Pyx_PyObject_Append(__pyx_v_self->node_labels, __pyx_t_10); if (unlikely(__pyx_t_19 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "pydecode/potentials.pyx":247
 *         cdef Vertex node = Vertex().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))
 *         return node             # <<<<<<<<<<<<<<
 * 
 * cdef class Vertex:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":196
 *                                        final_edge_labels)
 * 
 *     def add_node(self, edges=[], label=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add a node to the hypergraph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pydecode.potentials.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge_cons);
  __Pyx_XDECREF(__pyx_v_tail_nodes);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_tail_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":278
 *     """
 * 
 *     cdef Vertex init(self, const CHypernode *nodeptr,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr
 */

static struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_f_8pydecode_10potentials_6Vertex_init(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self, Hypernode const *__pyx_v_nodeptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":280
 *     cdef Vertex init(self, const CHypernode *nodeptr,
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->nodeptr = __pyx_v_nodeptr;

  /* "pydecode/potentials.pyx":281
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":282
 *         self.nodeptr = nodeptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":278
 *     """
 * 
 *     cdef Vertex init(self, const CHypernode *nodeptr,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":284
 *         return self
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_6Vertex_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_6Vertex_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_6Vertex___dealloc__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_6Vertex___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":287
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_10potentials_6Vertex_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_10potentials_6Vertex_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_2__hash__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pydecode_10potentials_6Vertex_2__hash__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/potentials.pyx":288
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":287
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":290
 *         return self.id
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "NODE:%d" % (self.nodeptr.id())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_4__repr__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_4__repr__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pydecode/potentials.pyx":291
 * 
 *     def __repr__(self):
 *         return "NODE:%d" % (self.nodeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_NODE_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":290
 *         return self.id
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "NODE:%d" % (self.nodeptr.id())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":294
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_2id___get__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_2id___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":295
 *     property id:
 *         def __get__(self):
 *             assert self.nodeptr.id() != -1, "Bad node id."             # <<<<<<<<<<<<<<
 *             return self.nodeptr.id()
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->nodeptr->id() != -1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Bad_node_id);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":296
 *         def __get__(self):
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()             # <<<<<<<<<<<<<<
 * 
 *     property subedges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":294
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":299
 * 
 *     property subedges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_edges(self.nodeptr.edges(), self.graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_8subedges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_8subedges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_8subedges___get__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_8subedges___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":300
 *     property subedges:
 *         def __get__(self):
 *             return convert_edges(self.nodeptr.edges(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10potentials_convert_edges(__pyx_v_self->nodeptr->edges(), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":299
 * 
 *     property subedges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_edges(self.nodeptr.edges(), self.graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.subedges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":303
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.subedges
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_5edges___get__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":304
 *     property edges:
 *         def __get__(self):
 *             return self.subedges             # <<<<<<<<<<<<<<
 * 
 *     property is_terminal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_subedges); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":303
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.subedges
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":307
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.nodeptr.edges().size() == 0)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_11is_terminal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_11is_terminal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_11is_terminal___get__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_11is_terminal___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":308
 *     property is_terminal:
 *         def __get__(self):
 *             return (self.nodeptr.edges().size() == 0)             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->edges().size() == 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":307
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.nodeptr.edges().size() == 0)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.is_terminal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":311
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_5label___get__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_5label___get__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":312
 *     property label:
 *         def __get__(self):
 *             return self.graph.labeling[self]             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->graph->labeling), ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":311
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":314
 *             return self.graph.labeling[self]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.nodeptr.id())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_6__str__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_6__str__(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/potentials.pyx":315
 * 
 *     def __str__(self):
 *         return str(self.nodeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":314
 *             return self.graph.labeling[self]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.nodeptr.id())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Vertex.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":317
 *         return str(self.nodeptr.id())
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_6Vertex_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_6Vertex_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_8__cinit__(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_6Vertex_8__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":321
 *         pass
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.nodeptr.id() == -1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_11_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Vertex_10_removed[] = "Vertex._removed(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_6Vertex_11_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Vertex_10_removed(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Vertex_10_removed(struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removed", 0);

  /* "pydecode/potentials.pyx":322
 * 
 *     def _removed(self):
 *         return (self.nodeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef class Node(Vertex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":321
 *         pass
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.nodeptr.id() == -1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Vertex._removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":355
 *     """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge___cinit__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":359
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_10potentials_4Edge_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_10potentials_4Edge_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_2__hash__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_8pydecode_10potentials_4Edge_2__hash__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/potentials.pyx":360
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":359
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Edge.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":362
 *         return self.id
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_4Edge_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_4Edge_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_4Edge_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_4Edge_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":365
 *         pass
 * 
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.edgeptr = ptr
 *         self.graph = graph
 */

static struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_f_8pydecode_10potentials_4Edge_init(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self, Hyperedge const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":366
 * 
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):
 *         self.edgeptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->edgeptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":367
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):
 *         self.edgeptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":368
 *         self.edgeptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":365
 *         pass
 * 
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.edgeptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":370
 *         return self
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "EDGE:%d" % (self.edgeptr.id())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_6__repr__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_6__repr__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pydecode/potentials.pyx":371
 * 
 *     def __repr__(self):
 *         return "EDGE:%d" % (self.edgeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     property tail:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->edgeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_EDGE_d, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":370
 *         return self
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "EDGE:%d" % (self.edgeptr.id())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Edge.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":374
 * 
 *     property tail:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_nodes(self.edgeptr.tail_nodes(), self.graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_4tail_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_4tail_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_4tail___get__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_4tail___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":375
 *     property tail:
 *         def __get__(self):
 *             return convert_nodes(self.edgeptr.tail_nodes(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property head:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10potentials_convert_nodes(__pyx_v_self->edgeptr->tail_nodes(), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":374
 * 
 *     property tail:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_nodes(self.edgeptr.tail_nodes(), self.graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Edge.tail.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":378
 * 
 *     property head:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Vertex().init(self.edgeptr.head_node(), self.graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_4head___get__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_4head___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":379
 *     property head:
 *         def __get__(self):
 *             return Vertex().init(self.edgeptr.head_node(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_1), __pyx_v_self->edgeptr->head_node(), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":378
 * 
 *     property head:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Vertex().init(self.edgeptr.head_node(), self.graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Edge.head.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":382
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_5label___get__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_5label___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":383
 *     property label:
 *         def __get__(self):
 *             return self.graph.labeling[self]             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->graph->labeling), ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":382
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Edge.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":386
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_2id___get__(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_2id___get__(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":387
 *     property id:
 *         def __get__(self):
 *             assert self.edgeptr.id() != -1, "Bad edge id."             # <<<<<<<<<<<<<<
 *             return self.edgeptr.id()
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->edgeptr->id() != -1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Bad_edge_id);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":388
 *         def __get__(self):
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()             # <<<<<<<<<<<<<<
 * 
 *     def _removed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->edgeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":386
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Edge.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":390
 *             return self.edgeptr.id()
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.edgeptr.id() == -1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_9_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Edge_8_removed[] = "Edge._removed(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_4Edge_9_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Edge_8_removed(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Edge_8_removed(struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removed", 0);

  /* "pydecode/potentials.pyx":391
 * 
 *     def _removed(self):
 *         return (self.edgeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->edgeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":390
 *             return self.edgeptr.id()
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.edgeptr.id() == -1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Edge._removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":393
 *         return (self.edgeptr.id() == -1)
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Edge().init(edge, graph) for edge in edges]
 */

static PyObject *__pyx_f_8pydecode_10potentials_convert_edges(std::vector<Hyperedge const *> __pyx_v_edges, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  Hyperedge const *__pyx_v_edge;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hyperedge const *>::iterator __pyx_t_2;
  Hyperedge const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_edges", 0);

  /* "pydecode/potentials.pyx":395
 * cdef convert_edges(vector[const CHyperedge *] edges,
 *                    Hypergraph graph):
 *     return [Edge().init(edge, graph) for edge in edges]             # <<<<<<<<<<<<<<
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_edges.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_edges.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_edge = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Edge *)((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_4), __pyx_v_edge, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":393
 *         return (self.edgeptr.id() == -1)
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Edge().init(edge, graph) for edge in edges]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.convert_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":397
 *     return [Edge().init(edge, graph) for edge in edges]
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Vertex().init(node, graph) for node in nodes]
 */

static PyObject *__pyx_f_8pydecode_10potentials_convert_nodes(std::vector<Hypernode const *> __pyx_v_nodes, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  Hypernode const *__pyx_v_node;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hypernode const *>::iterator __pyx_t_2;
  Hypernode const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_nodes", 0);

  /* "pydecode/potentials.pyx":399
 * cdef convert_nodes(vector[const CHypernode *] nodes,
 *                    Hypergraph graph):
 *     return [Vertex().init(node, graph) for node in nodes]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_nodes.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_nodes.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_node = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Vertex *)((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_t_4), __pyx_v_node, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":397
 *     return [Edge().init(edge, graph) for edge in edges]
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Vertex().init(node, graph) for node in nodes]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.convert_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":428
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_4Path_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_4Path_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_4Path___dealloc__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_4Path___dealloc__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":429
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":428
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":431
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_4Path_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_4Path_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_edges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_edges,0};
    PyObject* values[2] = {0,0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    values[1] = __pyx_k__7;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edges);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_edges = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Path.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self), __pyx_v_graph, __pyx_v_edges);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":437
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)             # <<<<<<<<<<<<<<
 *         if graph and edges:
 *             for edge in edges:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_9__cinit___lambda1(PyObject *__pyx_self, PyObject *__pyx_v_e); /*proto*/
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Path_9__cinit___lambda1 = {__Pyx_NAMESTR("lambda1"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Path_9__cinit___lambda1, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_9__cinit___lambda1(PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Path.__cinit__.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":431
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

static int __pyx_pf_8pydecode_10potentials_4Path_2__cinit__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_edges) {
  std::vector<Hyperedge const *> __pyx_v_cedges;
  PyObject *__pyx_v_edge = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Hyperpath *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":436
 * 
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":437
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)             # <<<<<<<<<<<<<<
 *         if graph and edges:
 *             for edge in edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_edges, __pyx_n_s_sort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Path_9__cinit___lambda1, 0, __pyx_n_s_cinit___locals_lambda, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":438
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:             # <<<<<<<<<<<<<<
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_graph)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_edges); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "pydecode/potentials.pyx":439
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:
 *             for edge in edges:             # <<<<<<<<<<<<<<
 *                 cedges.push_back((<Edge>edge).edgeptr)
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 */
    if (PyList_CheckExact(__pyx_v_edges) || PyTuple_CheckExact(__pyx_v_edges)) {
      __pyx_t_3 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_3)) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_3)) {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pydecode/potentials.pyx":440
 *         if graph and edges:
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)             # <<<<<<<<<<<<<<
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 * 
 */
      __pyx_v_cedges.push_back(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge)->edgeptr);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":441
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)             # <<<<<<<<<<<<<<
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 */
    try {
      __pyx_t_9 = new Hyperpath(__pyx_v_graph->thisptr, __pyx_v_cedges);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->thisptr = __pyx_t_9;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":431
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Path.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":443
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = path
 *         self.graph = graph
 */

static struct __pyx_obj_8pydecode_10potentials_Path *__pyx_f_8pydecode_10potentials_4Path_init(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, Hyperpath const *__pyx_v_path, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10potentials_Path *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":444
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 *         self.thisptr = path             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_path;

  /* "pydecode/potentials.pyx":445
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 *         self.thisptr = path
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":446
 *         self.thisptr = path
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":443
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = path
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":448
 *         return self
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_4__str__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_4__str__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/potentials.pyx":449
 * 
 *     def __str__(self):
 *         return ":".join([str(edge) for edge in self.edges])             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, Edge edge):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_edge);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_edge);
    __Pyx_GIVEREF(__pyx_v_edge);
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__8, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":448
 *         return self
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pydecode.potentials.Path.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":451
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 *     def __contains__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         """
 *         Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_4Path_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Path_6__contains__[] = "\n        Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8pydecode_10potentials_4Path_6__contains__;
#endif
static int __pyx_pw_8pydecode_10potentials_4Path_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 1, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_6__contains__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_4Path_6__contains__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "pydecode/potentials.pyx":455
 *         Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?
 *         """
 *         return self.thisptr.has_edge(edge.edgeptr)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_r = __pyx_v_self->thisptr->has_edge(__pyx_v_edge->edgeptr);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":451
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 *     def __contains__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         """
 *         Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":457
 *         return self.thisptr.has_edge(edge.edgeptr)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_8__iter__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_8__iter__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pydecode/potentials.pyx":458
 * 
 *     def __iter__(self):
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))             # <<<<<<<<<<<<<<
 * 
 *     cdef public equal(Path self, Path other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10potentials_convert_edges(__pyx_v_self->thisptr->edges(), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":457
 *         return self.thisptr.has_edge(edge.edgeptr)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Path.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":460
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 *     cdef public equal(Path self, Path other):             # <<<<<<<<<<<<<<
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 */

PyObject *__pyx_f_8pydecode_10potentials_4Path_equal(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equal", 0);

  /* "pydecode/potentials.pyx":461
 * 
 *     cdef public equal(Path self, Path other):
 *         return self.thisptr.equal(deref(other.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Path self, Path other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->equal((*__pyx_v_other->thisptr))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":460
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 *     cdef public equal(Path self, Path other):             # <<<<<<<<<<<<<<
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Path.equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":463
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 *     def __richcmp__(Path self, Path other, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return self.equal(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Path.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_Path, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_Path, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_10__richcmp__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_10__richcmp__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pydecode/potentials.pyx":464
 * 
 *     def __richcmp__(Path self, Path other, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return self.equal(other)
 *         if op == 3:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_op, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":465
 *     def __richcmp__(Path self, Path other, op):
 *         if op == 2:
 *             return self.equal(other)             # <<<<<<<<<<<<<<
 *         if op == 3:
 *             return not self.equal(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_Path *)__pyx_v_self->__pyx_vtab)->equal(__pyx_v_self, __pyx_v_other); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":466
 *         if op == 2:
 *             return self.equal(other)
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_op, __pyx_int_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":467
 *             return self.equal(other)
 *         if op == 3:
 *             return not self.equal(other)             # <<<<<<<<<<<<<<
 *         raise Exception("No inequality on paths.")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_Path *)__pyx_v_self->__pyx_vtab)->equal(__pyx_v_self, __pyx_v_other); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":468
 *         if op == 3:
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":463
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 *     def __richcmp__(Path self, Path other, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return self.equal(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Path.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":471
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self.graph).init(self.thisptr.edges())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_5edges___get__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_5edges___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":472
 *     property edges:
 *         def __get__(self):
 *             return _LazyEdges(self.graph).init(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     property vertices:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LazyEdges)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges *)((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)__pyx_t_2), __pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":471
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self.graph).init(self.thisptr.edges())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Path.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":475
 * 
 *     property vertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self.graph).init(self.thisptr.nodes())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_8vertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_8vertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_8vertices___get__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_8vertices___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":476
 *     property vertices:
 *         def __get__(self):
 *             return _LazyVertices(self.graph).init(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 * 
 *     property nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LazyVertices)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices *)((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)__pyx_t_2), __pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":475
 * 
 *     property vertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyVertices(self.graph).init(self.thisptr.nodes())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Path.vertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":479
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.vertices
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_4Path_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Path_5nodes___get__(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Path_5nodes___get__(struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":480
 *     property nodes:
 *         def __get__(self):
 *             return self.vertices             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_vertices); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":479
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.vertices
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Path.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":484
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25HypergraphAccessException___init__[] = "HypergraphAccessException.__init__(self, value)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_25HypergraphAccessException_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25HypergraphAccessException___init__)};
static PyObject *__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.HypergraphAccessException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25HypergraphAccessException___init__(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25HypergraphAccessException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":485
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):
 *         self.value = value             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_value, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":484
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.potentials.HypergraphAccessException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":487
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25HypergraphAccessException_2__str__[] = "HypergraphAccessException.__str__(self)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_25HypergraphAccessException_3__str__ = {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_3__str__, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25HypergraphAccessException_2__str__)};
static PyObject *__pyx_pw_8pydecode_10potentials_25HypergraphAccessException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25HypergraphAccessException_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25HypergraphAccessException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/potentials.pyx":488
 * 
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":487
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphAccessException.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":492
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_31HypergraphConstructionException___init__[] = "HypergraphConstructionException.__init__(self, value)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_31HypergraphConstructionException_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_31HypergraphConstructionException___init__)};
static PyObject *__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.HypergraphConstructionException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_31HypergraphConstructionException___init__(__pyx_self, __pyx_v_self, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_31HypergraphConstructionException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":493
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):
 *         self.value = value             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_value, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":492
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.potentials.HypergraphConstructionException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":495
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8pydecode_10potentials_31HypergraphConstructionException_2__str__[] = "HypergraphConstructionException.__str__(self)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_31HypergraphConstructionException_3__str__ = {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_3__str__, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_31HypergraphConstructionException_2__str__)};
static PyObject *__pyx_pw_8pydecode_10potentials_31HypergraphConstructionException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_31HypergraphConstructionException_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_31HypergraphConstructionException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/potentials.pyx":496
 * 
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":495
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphConstructionException.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":529
 *       Hypergraph in the range of the map :math:`({\cal V}', {\cal E})'`
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_13HypergraphMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_13HypergraphMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap___cinit__(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_13HypergraphMap___cinit__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":530
 *     """
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef HypergraphMap init(self,
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":529
 *       Hypergraph in the range of the map :math:`({\cal V}', {\cal E})'`
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":532
 *         self.thisptr = NULL
 * 
 *     cdef HypergraphMap init(self,             # <<<<<<<<<<<<<<
 *                             const CHypergraphMap *thisptr,
 *                             Hypergraph domain_graph,
 */

static struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_f_8pydecode_10potentials_13HypergraphMap_init(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self, HypergraphMap const *__pyx_v_thisptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_domain_graph, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_range_graph) {
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":537
 *                             Hypergraph range_graph):
 * 
 *         self.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0
 */
  __pyx_v_self->thisptr = __pyx_v_thisptr;

  /* "pydecode/potentials.pyx":538
 * 
 *         self.thisptr = thisptr
 *         assert thisptr.domain_graph().id() >= 0             # <<<<<<<<<<<<<<
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_thisptr->domain_graph()->id() >= 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":539
 *         self.thisptr = thisptr
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0             # <<<<<<<<<<<<<<
 *         if range_graph is None:
 *             self.domain_graph = domain_graph
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_thisptr->range_graph()->id() >= 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":540
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:             # <<<<<<<<<<<<<<
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_range_graph) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":541
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:
 *             self.domain_graph = domain_graph             # <<<<<<<<<<<<<<
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_domain_graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_graph));
    __Pyx_GOTREF(__pyx_v_self->domain_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_graph));
    __pyx_v_self->domain_graph = __pyx_v_domain_graph;

    /* "pydecode/potentials.pyx":542
 *         if range_graph is None:
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \             # <<<<<<<<<<<<<<
 *                 self.thisptr.domain_graph().id()
 *             self.range_graph = self._build_range_hypergraph()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {

      /* "pydecode/potentials.pyx":543
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()             # <<<<<<<<<<<<<<
 *             self.range_graph = self._build_range_hypergraph()
 *         else:
 */
      if (unlikely(!((__pyx_v_self->domain_graph->thisptr->id() == __pyx_v_self->thisptr->domain_graph()->id()) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "pydecode/potentials.pyx":544
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()
 *             self.range_graph = self._build_range_hypergraph()             # <<<<<<<<<<<<<<
 *         else:
 *             self.range_graph = range_graph
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build_range_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8pydecode_10potentials_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->range_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->range_graph));
    __pyx_v_self->range_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":546
 *             self.range_graph = self._build_range_hypergraph()
 *         else:
 *             self.range_graph = range_graph             # <<<<<<<<<<<<<<
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_range_graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_range_graph));
    __Pyx_GOTREF(__pyx_v_self->range_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->range_graph));
    __pyx_v_self->range_graph = __pyx_v_range_graph;

    /* "pydecode/potentials.pyx":547
 *         else:
 *             self.range_graph = range_graph
 *             assert self.range_graph.thisptr.id() == \             # <<<<<<<<<<<<<<
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {

      /* "pydecode/potentials.pyx":548
 *             self.range_graph = range_graph
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()             # <<<<<<<<<<<<<<
 *             self.domain_graph = self._build_domain_hypergraph()
 *         return self
 */
      if (unlikely(!((__pyx_v_self->range_graph->thisptr->id() == __pyx_v_self->thisptr->range_graph()->id()) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "pydecode/potentials.pyx":549
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_build_domain_hypergraph); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8pydecode_10potentials_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->domain_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_graph));
    __pyx_v_self->domain_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":550
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def compose(self, HypergraphMap other):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":532
 *         self.thisptr = NULL
 * 
 *     cdef HypergraphMap init(self,             # <<<<<<<<<<<<<<
 *                             const CHypergraphMap *thisptr,
 *                             Hypergraph domain_graph,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":552
 *         return self
 * 
 *     def compose(self, HypergraphMap other):             # <<<<<<<<<<<<<<
 *         """
 *         Compose two hypergraph maps.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_3compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13HypergraphMap_2compose[] = "HypergraphMap.compose(self, HypergraphMap other)\n\n        Compose two hypergraph maps.\n\n\n\n        Parameters\n        -----------\n        other : :py:class:`HypergraphMap`\n          A map of type :math:`m' : {\\cal V}' \\cup {\\cal E}' \\mapsto {\\cal V}'' \\cup {\\cal E}''`\n\n        Returns\n        ---------\n        composed_map : :py:class:`HypergraphMap`\n          A map of type :math:`m'' : {\\cal V} \\cup {\\cal E} \\mapsto {\\cal V}'' \\cup {\\cal E}''`\n\n\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_3compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_2compose(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_2compose(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_other) {
  HypergraphMap *__pyx_v_newptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compose", 0);

  /* "pydecode/potentials.pyx":571
 *         """
 *         cdef CHypergraphMap *newptr = \
 *             self.thisptr.compose(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,
 */
  __pyx_v_newptr = __pyx_v_self->thisptr->compose((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":572
 *         cdef CHypergraphMap *newptr = \
 *             self.thisptr.compose(deref(other.thisptr))
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     other.domain_graph,
 *                                     self.range_graph)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":573
 *             self.thisptr.compose(deref(other.thisptr))
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,             # <<<<<<<<<<<<<<
 *                                     self.range_graph)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_other->domain_graph);
  __Pyx_INCREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":574
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,
 *                                     self.range_graph)             # <<<<<<<<<<<<<<
 * 
 *     def invert(self):
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->range_graph);
  __Pyx_INCREF(__pyx_t_3);

  /* "pydecode/potentials.pyx":572
 *         cdef CHypergraphMap *newptr = \
 *             self.thisptr.compose(deref(other.thisptr))
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     other.domain_graph,
 *                                     self.range_graph)
 */
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *)((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1), __pyx_v_newptr, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":552
 *         return self
 * 
 *     def compose(self, HypergraphMap other):             # <<<<<<<<<<<<<<
 *         """
 *         Compose two hypergraph maps.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap.compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":576
 *                                     self.range_graph)
 * 
 *     def invert(self):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_5invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13HypergraphMap_4invert[] = "HypergraphMap.invert(self)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_5invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_4invert(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_4invert(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  HypergraphMap *__pyx_v_newptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("invert", 0);

  /* "pydecode/potentials.pyx":580
 *         TODO: fill in
 *         """
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()             # <<<<<<<<<<<<<<
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,
 */
  __pyx_v_newptr = __pyx_v_self->thisptr->invert();

  /* "pydecode/potentials.pyx":581
 *         """
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     self.range_graph,
 *                                     self.domain_graph)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":582
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,             # <<<<<<<<<<<<<<
 *                                     self.domain_graph)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->range_graph);
  __Pyx_INCREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":583
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,
 *                                     self.domain_graph)             # <<<<<<<<<<<<<<
 * 
 *     property domain_hypergraph:
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->domain_graph);
  __Pyx_INCREF(__pyx_t_3);

  /* "pydecode/potentials.pyx":581
 *         """
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     self.range_graph,
 *                                     self.domain_graph)
 */
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *)((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1), __pyx_v_newptr, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":576
 *                                     self.range_graph)
 * 
 *     def invert(self):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap.invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":586
 * 
 *     property domain_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.domain_graph
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph___get__(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph___get__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":587
 *     property domain_hypergraph:
 *         def __get__(self):
 *             return self.domain_graph             # <<<<<<<<<<<<<<
 * 
 *     property range_hypergraph:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->domain_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->domain_graph);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":586
 * 
 *     property domain_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.domain_graph
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":590
 * 
 *     property range_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.range_graph
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_16range_hypergraph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_16range_hypergraph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_16range_hypergraph___get__(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_16range_hypergraph___get__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":591
 *     property range_hypergraph:
 *         def __get__(self):
 *             return self.range_graph             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->range_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->range_graph);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":590
 * 
 *     property range_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.range_graph
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":593
 *             return self.range_graph
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_13HypergraphMap_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_13HypergraphMap_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_13HypergraphMap_6__dealloc__(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_13HypergraphMap_6__dealloc__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":594
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":595
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_self->thisptr;

    /* "pydecode/potentials.pyx":596
 *         if self.thisptr is not NULL:
 *             del self.thisptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
    __pyx_v_self->thisptr = NULL;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":593
 *             return self.range_graph
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":598
 *             self.thisptr = NULL
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         cdef const CHyperedge *edge
 *         cdef const CHypernode *node
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_8__getitem__(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_8__getitem__(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self, PyObject *__pyx_v_obj) {
  Hyperedge const *__pyx_v_edge;
  Hypernode const *__pyx_v_node;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":601
 *         cdef const CHyperedge *edge
 *         cdef const CHypernode *node
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             edge = self.thisptr.map((<Edge>obj).edgeptr)
 *             # assert edge.id() >= 0
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":602
 *         cdef const CHypernode *node
 *         if isinstance(obj, Edge):
 *             edge = self.thisptr.map((<Edge>obj).edgeptr)             # <<<<<<<<<<<<<<
 *             # assert edge.id() >= 0
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 */
    __pyx_v_edge = __pyx_v_self->thisptr->map(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr);

    /* "pydecode/potentials.pyx":605
 *             # assert edge.id() >= 0
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 *             if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                 return self.range_graph.edges[edge.id()]
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_edge != NULL) != 0);
    if (__pyx_t_2) {
      __pyx_t_1 = ((__pyx_v_edge->id() >= 0) != 0);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_3 = __pyx_t_2;
    }
    if (__pyx_t_3) {

      /* "pydecode/potentials.pyx":606
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 *             if edge != NULL and edge.id() >= 0:
 *                 return self.range_graph.edges[edge.id()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->range_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_v_edge->id();
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pydecode/potentials.pyx":608
 *                 return self.range_graph.edges[edge.id()]
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Vertex):
 *             node = self.thisptr.map((<Vertex>obj).nodeptr)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
  }

  /* "pydecode/potentials.pyx":609
 *             else:
 *                 return None
 *         if isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map((<Vertex>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":610
 *                 return None
 *         if isinstance(obj, Vertex):
 *             node = self.thisptr.map((<Vertex>obj).nodeptr)             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 return self.range_graph.nodes[node.id()]
 */
    __pyx_v_node = __pyx_v_self->thisptr->map(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr);

    /* "pydecode/potentials.pyx":611
 *         if isinstance(obj, Vertex):
 *             node = self.thisptr.map((<Vertex>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 return self.range_graph.nodes[node.id()]
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_2) {
      __pyx_t_3 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_1 = __pyx_t_3;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "pydecode/potentials.pyx":612
 *             node = self.thisptr.map((<Vertex>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:
 *                 return self.range_graph.nodes[node.id()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->range_graph), __pyx_n_s_nodes); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __pyx_v_node->id();
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_6, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "pydecode/potentials.pyx":614
 *                 return self.range_graph.nodes[node.id()]
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(obj, Hypergraph):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
  }

  /* "pydecode/potentials.pyx":616
 *                 return None
 * 
 *         if isinstance(obj, Hypergraph):             # <<<<<<<<<<<<<<
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()
 *             return self.range_hypergraph
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Hypergraph)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":617
 * 
 *         if isinstance(obj, Hypergraph):
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()             # <<<<<<<<<<<<<<
 *             return self.range_hypergraph
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_thisptr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_domain_hypergraph); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_thisptr); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetNone(PyExc_AssertionError);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
    }
    #endif

    /* "pydecode/potentials.pyx":618
 *         if isinstance(obj, Hypergraph):
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()
 *             return self.range_hypergraph             # <<<<<<<<<<<<<<
 * 
 *         return obj.project(self.range_graph, self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_range_hypergraph); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":620
 *             return self.range_hypergraph
 * 
 *         return obj.project(self.range_graph, self)             # <<<<<<<<<<<<<<
 * 
 *     def _build_range_hypergraph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_project); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->range_graph));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self->range_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->range_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":598
 *             self.thisptr = NULL
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         cdef const CHyperedge *edge
 *         cdef const CHypernode *node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":622
 *         return obj.project(self.range_graph, self)
 * 
 *     def _build_range_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraphMap *projection = self.thisptr
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_11_build_range_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13HypergraphMap_10_build_range_hypergraph[] = "HypergraphMap._build_range_hypergraph(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_11_build_range_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_range_hypergraph (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_10_build_range_hypergraph(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_10_build_range_hypergraph(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  HypergraphMap const *__pyx_v_projection;
  PyObject *__pyx_v_node_labels = NULL;
  PyObject *__pyx_v_edge_labels = NULL;
  std::vector<Hypernode const *> __pyx_v_old_nodes;
  std::vector<Hyperedge const *> __pyx_v_old_edges;
  Hypernode const *__pyx_v_node;
  Hyperedge const *__pyx_v_edge;
  size_t __pyx_v_i;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_h = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphMap const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_range_hypergraph", 0);

  /* "pydecode/potentials.pyx":623
 * 
 *     def _build_range_hypergraph(self):
 *         cdef const CHypergraphMap *projection = self.thisptr             # <<<<<<<<<<<<<<
 * 
 *         # Map nodes.
 */
  __pyx_t_1 = __pyx_v_self->thisptr;
  __pyx_v_projection = __pyx_t_1;

  /* "pydecode/potentials.pyx":626
 * 
 *         # Map nodes.
 *         node_labels = [None] * projection.range_graph().nodes().size()             # <<<<<<<<<<<<<<
 *         edge_labels = [None] * projection.range_graph().edges().size()
 *         cdef vector[const CHypernode*] old_nodes = \
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_projection->range_graph()->nodes().size()<0) ? 0:__pyx_v_projection->range_graph()->nodes().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_projection->range_graph()->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_node_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":627
 *         # Map nodes.
 *         node_labels = [None] * projection.range_graph().nodes().size()
 *         edge_labels = [None] * projection.range_graph().edges().size()             # <<<<<<<<<<<<<<
 *         cdef vector[const CHypernode*] old_nodes = \
 *             projection.domain_graph().nodes()
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_projection->range_graph()->edges().size()<0) ? 0:__pyx_v_projection->range_graph()->edges().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_projection->range_graph()->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_edge_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":629
 *         edge_labels = [None] * projection.range_graph().edges().size()
 *         cdef vector[const CHypernode*] old_nodes = \
 *             projection.domain_graph().nodes()             # <<<<<<<<<<<<<<
 *         cdef vector[const CHyperedge*] old_edges = \
 *             projection.domain_graph().edges()
 */
  __pyx_v_old_nodes = __pyx_v_projection->domain_graph()->nodes();

  /* "pydecode/potentials.pyx":631
 *             projection.domain_graph().nodes()
 *         cdef vector[const CHyperedge*] old_edges = \
 *             projection.domain_graph().edges()             # <<<<<<<<<<<<<<
 * 
 *         cdef const CHypernode *node
 */
  __pyx_v_old_edges = __pyx_v_projection->domain_graph()->edges();

  /* "pydecode/potentials.pyx":636
 *         cdef const CHyperedge *edge
 * 
 *         for i in range(old_nodes.size()):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_3 = __pyx_v_old_nodes.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pydecode/potentials.pyx":637
 * 
 *         for i in range(old_nodes.size()):
 *             node = self.thisptr.map(old_nodes[i])             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \
 */
    __pyx_v_node = __pyx_v_self->thisptr->map((__pyx_v_old_nodes[__pyx_v_i]));

    /* "pydecode/potentials.pyx":638
 *         for i in range(old_nodes.size()):
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 node_labels[node.id()] = \
 *                     self.domain_graph.labeling.node_labels[i]
 */
    __pyx_t_5 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_5) {
      __pyx_t_6 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_7 = __pyx_t_6;
    } else {
      __pyx_t_7 = __pyx_t_5;
    }
    if (__pyx_t_7) {

      /* "pydecode/potentials.pyx":640
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \
 *                     self.domain_graph.labeling.node_labels[i]             # <<<<<<<<<<<<<<
 * 
 *         if self.domain_graph.labeling.edge_labels:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->domain_graph->labeling->node_labels, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);

      /* "pydecode/potentials.pyx":639
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \             # <<<<<<<<<<<<<<
 *                     self.domain_graph.labeling.node_labels[i]
 * 
 */
      __pyx_t_8 = __pyx_v_node->id();
      if (unlikely(__Pyx_SetItemInt(__pyx_v_node_labels, __pyx_t_8, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "pydecode/potentials.pyx":642
 *                     self.domain_graph.labeling.node_labels[i]
 * 
 *         if self.domain_graph.labeling.edge_labels:             # <<<<<<<<<<<<<<
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_self->domain_graph->labeling->edge_labels); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_7) {

    /* "pydecode/potentials.pyx":643
 * 
 *         if self.domain_graph.labeling.edge_labels:
 *             for i in range(old_edges.size()):             # <<<<<<<<<<<<<<
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:
 */
    __pyx_t_3 = __pyx_v_old_edges.size();
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pydecode/potentials.pyx":644
 *         if self.domain_graph.labeling.edge_labels:
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])             # <<<<<<<<<<<<<<
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \
 */
      __pyx_v_edge = __pyx_v_self->thisptr->map((__pyx_v_old_edges[__pyx_v_i]));

      /* "pydecode/potentials.pyx":645
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                     edge_labels[edge.id()] = \
 *                         self.domain_graph.labeling.edge_labels[i]
 */
      __pyx_t_7 = ((__pyx_v_edge != NULL) != 0);
      if (__pyx_t_7) {
        __pyx_t_5 = ((__pyx_v_edge->id() >= 0) != 0);
        __pyx_t_6 = __pyx_t_5;
      } else {
        __pyx_t_6 = __pyx_t_7;
      }
      if (__pyx_t_6) {

        /* "pydecode/potentials.pyx":647
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \
 *                         self.domain_graph.labeling.edge_labels[i]             # <<<<<<<<<<<<<<
 * 
 *         cdef Hypergraph h = Hypergraph()
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->domain_graph->labeling->edge_labels, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_2);

        /* "pydecode/potentials.pyx":646
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \             # <<<<<<<<<<<<<<
 *                         self.domain_graph.labeling.edge_labels[i]
 * 
 */
        __pyx_t_8 = __pyx_v_edge->id();
        if (unlikely(__Pyx_SetItemInt(__pyx_v_edge_labels, __pyx_t_8, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pydecode/potentials.pyx":649
 *                         self.domain_graph.labeling.edge_labels[i]
 * 
 *         cdef Hypergraph h = Hypergraph()             # <<<<<<<<<<<<<<
 *         return h.init(projection.range_graph(),
 *                       Labeling(h, node_labels, edge_labels))
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Hypergraph)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_h = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":650
 * 
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(projection.range_graph(),             # <<<<<<<<<<<<<<
 *                       Labeling(h, node_labels, edge_labels))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pydecode/potentials.pyx":651
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(projection.range_graph(),
 *                       Labeling(h, node_labels, edge_labels))             # <<<<<<<<<<<<<<
 * 
 *     def _build_domain_hypergraph(self):
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_h));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_h));
  __Pyx_INCREF(__pyx_v_node_labels);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_node_labels);
  __Pyx_GIVEREF(__pyx_v_node_labels);
  __Pyx_INCREF(__pyx_v_edge_labels);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_edge_labels);
  __Pyx_GIVEREF(__pyx_v_edge_labels);
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Labeling)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":650
 * 
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(projection.range_graph(),             # <<<<<<<<<<<<<<
 *                       Labeling(h, node_labels, edge_labels))
 * 
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph *)__pyx_v_h->__pyx_vtab)->init(__pyx_v_h, __pyx_v_projection->range_graph(), ((struct __pyx_obj_8pydecode_10potentials_Labeling *)__pyx_t_9))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":622
 *         return obj.project(self.range_graph, self)
 * 
 *     def _build_range_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraphMap *projection = self.thisptr
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap._build_range_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_labels);
  __Pyx_XDECREF(__pyx_v_edge_labels);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":653
 *                       Labeling(h, node_labels, edge_labels))
 * 
 *     def _build_domain_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_13_build_domain_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13HypergraphMap_12_build_domain_hypergraph[] = "HypergraphMap._build_domain_hypergraph(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_13HypergraphMap_13_build_domain_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_domain_hypergraph (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13HypergraphMap_12_build_domain_hypergraph(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13HypergraphMap_12_build_domain_hypergraph(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_self) {
  Hypergraph const *__pyx_v_graph;
  PyObject *__pyx_v_node_labels = NULL;
  PyObject *__pyx_v_edge_labels = NULL;
  Hypernode const *__pyx_v_node;
  Hyperedge const *__pyx_v_edge;
  size_t __pyx_v_i;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_h = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_domain_hypergraph", 0);

  /* "pydecode/potentials.pyx":654
 * 
 *     def _build_domain_hypergraph(self):
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()             # <<<<<<<<<<<<<<
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()
 */
  __pyx_v_graph = __pyx_v_self->thisptr->domain_graph();

  /* "pydecode/potentials.pyx":655
 *     def _build_domain_hypergraph(self):
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0             # <<<<<<<<<<<<<<
 *         node_labels = [None] * graph.nodes().size()
 *         edge_labels = [None] * graph.edges().size()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_graph->id() >= 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "pydecode/potentials.pyx":656
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()             # <<<<<<<<<<<<<<
 *         edge_labels = [None] * graph.edges().size()
 *         cdef const CHypernode *node
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_graph->nodes().size()<0) ? 0:__pyx_v_graph->nodes().size())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_graph->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_node_labels = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":657
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()
 *         edge_labels = [None] * graph.edges().size()             # <<<<<<<<<<<<<<
 *         cdef const CHypernode *node
 *         cdef const CHyperedge *edge
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_graph->edges().size()<0) ? 0:__pyx_v_graph->edges().size())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_graph->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_edge_labels = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":661
 *         cdef const CHyperedge *edge
 * 
 *         for i in range(graph.nodes().size()):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_2 = __pyx_v_graph->nodes().size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pydecode/potentials.pyx":662
 * 
 *         for i in range(graph.nodes().size()):
 *             node = self.thisptr.map(graph.nodes()[i])             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \
 */
    __pyx_v_node = __pyx_v_self->thisptr->map((__pyx_v_graph->nodes()[__pyx_v_i]));

    /* "pydecode/potentials.pyx":663
 *         for i in range(graph.nodes().size()):
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 node_labels[i] = \
 *                     self.range_graph.labeling.node_labels[node.id()]
 */
    __pyx_t_4 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_4) {
      __pyx_t_5 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_4;
    }
    if (__pyx_t_6) {

      /* "pydecode/potentials.pyx":665
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \
 *                     self.range_graph.labeling.node_labels[node.id()]             # <<<<<<<<<<<<<<
 * 
 *         if self.range_graph.labeling.edge_labels:
 */
      __pyx_t_7 = __pyx_v_node->id();
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->range_graph->labeling->node_labels, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);

      /* "pydecode/potentials.pyx":664
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \             # <<<<<<<<<<<<<<
 *                     self.range_graph.labeling.node_labels[node.id()]
 * 
 */
      if (unlikely(__Pyx_SetItemInt(__pyx_v_node_labels, __pyx_v_i, __pyx_t_1, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "pydecode/potentials.pyx":667
 *                     self.range_graph.labeling.node_labels[node.id()]
 * 
 *         if self.range_graph.labeling.edge_labels:             # <<<<<<<<<<<<<<
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_self->range_graph->labeling->edge_labels); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "pydecode/potentials.pyx":668
 * 
 *         if self.range_graph.labeling.edge_labels:
 *             for i in range(graph.edges().size()):             # <<<<<<<<<<<<<<
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:
 */
    __pyx_t_2 = __pyx_v_graph->edges().size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pydecode/potentials.pyx":669
 *         if self.range_graph.labeling.edge_labels:
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])             # <<<<<<<<<<<<<<
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \
 */
      __pyx_v_edge = __pyx_v_self->thisptr->map((__pyx_v_graph->edges()[__pyx_v_i]));

      /* "pydecode/potentials.pyx":670
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                     edge_labels[i] = \
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 */
      __pyx_t_6 = ((__pyx_v_edge != NULL) != 0);
      if (__pyx_t_6) {
        __pyx_t_4 = ((__pyx_v_edge->id() >= 0) != 0);
        __pyx_t_5 = __pyx_t_4;
      } else {
        __pyx_t_5 = __pyx_t_6;
      }
      if (__pyx_t_5) {

        /* "pydecode/potentials.pyx":672
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \
 *                         self.range_graph.labeling.edge_labels[edge.id()]             # <<<<<<<<<<<<<<
 * 
 *         cdef Hypergraph h = Hypergraph()
 */
        __pyx_t_7 = __pyx_v_edge->id();
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->range_graph->labeling->edge_labels, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);

        /* "pydecode/potentials.pyx":671
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \             # <<<<<<<<<<<<<<
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 * 
 */
        if (unlikely(__Pyx_SetItemInt(__pyx_v_edge_labels, __pyx_v_i, __pyx_t_1, size_t, 0, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pydecode/potentials.pyx":674
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 * 
 *         cdef Hypergraph h = Hypergraph()             # <<<<<<<<<<<<<<
 *         return h.init(graph, Labeling(h, node_labels, edge_labels))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Hypergraph)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":675
 * 
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(graph, Labeling(h, node_labels, edge_labels))             # <<<<<<<<<<<<<<
 * 
 * #cython: embedsignature=True
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_h));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_h));
  __Pyx_INCREF(__pyx_v_node_labels);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_node_labels);
  __Pyx_GIVEREF(__pyx_v_node_labels);
  __Pyx_INCREF(__pyx_v_edge_labels);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_edge_labels);
  __Pyx_GIVEREF(__pyx_v_edge_labels);
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Labeling)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph *)__pyx_v_h->__pyx_vtab)->init(__pyx_v_h, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10potentials_Labeling *)__pyx_t_8))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":653
 *                       Labeling(h, node_labels, edge_labels))
 * 
 *     def _build_domain_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.potentials.HypergraphMap._build_domain_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_labels);
  __Pyx_XDECREF(__pyx_v_edge_labels);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":712
 *     """
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_1show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_show[] = "Potentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_1show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_show(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_show(struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":713
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":714
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":713
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__3, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":712
 *     """
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.Potentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":717
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":718
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     def times(self, Potentials other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":717
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":720
 *             return self.kind
 * 
 *     def times(self, Potentials other):             # <<<<<<<<<<<<<<
 *         r"""
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_3times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_2times[] = "Potentials.times(self, Potentials other)\n\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_3times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_2times(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_2times(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":725
 *         pass
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_5clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_4clone[] = "Potentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_5clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_4clone(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4clone(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":729
 * 
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_7project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_6project[] = "Potentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_7project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Potentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_6project(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_6project(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":733
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *            return None
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_4bias___get__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":734
 *     property bias:
 *         def __get__(self):
 *            return None             # <<<<<<<<<<<<<<
 * 
 *     def from_array(self, X, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":733
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *            return None
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":736
 *            return None
 * 
 *     def from_array(self, X, bias=None):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_9from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_8from_array[] = "Potentials.from_array(self, X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_9from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_X = 0;
  CYTHON_UNUSED PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Potentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_8from_array(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_8from_array(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_X, CYTHON_UNUSED PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":740
 * 
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_11dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10Potentials_10dot[] = "Potentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_10Potentials_11dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10Potentials_10dot(((struct __pyx_obj_8pydecode_10potentials_Potentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10Potentials_10dot(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":797
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":803
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":804
 *         """
 *         self.hypergraph = graph
 *         self.kind = Viterbi             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Viterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":805
 *         self.hypergraph = graph
 *         self.kind = Viterbi
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":797
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":807
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":808
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":809
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, ViterbiPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":807
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":811
 *         self.thisptr = NULL
 * 
 *     def times(self, ViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_4times[] = "ViterbiPotentials.times(self, ViterbiPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_other) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":813
 *     def times(self, ViterbiPotentials other):
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":814
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":811
 *         self.thisptr = NULL
 * 
 *     def times(self, ViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":816
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_6clone[] = "ViterbiPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":817
 * 
 *     def clone(self):
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":818
 *     def clone(self):
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":816
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":820
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_8project[] = "ViterbiPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":822
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":823
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return ViterbiPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":820
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":825
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_10up_project[] = "ViterbiPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<ViterbiPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":827
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return ViterbiPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":829
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 *                                                   projection.thisptr)
 *         return ViterbiPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":825
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":832
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":833
 *     property bias:
 *         def __get__(self):
 *             return _Viterbi_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":832
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":862
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_12from_potentials[] = "ViterbiPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":864
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":866
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Viterbi_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":867
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _Viterbi_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":872
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Viterbi_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":870
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Viterbi_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":869
 *             deref(potentials)[i] = _Viterbi_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":875
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":862
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":877
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_14from_vector[] = "ViterbiPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":878
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":881
 * 
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":883
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Viterbi_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":884
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _Viterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":887
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":886
 *             deref(potentials)[i] = _Viterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":891
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":877
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":893
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_16from_map[] = "ViterbiPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<double> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":894
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":897
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<double>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":899
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Viterbi_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":900
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Viterbi_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":901
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Viterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":904
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<ViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":903
 *             potentials[j] = _Viterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":908
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":893
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":910
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Viterbi_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_18_bias[] = "ViterbiPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":911
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return Viterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":912
 *     def _bias(self, bias):
 *         if bias is None:
 *             return Viterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _Viterbi_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(ViterbiPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":914
 *             return Viterbi_one()
 *         else:
 *             return _Viterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":910
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Viterbi_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":917
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_20from_array[] = "ViterbiPotentials.from_array(self, __Pyx_memviewslice X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/potentials.pyx":918
 * 
 *     def from_array(self, double [:] X,
 *                    bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0]); if (unlikely(!__pyx_v_X.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20from_array(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* "pydecode/potentials.pyx":917
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  int __pyx_v_s;
  std::vector<double> *__pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "pydecode/potentials.pyx":919
 *     def from_array(self, double [:] X,
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":920
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *vec= \
 */
  __pyx_v_s = __pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size();

  /* "pydecode/potentials.pyx":923
 * 
 *         cdef vector[double] *vec= \
 *             new vector[double]()             # <<<<<<<<<<<<<<
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 */
  try {
    __pyx_t_5 = new std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec = __pyx_t_5;

  /* "pydecode/potentials.pyx":924
 *         cdef vector[double] *vec= \
 *             new vector[double]()
 *         vec.assign(&X[0], (&X[0]) + s)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec->assign((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_6 * __pyx_v_X.strides[0]) )))), ((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_8 * __pyx_v_X.strides[0]) )))) + __pyx_v_s));

  /* "pydecode/potentials.pyx":927
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         vec, my_bias, False)
 *         return self
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_vec, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 927; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":926
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":929
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":917
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":931
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.thisptr.potentials())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_22as_array[] = "ViterbiPotentials.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22as_array(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":932
 * 
 *     def as_array(self):
 *         return _Viterbivector_to_numpy(self.thisptr.potentials())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbivector_to_numpy(__pyx_v_self->thisptr->potentials()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":931
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.thisptr.potentials())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":936
 * 
 * 
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_17ViterbiPotentials_init(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":938
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":939
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":940
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":936
 * 
 * 
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":942
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_24__getitem__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":943
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":942
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":945
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_26dot[] = "ViterbiPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_26dot(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":949
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _Viterbi_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":945
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":953
 * 
 * cdef class ViterbiValue:
 *     cdef ViterbiValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_f_8pydecode_10potentials_12ViterbiValue_init(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":954
 * cdef class ViterbiValue:
 *     cdef ViterbiValue init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":955
 *     cdef ViterbiValue init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":953
 * 
 * cdef class ViterbiValue:
 *     cdef ViterbiValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":958
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiValue_from_value[] = "ViterbiValue.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12ViterbiValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":959
 *     @staticmethod
 *     def from_value(double val):
 *         created = ViterbiValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _Viterbi_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":960
 *     def from_value(double val):
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":961
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":958
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiValue_2zero_raw[] = "ViterbiValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12ViterbiValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":965
 *     @staticmethod
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(ViterbiPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":968
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiValue_4one_raw[] = "ViterbiValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12ViterbiValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":969
 *     @staticmethod
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(ViterbiPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 969; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":968
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":972
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiValue_6zero[] = "ViterbiValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12ViterbiValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":973
 *     @staticmethod
 *     def zero():
 *         return ViterbiValue().init(Viterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1), ViterbiPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":972
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":976
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiValue_8one[] = "ViterbiValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12ViterbiValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":977
 *     @staticmethod
 *     def one():
 *         return ViterbiValue().init(Viterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(ViterbiValue self, ViterbiValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1), ViterbiPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":976
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":979
 *         return ViterbiValue().init(Viterbi_one())
 * 
 *     def __add__(ViterbiValue self, ViterbiValue other):             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_ViterbiValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_ViterbiValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_10__add__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":980
 * 
 *     def __add__(ViterbiValue self, ViterbiValue other):
 *         return ViterbiValue().init(Viterbi_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":981
 *     def __add__(ViterbiValue self, ViterbiValue other):
 *         return ViterbiValue().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(ViterbiValue self, ViterbiValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1), ViterbiPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":979
 *         return ViterbiValue().init(Viterbi_one())
 * 
 *     def __add__(ViterbiValue self, ViterbiValue other):             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":983
 *                                                   other.thisval))
 * 
 *     def __mul__(ViterbiValue self, ViterbiValue other):             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_ViterbiValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_ViterbiValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 983; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":984
 * 
 *     def __mul__(ViterbiValue self, ViterbiValue other):
 *         return ViterbiValue().init(Viterbi_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":985
 *     def __mul__(ViterbiValue self, ViterbiValue other):
 *         return ViterbiValue().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_t_1), ViterbiPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":983
 *                                                   other.thisval))
 * 
 *     def __mul__(ViterbiValue self, ViterbiValue other):             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":988
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":989
 *     property value:
 *         def __get__(self):
 *             return _Viterbi_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _Viterbi_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":988
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":991
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 * cdef double _Viterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Viterbi_to_cpp", 0);

  /* "pydecode/potentials.pyx":992
 * 
 * cdef double _Viterbi_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":991
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 * cdef double _Viterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":995
 * 
 * 
 * cdef _Viterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Viterbi_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Viterbi_from_cpp", 0);

  /* "pydecode/potentials.pyx":996
 * 
 * cdef _Viterbi_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class ViterbiChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":995
 * 
 * 
 * cdef _Viterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":999
 * 
 * cdef class ViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1000
 * cdef class ViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Viterbi             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Viterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1001
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Viterbi
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CViterbiChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1002
 *         self.kind = Viterbi
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1003
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<ViterbiPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":999
 * 
 * cdef class ViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1005
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1006
 * 
 *     def __getitem__(self, Vertex node):
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1005
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1008
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1009
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1010
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1008
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1013
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.chart.chart())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12ViterbiChart_6as_array[] = "ViterbiChart.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiChart_6as_array(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_6as_array(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1014
 * 
 *     def as_array(self):
 *         return _Viterbivector_to_numpy(self.chart.chart())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbivector_to_numpy(__pyx_v_self->chart->chart()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1013
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.chart.chart())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1018
 * 
 * 
 * cdef _Viterbivector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

static PyObject *__pyx_f_8pydecode_10potentials__Viterbivector_to_numpy(std::vector<double> const &__pyx_v_vec) {
  struct __pyx_array_obj *__pyx_v_my_array = 0;
  __Pyx_memviewslice __pyx_v_my_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Viterbivector_to_numpy", 0);

  /* "pydecode/potentials.pyx":1020
 * cdef _Viterbivector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vec.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1021
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 *                    itemsize=sizeof(double),             # <<<<<<<<<<<<<<
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_s_c) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1023
 *                    itemsize=sizeof(double),
 *                    format="d",
 *                    mode="c", allocate_buffer=False)             # <<<<<<<<<<<<<<
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1020
 * cdef _Viterbivector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_my_array = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1024
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()             # <<<<<<<<<<<<<<
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)
 */
  __pyx_v_my_array->data = ((char *)__pyx_v_vec.data());

  /* "pydecode/potentials.pyx":1025
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array             # <<<<<<<<<<<<<<
 *     return np.asarray(my_view)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_my_array));
  if (unlikely(!__pyx_t_4.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_my_view = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "pydecode/potentials.pyx":1026
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_my_view, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1018
 * 
 * 
 * cdef _Viterbivector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbivector_to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_my_array);
  __PYX_XDEC_MEMVIEW(&__pyx_v_my_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1033
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1034
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1033
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1036
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1037
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1036
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1039
 *         del self.thisptr
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_17_ViterbiMarginals_init(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, Marginals<ViterbiPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1040
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1041
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1042
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1039
 *         del self.thisptr
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1044
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1045
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1046
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1047
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _Viterbi_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1048
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1049
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _Viterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1050
 *         elif isinstance(obj, Vertex):
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1052
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1054
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":1053
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Viterbi marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Viterb, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":1052
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1044
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1057
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.thisptr.node_marginals())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_6as_array[] = "_ViterbiMarginals.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6as_array(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1058
 * 
 *     def as_array(self):
 *         return _Viterbivector_to_numpy(self.thisptr.node_marginals())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbivector_to_numpy(__pyx_v_self->thisptr->node_marginals()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1057
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Viterbivector_to_numpy(self.thisptr.node_marginals())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1064
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_8threshold[] = "_ViterbiMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_8threshold(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":1068
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1069
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1064
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1080
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_inside[] = "Viterbi.inside(Hypergraph graph, ViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<ViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1082
 *     def inside(Hypergraph graph,
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Viterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1083
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 *         chart.chart = inside_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1085
 *         chart.chart = inside_Viterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1080
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1088
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_2outside[] = "Viterbi.outside(Hypergraph graph, ViterbiPotentials potentials, ViterbiChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_ViterbiChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<ViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1091
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 *         cdef ViterbiChart out_chart = ViterbiChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Viterbi(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1092
 *                 ViterbiChart inside_chart):
 *         cdef ViterbiChart out_chart = ViterbiChart()
 *         out_chart.chart = outside_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1095
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1088
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1100
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_4viterbi[] = "Viterbi.viterbi(Hypergraph graph, ViterbiPotentials potentials, ViterbiChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":1102
 *     def viterbi(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_ViterbiChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":1100
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart) {
  Chart<ViterbiPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<ViterbiPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":1105
 *         cdef CViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":1106
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1107
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1109
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Viterbi(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<ViterbiPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1110
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)
 *         viterbi_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1114
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1115
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1116
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":1117
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1100
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1122
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_6compute_marginals[] = "Viterbi.compute_marginals(Hypergraph graph, ViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials) {
  Marginals<ViterbiPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1125
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 *             Viterbi_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _ViterbiMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<ViterbiPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1126
 *         cdef const CViterbiMarginals *marginals = \
 *             Viterbi_compute(graph.thisptr, potentials.thisptr)
 *         return _ViterbiMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__ViterbiMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *)((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1122
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1129
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_8prune_hypergraph[] = "Viterbi.prune_hypergraph(Hypergraph graph, ViterbiPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1132
 *                          ViterbiPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1133
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1134
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1129
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1155
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1161
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1162
 *         """
 *         self.hypergraph = graph
 *         self.kind = LogViterbi             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LogViterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1163
 *         self.hypergraph = graph
 *         self.kind = LogViterbi
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1155
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1165
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1166
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1167
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, LogViterbiPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1165
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1169
 *         self.thisptr = NULL
 * 
 *     def times(self, LogViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_4times[] = "LogViterbiPotentials.times(self, LogViterbiPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_other) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1171
 *     def times(self, LogViterbiPotentials other):
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1172
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1169
 *         self.thisptr = NULL
 * 
 *     def times(self, LogViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1174
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_6clone[] = "LogViterbiPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1175
 * 
 *     def clone(self):
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1176
 *     def clone(self):
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1174
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1178
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_8project[] = "LogViterbiPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1180
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1181
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return LogViterbiPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1178
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1183
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_10up_project[] = "LogViterbiPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1185
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return LogViterbiPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1187
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 *                                                   projection.thisptr)
 *         return LogViterbiPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1183
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1190
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1191
 *     property bias:
 *         def __get__(self):
 *             return _LogViterbi_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1190
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1220
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_12from_potentials[] = "LogViterbiPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1222
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1224
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _LogViterbi_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1225
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _LogViterbi_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1230
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _LogViterbi_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1228
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _LogViterbi_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1227
 *             deref(potentials)[i] = _LogViterbi_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1233
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1220
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1235
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_14from_vector[] = "LogViterbiPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1236
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1239
 * 
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1241
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _LogViterbi_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":1242
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _LogViterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1245
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1244
 *             deref(potentials)[i] = _LogViterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1249
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1235
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1251
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_16from_map[] = "LogViterbiPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<double> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1252
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1255
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<double>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":1257
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _LogViterbi_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1258
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _LogViterbi_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":1259
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _LogViterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1262
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1261
 *             potentials[j] = _LogViterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":1266
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1251
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1268
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return LogViterbi_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_18_bias[] = "LogViterbiPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":1269
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return LogViterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1270
 *     def _bias(self, bias):
 *         if bias is None:
 *             return LogViterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _LogViterbi_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(LogViterbiPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1272
 *             return LogViterbi_one()
 *         else:
 *             return _LogViterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1268
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return LogViterbi_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1275
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_20from_array[] = "LogViterbiPotentials.from_array(self, __Pyx_memviewslice X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/potentials.pyx":1276
 * 
 *     def from_array(self, double [:] X,
 *                    bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0]); if (unlikely(!__pyx_v_X.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20from_array(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* "pydecode/potentials.pyx":1275
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  int __pyx_v_s;
  std::vector<double> *__pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "pydecode/potentials.pyx":1277
 *     def from_array(self, double [:] X,
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1278
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *vec= \
 */
  __pyx_v_s = __pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size();

  /* "pydecode/potentials.pyx":1281
 * 
 *         cdef vector[double] *vec= \
 *             new vector[double]()             # <<<<<<<<<<<<<<
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 */
  try {
    __pyx_t_5 = new std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec = __pyx_t_5;

  /* "pydecode/potentials.pyx":1282
 *         cdef vector[double] *vec= \
 *             new vector[double]()
 *         vec.assign(&X[0], (&X[0]) + s)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec->assign((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_6 * __pyx_v_X.strides[0]) )))), ((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_8 * __pyx_v_X.strides[0]) )))) + __pyx_v_s));

  /* "pydecode/potentials.pyx":1285
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         vec, my_bias, False)
 *         return self
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_vec, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1284
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1287
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1275
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1289
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.thisptr.potentials())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_22as_array[] = "LogViterbiPotentials.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22as_array(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1290
 * 
 *     def as_array(self):
 *         return _LogViterbivector_to_numpy(self.thisptr.potentials())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbivector_to_numpy(__pyx_v_self->thisptr->potentials()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1289
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.thisptr.potentials())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1294
 * 
 * 
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_20LogViterbiPotentials_init(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1296
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1297
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":1298
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1294
 * 
 * 
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1300
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_24__getitem__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1301
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1300
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1303
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_26dot[] = "LogViterbiPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_26dot(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":1307
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _LogViterbi_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1303
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1311
 * 
 * cdef class LogViterbiValue:
 *     cdef LogViterbiValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_f_8pydecode_10potentials_15LogViterbiValue_init(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1312
 * cdef class LogViterbiValue:
 *     cdef LogViterbiValue init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":1313
 *     cdef LogViterbiValue init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1311
 * 
 * cdef class LogViterbiValue:
 *     cdef LogViterbiValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1316
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiValue_from_value[] = "LogViterbiValue.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15LogViterbiValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":1317
 *     @staticmethod
 *     def from_value(double val):
 *         created = LogViterbiValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _LogViterbi_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1318
 *     def from_value(double val):
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":1319
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1316
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1322
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiValue_2zero_raw[] = "LogViterbiValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15LogViterbiValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":1323
 *     @staticmethod
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(LogViterbiPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1322
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1326
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiValue_4one_raw[] = "LogViterbiValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15LogViterbiValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":1327
 *     @staticmethod
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(LogViterbiPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1326
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1330
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiValue_6zero[] = "LogViterbiValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15LogViterbiValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":1331
 *     @staticmethod
 *     def zero():
 *         return LogViterbiValue().init(LogViterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1), LogViterbiPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1330
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1334
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiValue_8one[] = "LogViterbiValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15LogViterbiValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":1335
 *     @staticmethod
 *     def one():
 *         return LogViterbiValue().init(LogViterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(LogViterbiValue self, LogViterbiValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1), LogViterbiPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1334
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1337
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 *     def __add__(LogViterbiValue self, LogViterbiValue other):             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_LogViterbiValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_LogViterbiValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_10__add__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":1338
 * 
 *     def __add__(LogViterbiValue self, LogViterbiValue other):
 *         return LogViterbiValue().init(LogViterbi_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1339
 *     def __add__(LogViterbiValue self, LogViterbiValue other):
 *         return LogViterbiValue().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(LogViterbiValue self, LogViterbiValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1), LogViterbiPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1337
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 *     def __add__(LogViterbiValue self, LogViterbiValue other):             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1341
 *                                                   other.thisval))
 * 
 *     def __mul__(LogViterbiValue self, LogViterbiValue other):             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_LogViterbiValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_LogViterbiValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":1342
 * 
 *     def __mul__(LogViterbiValue self, LogViterbiValue other):
 *         return LogViterbiValue().init(LogViterbi_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1343
 *     def __mul__(LogViterbiValue self, LogViterbiValue other):
 *         return LogViterbiValue().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_t_1), LogViterbiPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1341
 *                                                   other.thisval))
 * 
 *     def __mul__(LogViterbiValue self, LogViterbiValue other):             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1346
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1347
 *     property value:
 *         def __get__(self):
 *             return _LogViterbi_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _LogViterbi_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1346
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1349
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 * cdef double _LogViterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_LogViterbi_to_cpp", 0);

  /* "pydecode/potentials.pyx":1350
 * 
 * cdef double _LogViterbi_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1349
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 * cdef double _LogViterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1353
 * 
 * 
 * cdef _LogViterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_LogViterbi_from_cpp", 0);

  /* "pydecode/potentials.pyx":1354
 * 
 * cdef _LogViterbi_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class LogViterbiChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1353
 * 
 * 
 * cdef _LogViterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1357
 * 
 * cdef class LogViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1357; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1357; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1358
 * cdef class LogViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = LogViterbi             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LogViterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1359
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = LogViterbi
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1360
 *         self.kind = LogViterbi
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1361
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CLogViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<LogViterbiPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1357
 * 
 * cdef class LogViterbiChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1363
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1364
 * 
 *     def __getitem__(self, Vertex node):
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1363
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1366
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1367
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1368
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1366
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1371
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.chart.chart())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15LogViterbiChart_6as_array[] = "LogViterbiChart.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiChart_6as_array(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_6as_array(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1372
 * 
 *     def as_array(self):
 *         return _LogViterbivector_to_numpy(self.chart.chart())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbivector_to_numpy(__pyx_v_self->chart->chart()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1371
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.chart.chart())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1376
 * 
 * 
 * cdef _LogViterbivector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

static PyObject *__pyx_f_8pydecode_10potentials__LogViterbivector_to_numpy(std::vector<double> const &__pyx_v_vec) {
  struct __pyx_array_obj *__pyx_v_my_array = 0;
  __Pyx_memviewslice __pyx_v_my_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_LogViterbivector_to_numpy", 0);

  /* "pydecode/potentials.pyx":1378
 * cdef _LogViterbivector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vec.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1379
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 *                    itemsize=sizeof(double),             # <<<<<<<<<<<<<<
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_s_c) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1381
 *                    itemsize=sizeof(double),
 *                    format="d",
 *                    mode="c", allocate_buffer=False)             # <<<<<<<<<<<<<<
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1378
 * cdef _LogViterbivector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_my_array = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1382
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()             # <<<<<<<<<<<<<<
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)
 */
  __pyx_v_my_array->data = ((char *)__pyx_v_vec.data());

  /* "pydecode/potentials.pyx":1383
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array             # <<<<<<<<<<<<<<
 *     return np.asarray(my_view)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_my_array));
  if (unlikely(!__pyx_t_4.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_my_view = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "pydecode/potentials.pyx":1384
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_my_view, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1376
 * 
 * 
 * cdef _LogViterbivector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbivector_to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_my_array);
  __PYX_XDEC_MEMVIEW(&__pyx_v_my_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1391
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1392
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1391
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1394
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1395
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1394
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1397
 *         del self.thisptr
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_20_LogViterbiMarginals_init(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, Marginals<LogViterbiPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1398
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1399
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1400
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1397
 *         del self.thisptr
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1402
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1403
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1404
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1405
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _LogViterbi_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1406
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1407
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _LogViterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1408
 *         elif isinstance(obj, Vertex):
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1410
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1412
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":1411
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have LogViterbi marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_LogVit, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":1410
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1402
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1415
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.thisptr.node_marginals())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_6as_array[] = "_LogViterbiMarginals.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6as_array(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1416
 * 
 *     def as_array(self):
 *         return _LogViterbivector_to_numpy(self.thisptr.node_marginals())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbivector_to_numpy(__pyx_v_self->thisptr->node_marginals()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1415
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _LogViterbivector_to_numpy(self.thisptr.node_marginals())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1422
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_8threshold[] = "_LogViterbiMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_8threshold(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":1426
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1427
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1422
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1438
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_inside[] = "LogViterbi.inside(Hypergraph graph, LogViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<LogViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1440
 *     def inside(Hypergraph graph,
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_LogViterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1441
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 *         chart.chart = inside_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1443
 *         chart.chart = inside_LogViterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1438
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1446
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_2outside[] = "LogViterbi.outside(Hypergraph graph, LogViterbiPotentials potentials, LogViterbiChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_LogViterbiChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<LogViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1449
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 *         cdef LogViterbiChart out_chart = LogViterbiChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_LogViterbi(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1450
 *                 LogViterbiChart inside_chart):
 *         cdef LogViterbiChart out_chart = LogViterbiChart()
 *         out_chart.chart = outside_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1453
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1446
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1458
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_4viterbi[] = "LogViterbi.viterbi(Hypergraph graph, LogViterbiPotentials potentials, LogViterbiChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":1460
 *     def viterbi(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CLogViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_LogViterbiChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":1458
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart) {
  Chart<LogViterbiPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<LogViterbiPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":1463
 *         cdef CLogViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":1464
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1465
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1467
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_LogViterbi(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<LogViterbiPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1468
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)
 *         viterbi_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1472
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1473
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1474
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":1475
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1458
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1480
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_6compute_marginals[] = "LogViterbi.compute_marginals(Hypergraph graph, LogViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials) {
  Marginals<LogViterbiPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1483
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 *             LogViterbi_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _LogViterbiMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<LogViterbiPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1484
 *         cdef const CLogViterbiMarginals *marginals = \
 *             LogViterbi_compute(graph.thisptr, potentials.thisptr)
 *         return _LogViterbiMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *)((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1480
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1487
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_8prune_hypergraph[] = "LogViterbi.prune_hypergraph(Hypergraph graph, LogViterbiPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1490
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1491
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1492
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1487
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1513
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16InsidePotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16InsidePotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16InsidePotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1519
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1520
 *         """
 *         self.hypergraph = graph
 *         self.kind = Inside             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1521
 *         self.hypergraph = graph
 *         self.kind = Inside
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1513
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1523
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16InsidePotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16InsidePotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1524
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1525
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, InsidePotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1523
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1527
 *         self.thisptr = NULL
 * 
 *     def times(self, InsidePotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_4times[] = "InsidePotentials.times(self, InsidePotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_other) {
  HypergraphPotentials<InsidePotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1529
 *     def times(self, InsidePotentials other):
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1530
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1527
 *         self.thisptr = NULL
 * 
 *     def times(self, InsidePotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1532
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_6clone[] = "InsidePotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1533
 * 
 *     def clone(self):
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1534
 *     def clone(self):
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1532
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1536
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_8project[] = "InsidePotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<InsidePotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1538
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1539
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return InsidePotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1536
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1541
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_10up_project[] = "InsidePotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<InsidePotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<InsidePotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1543
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return InsidePotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<InsidePotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1545
 *             cmake_projected_potentials_Inside(self.thisptr,
 *                                                   projection.thisptr)
 *         return InsidePotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1541
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1548
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1549
 *     property bias:
 *         def __get__(self):
 *             return _Inside_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1548
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1578
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_12from_potentials[] = "InsidePotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<InsidePotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1580
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1582
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Inside_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1583
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _Inside_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1588
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Inside_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1586
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Inside_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<InsidePotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1585
 *             deref(potentials)[i] = _Inside_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1591
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1578
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1593
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_14from_vector[] = "InsidePotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<InsidePotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1594
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1597
 * 
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1599
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Inside_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":1600
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _Inside_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1603
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<InsidePotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1602
 *             deref(potentials)[i] = _Inside_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1607
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1593
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1609
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_16from_map[] = "InsidePotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<double> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<InsidePotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1610
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1613
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<double>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":1615
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Inside_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1616
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Inside_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":1617
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Inside_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1620
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<InsidePotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1619
 *             potentials[j] = _Inside_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":1624
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1609
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1626
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Inside_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_18_bias[] = "InsidePotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":1627
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return Inside_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1628
 *     def _bias(self, bias):
 *         if bias is None:
 *             return Inside_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _Inside_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(InsidePotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1630
 *             return Inside_one()
 *         else:
 *             return _Inside_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1626
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Inside_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1633
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_20from_array[] = "InsidePotentials.from_array(self, __Pyx_memviewslice X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/potentials.pyx":1634
 * 
 *     def from_array(self, double [:] X,
 *                    bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0]); if (unlikely(!__pyx_v_X.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_20from_array(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* "pydecode/potentials.pyx":1633
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  int __pyx_v_s;
  std::vector<double> *__pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  HypergraphPotentials<InsidePotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "pydecode/potentials.pyx":1635
 *     def from_array(self, double [:] X,
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1636
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *vec= \
 */
  __pyx_v_s = __pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size();

  /* "pydecode/potentials.pyx":1639
 * 
 *         cdef vector[double] *vec= \
 *             new vector[double]()             # <<<<<<<<<<<<<<
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 */
  try {
    __pyx_t_5 = new std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec = __pyx_t_5;

  /* "pydecode/potentials.pyx":1640
 *         cdef vector[double] *vec= \
 *             new vector[double]()
 *         vec.assign(&X[0], (&X[0]) + s)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec->assign((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_6 * __pyx_v_X.strides[0]) )))), ((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_8 * __pyx_v_X.strides[0]) )))) + __pyx_v_s));

  /* "pydecode/potentials.pyx":1643
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         vec, my_bias, False)
 *         return self
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<InsidePotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_vec, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1642
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1645
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1633
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1647
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.thisptr.potentials())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_22as_array[] = "InsidePotentials.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_22as_array(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1648
 * 
 *     def as_array(self):
 *         return _Insidevector_to_numpy(self.thisptr.potentials())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Insidevector_to_numpy(__pyx_v_self->thisptr->potentials()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1647
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.thisptr.potentials())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1652
 * 
 * 
 *     cdef init(self, CHypergraphInsidePotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_16InsidePotentials_init(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, HypergraphPotentials<InsidePotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1654
 *     cdef init(self, CHypergraphInsidePotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1655
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":1656
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1652
 * 
 * 
 *     cdef init(self, CHypergraphInsidePotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1658
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_24__getitem__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1659
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1658
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1661
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_26dot[] = "InsidePotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_26dot(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_26dot(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":1665
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _Inside_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1661
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1669
 * 
 * cdef class InsideValue:
 *     cdef InsideValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_f_8pydecode_10potentials_11InsideValue_init(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1670
 * cdef class InsideValue:
 *     cdef InsideValue init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":1671
 *     cdef InsideValue init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1669
 * 
 * cdef class InsideValue:
 *     cdef InsideValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1674
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideValue_from_value[] = "InsideValue.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11InsideValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":1675
 *     @staticmethod
 *     def from_value(double val):
 *         created = InsideValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _Inside_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1676
 *     def from_value(double val):
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":1677
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1674
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1680
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideValue_2zero_raw[] = "InsideValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11InsideValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":1681
 *     @staticmethod
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(InsidePotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1680
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1684
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideValue_4one_raw[] = "InsideValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11InsideValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":1685
 *     @staticmethod
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(InsidePotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1684
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1688
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideValue_6zero[] = "InsideValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11InsideValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":1689
 *     @staticmethod
 *     def zero():
 *         return InsideValue().init(Inside_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *)((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1), InsidePotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1688
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1692
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideValue_8one[] = "InsideValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11InsideValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":1693
 *     @staticmethod
 *     def one():
 *         return InsideValue().init(Inside_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(InsideValue self, InsideValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *)((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1), InsidePotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1692
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1695
 *         return InsideValue().init(Inside_one())
 * 
 *     def __add__(InsideValue self, InsideValue other):             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_InsideValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_InsideValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_10__add__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":1696
 * 
 *     def __add__(InsideValue self, InsideValue other):
 *         return InsideValue().init(Inside_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1697
 *     def __add__(InsideValue self, InsideValue other):
 *         return InsideValue().init(Inside_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(InsideValue self, InsideValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *)((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1), InsidePotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1695
 *         return InsideValue().init(Inside_one())
 * 
 *     def __add__(InsideValue self, InsideValue other):             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1699
 *                                                   other.thisval))
 * 
 *     def __mul__(InsideValue self, InsideValue other):             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_InsideValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_InsideValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":1700
 * 
 *     def __mul__(InsideValue self, InsideValue other):
 *         return InsideValue().init(Inside_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1701
 *     def __mul__(InsideValue self, InsideValue other):
 *         return InsideValue().init(Inside_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue *)((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_t_1), InsidePotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1699
 *                                                   other.thisval))
 * 
 *     def __mul__(InsideValue self, InsideValue other):             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1704
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_InsideValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_InsideValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1705
 *     property value:
 *         def __get__(self):
 *             return _Inside_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _Inside_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1704
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1707
 *             return _Inside_from_cpp(self.thisval)
 * 
 * cdef double _Inside_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__Inside_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Inside_to_cpp", 0);

  /* "pydecode/potentials.pyx":1708
 * 
 * cdef double _Inside_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1707
 *             return _Inside_from_cpp(self.thisval)
 * 
 * cdef double _Inside_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1711
 * 
 * 
 * cdef _Inside_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Inside_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Inside_from_cpp", 0);

  /* "pydecode/potentials.pyx":1712
 * 
 * cdef _Inside_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class InsideChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1711
 * 
 * 
 * cdef _Inside_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1715
 * 
 * cdef class InsideChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideChart___init__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_11InsideChart___init__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1716
 * cdef class InsideChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Inside             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1717
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Inside
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CInsideChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1718
 *         self.kind = Inside
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1719
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CInsideChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<InsidePotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1715
 * 
 * cdef class InsideChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1721
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1722
 * 
 *     def __getitem__(self, Vertex node):
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1721
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1724
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1725
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1726
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1724
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1729
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.chart.chart())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11InsideChart_6as_array[] = "InsideChart.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideChart_6as_array(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_6as_array(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1730
 * 
 *     def as_array(self):
 *         return _Insidevector_to_numpy(self.chart.chart())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Insidevector_to_numpy(__pyx_v_self->chart->chart()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1729
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.chart.chart())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1734
 * 
 * 
 * cdef _Insidevector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

static PyObject *__pyx_f_8pydecode_10potentials__Insidevector_to_numpy(std::vector<double> const &__pyx_v_vec) {
  struct __pyx_array_obj *__pyx_v_my_array = 0;
  __Pyx_memviewslice __pyx_v_my_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Insidevector_to_numpy", 0);

  /* "pydecode/potentials.pyx":1736
 * cdef _Insidevector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vec.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1737
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 *                    itemsize=sizeof(double),             # <<<<<<<<<<<<<<
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_s_c) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1739
 *                    itemsize=sizeof(double),
 *                    format="d",
 *                    mode="c", allocate_buffer=False)             # <<<<<<<<<<<<<<
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1736
 * cdef _Insidevector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_my_array = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1740
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()             # <<<<<<<<<<<<<<
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)
 */
  __pyx_v_my_array->data = ((char *)__pyx_v_vec.data());

  /* "pydecode/potentials.pyx":1741
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array             # <<<<<<<<<<<<<<
 *     return np.asarray(my_view)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_my_array));
  if (unlikely(!__pyx_t_4.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_my_view = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "pydecode/potentials.pyx":1742
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_my_view, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1734
 * 
 * 
 * cdef _Insidevector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("pydecode.potentials._Insidevector_to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_my_array);
  __PYX_XDEC_MEMVIEW(&__pyx_v_my_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1749
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1750
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1749
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1752
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1753
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1752
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1755
 *         del self.thisptr
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_16_InsideMarginals_init(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, Marginals<InsidePotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1756
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1757
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1758
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1755
 *         del self.thisptr
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1760
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1761
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1762
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1763
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _Inside_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1764
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1765
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _Inside_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1766
 *         elif isinstance(obj, Vertex):
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1768
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1770
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":1769
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Inside marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Inside, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":1768
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1760
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1773
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.thisptr.node_marginals())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_InsideMarginals_6as_array[] = "_InsideMarginals.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals_6as_array(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":1774
 * 
 *     def as_array(self):
 *         return _Insidevector_to_numpy(self.thisptr.node_marginals())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Insidevector_to_numpy(__pyx_v_self->thisptr->node_marginals()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1773
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Insidevector_to_numpy(self.thisptr.node_marginals())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1780
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_InsideMarginals_8threshold[] = "_InsideMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals_8threshold(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":1784
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1785
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1780
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1796
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_inside[] = "Inside.inside(Hypergraph graph, InsidePotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<InsidePotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1798
 *     def inside(Hypergraph graph,
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Inside(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1799
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 *         chart.chart = inside_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1801
 *         chart.chart = inside_Inside(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1796
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Inside.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1804
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_2outside[] = "Inside.outside(Hypergraph graph, InsidePotentials potentials, InsideChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_InsideChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<InsidePotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1807
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 *         cdef InsideChart out_chart = InsideChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Inside(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1808
 *                 InsideChart inside_chart):
 *         cdef InsideChart out_chart = InsideChart()
 *         out_chart.chart = outside_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1811
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1804
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Inside.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1816
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_4viterbi[] = "Inside.viterbi(Hypergraph graph, InsidePotentials potentials, InsideChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":1818
 *     def viterbi(Hypergraph graph,
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CInsideChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_InsideChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_InsideChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":1816
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart) {
  Chart<InsidePotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<InsidePotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":1821
 *         cdef CInsideChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":1822
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1823
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1825
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Inside(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<InsidePotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1826
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)
 *         viterbi_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1830
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1831
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1832
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":1833
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1816
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Inside.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1838
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_6compute_marginals[] = "Inside.compute_marginals(Hypergraph graph, InsidePotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials) {
  Marginals<InsidePotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1841
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 *             Inside_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _InsideMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<InsidePotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1842
 *         cdef const CInsideMarginals *marginals = \
 *             Inside_compute(graph.thisptr, potentials.thisptr)
 *         return _InsideMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__InsideMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *)((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1838
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Inside.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1845
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_8prune_hypergraph[] = "Inside.prune_hypergraph(Hypergraph graph, InsidePotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1846; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1848
 *                          InsidePotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1849
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1850
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1845
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Inside.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1871
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16MinMaxPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1877
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = MinMax
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1878
 *         """
 *         self.hypergraph = graph
 *         self.kind = MinMax             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinMax); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1879
 *         self.hypergraph = graph
 *         self.kind = MinMax
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1871
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1881
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1882
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1883
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, MinMaxPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1881
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1885
 *         self.thisptr = NULL
 * 
 *     def times(self, MinMaxPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_4times[] = "MinMaxPotentials.times(self, MinMaxPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinMaxPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_other) {
  HypergraphPotentials<MinMaxPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1887
 *     def times(self, MinMaxPotentials other):
 *         cdef CHypergraphMinMaxPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return MinMaxPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1888
 *         cdef CHypergraphMinMaxPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return MinMaxPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1885
 *         self.thisptr = NULL
 * 
 *     def times(self, MinMaxPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1890
 *         return MinMaxPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinMaxPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_6clone[] = "MinMaxPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1891
 * 
 *     def clone(self):
 *         return MinMaxPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1892
 *     def clone(self):
 *         return MinMaxPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1890
 *         return MinMaxPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinMaxPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1894
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_8project[] = "MinMaxPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1894; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1894; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1894; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinMaxPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1896
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return MinMaxPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1897
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return MinMaxPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1894
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1899
 *         return MinMaxPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             cmake_projected_potentials_MinMax(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_10up_project[] = "MinMaxPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1899; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1899; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinMaxPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<MinMaxPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1901
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             cmake_projected_potentials_MinMax(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return MinMaxPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<MinMaxPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1903
 *             cmake_projected_potentials_MinMax(self.thisptr,
 *                                                   projection.thisptr)
 *         return MinMaxPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1899
 *         return MinMaxPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinMaxPotentials *ptr = \
 *             cmake_projected_potentials_MinMax(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1906
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1907
 *     property bias:
 *         def __get__(self):
 *             return _MinMax_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1906
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1936
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_12from_potentials[] = "MinMaxPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<MinMaxPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1938
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1940
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MinMax_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1941
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _MinMax_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1946
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _MinMax_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1944
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _MinMax_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinMaxPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1943
 *             deref(potentials)[i] = _MinMax_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1949
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1936
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1951
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_14from_vector[] = "MinMaxPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1951; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<MinMaxPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1952
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1955
 * 
 *         cdef vector[double] *potentials = \
 *             new vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<double>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1957
 *             new vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MinMax_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":1958
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _MinMax_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1961
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinMaxPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1960
 *             deref(potentials)[i] = _MinMax_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1965
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1951
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1967
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_16from_map[] = "MinMaxPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<double> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<MinMaxPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1968
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1971
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<double>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":1973
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _MinMax_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1973; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1974
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _MinMax_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":1975
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _MinMax_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1978
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<MinMaxPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1977
 *             potentials[j] = _MinMax_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":1982
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1967
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1984
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MinMax_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_18_bias[] = "MinMaxPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":1985
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return MinMax_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1986
 *     def _bias(self, bias):
 *         if bias is None:
 *             return MinMax_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _MinMax_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(MinMaxPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1988
 *             return MinMax_one()
 *         else:
 *             return _MinMax_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyFloat_FromDouble(__pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1984
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MinMax_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1991
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_20from_array[] = "MinMaxPotentials.from_array(self, __Pyx_memviewslice X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/potentials.pyx":1992
 * 
 *     def from_array(self, double [:] X,
 *                    bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0]); if (unlikely(!__pyx_v_X.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_20from_array(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* "pydecode/potentials.pyx":1991
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  int __pyx_v_s;
  std::vector<double> *__pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  std::vector<double> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  HypergraphPotentials<MinMaxPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "pydecode/potentials.pyx":1993
 *     def from_array(self, double [:] X,
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":1994
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] *vec= \
 */
  __pyx_v_s = __pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size();

  /* "pydecode/potentials.pyx":1997
 * 
 *         cdef vector[double] *vec= \
 *             new vector[double]()             # <<<<<<<<<<<<<<
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 */
  try {
    __pyx_t_5 = new std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec = __pyx_t_5;

  /* "pydecode/potentials.pyx":1998
 *         cdef vector[double] *vec= \
 *             new vector[double]()
 *         vec.assign(&X[0], (&X[0]) + s)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_v_X.shape[0])) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec->assign((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_6 * __pyx_v_X.strides[0]) )))), ((&(*((double *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_8 * __pyx_v_X.strides[0]) )))) + __pyx_v_s));

  /* "pydecode/potentials.pyx":2001
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         vec, my_bias, False)
 *         return self
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinMaxPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_vec, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2000
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2003
 *             cmake_potentials_MinMax(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1991
 * 
 * 
 *     def from_array(self, double [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef double my_bias = self._bias(bias)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2005
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.thisptr.potentials())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_22as_array[] = "MinMaxPotentials.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_22as_array(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":2006
 * 
 *     def as_array(self):
 *         return _MinMaxvector_to_numpy(self.thisptr.potentials())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMaxvector_to_numpy(__pyx_v_self->thisptr->potentials()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2005
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.thisptr.potentials())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2010
 * 
 * 
 *     cdef init(self, CHypergraphMinMaxPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_16MinMaxPotentials_init(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, HypergraphPotentials<MinMaxPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2012
 *     cdef init(self, CHypergraphMinMaxPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2013
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2014
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2010
 * 
 * 
 *     cdef init(self, CHypergraphMinMaxPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2016
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_24__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2017
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _MinMax_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2017; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2016
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2019
 *         return _MinMax_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16MinMaxPotentials_26dot[] = "MinMaxPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16MinMaxPotentials_26dot(((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16MinMaxPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2023
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _MinMax_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2019
 *         return _MinMax_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2027
 * 
 * cdef class MinMaxValue:
 *     cdef MinMaxValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_f_8pydecode_10potentials_11MinMaxValue_init(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2028
 * cdef class MinMaxValue:
 *     cdef MinMaxValue init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2029
 *     cdef MinMaxValue init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2027
 * 
 * cdef class MinMaxValue:
 *     cdef MinMaxValue init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2032
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxValue_from_value[] = "MinMaxValue.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11MinMaxValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2033
 *     @staticmethod
 *     def from_value(double val):
 *         created = MinMaxValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _MinMax_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2034
 *     def from_value(double val):
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__MinMax_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2035
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2032
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxValue_2zero_raw[] = "MinMaxValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11MinMaxValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2039
 *     @staticmethod
 *     def zero_raw():
 *         return _MinMax_from_cpp(MinMax_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(MinMaxPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2042
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxValue_4one_raw[] = "MinMaxValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11MinMaxValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2043
 *     @staticmethod
 *     def one_raw():
 *         return _MinMax_from_cpp(MinMax_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(MinMaxPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2042
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2046
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxValue_6zero[] = "MinMaxValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11MinMaxValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2047
 *     @staticmethod
 *     def zero():
 *         return MinMaxValue().init(MinMax_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *)((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1), MinMaxPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2046
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2050
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxValue_8one[] = "MinMaxValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11MinMaxValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2051
 *     @staticmethod
 *     def one():
 *         return MinMaxValue().init(MinMax_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(MinMaxValue self, MinMaxValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *)((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1), MinMaxPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2050
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2053
 *         return MinMaxValue().init(MinMax_one())
 * 
 *     def __add__(MinMaxValue self, MinMaxValue other):             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MinMaxValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinMaxValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2054
 * 
 *     def __add__(MinMaxValue self, MinMaxValue other):
 *         return MinMaxValue().init(MinMax_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2055
 *     def __add__(MinMaxValue self, MinMaxValue other):
 *         return MinMaxValue().init(MinMax_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(MinMaxValue self, MinMaxValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *)((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1), MinMaxPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2053
 *         return MinMaxValue().init(MinMax_one())
 * 
 *     def __add__(MinMaxValue self, MinMaxValue other):             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2057
 *                                                   other.thisval))
 * 
 *     def __mul__(MinMaxValue self, MinMaxValue other):             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MinMaxValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinMaxValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2058
 * 
 *     def __mul__(MinMaxValue self, MinMaxValue other):
 *         return MinMaxValue().init(MinMax_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2059
 *     def __mul__(MinMaxValue self, MinMaxValue other):
 *         return MinMaxValue().init(MinMax_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue *)((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_t_1), MinMaxPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2057
 *                                                   other.thisval))
 * 
 *     def __mul__(MinMaxValue self, MinMaxValue other):             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2062
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2063
 *     property value:
 *         def __get__(self):
 *             return _MinMax_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _MinMax_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2062
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2065
 *             return _MinMax_from_cpp(self.thisval)
 * 
 * cdef double _MinMax_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__MinMax_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_MinMax_to_cpp", 0);

  /* "pydecode/potentials.pyx":2066
 * 
 * cdef double _MinMax_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2065
 *             return _MinMax_from_cpp(self.thisval)
 * 
 * cdef double _MinMax_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2069
 * 
 * 
 * cdef _MinMax_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__MinMax_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MinMax_from_cpp", 0);

  /* "pydecode/potentials.pyx":2070
 * 
 * cdef _MinMax_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class MinMaxChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2070; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2069
 * 
 * 
 * cdef _MinMax_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinMax_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2073
 * 
 * cdef class MinMaxChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinMax
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_11MinMaxChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_11MinMaxChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMaxChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxChart___init__(((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_11MinMaxChart___init__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2074
 * cdef class MinMaxChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinMax             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinMax); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2075
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinMax
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CMinMaxChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2076
 *         self.kind = MinMax
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CMinMaxChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2077
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CMinMaxChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<MinMaxPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2073
 * 
 * cdef class MinMaxChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinMax
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2079
 *             self.chart = new CMinMaxChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2080
 * 
 *     def __getitem__(self, Vertex node):
 *         return _MinMax_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2079
 *             self.chart = new CMinMaxChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2082
 *         return _MinMax_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_11MinMaxChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_11MinMaxChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_11MinMaxChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_11MinMaxChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2083
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2084
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2082
 *         return _MinMax_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2087
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.chart.chart())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11MinMaxChart_6as_array[] = "MinMaxChart.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_11MinMaxChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_11MinMaxChart_6as_array(((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11MinMaxChart_6as_array(struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":2088
 * 
 *     def as_array(self):
 *         return _MinMaxvector_to_numpy(self.chart.chart())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMaxvector_to_numpy(__pyx_v_self->chart->chart()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2087
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.chart.chart())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMaxChart.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2092
 * 
 * 
 * cdef _MinMaxvector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

static PyObject *__pyx_f_8pydecode_10potentials__MinMaxvector_to_numpy(std::vector<double> const &__pyx_v_vec) {
  struct __pyx_array_obj *__pyx_v_my_array = 0;
  __Pyx_memviewslice __pyx_v_my_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MinMaxvector_to_numpy", 0);

  /* "pydecode/potentials.pyx":2094
 * cdef _MinMaxvector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vec.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2095
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 *                    itemsize=sizeof(double),             # <<<<<<<<<<<<<<
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_d_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_s_c) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2097
 *                    itemsize=sizeof(double),
 *                    format="d",
 *                    mode="c", allocate_buffer=False)             # <<<<<<<<<<<<<<
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2094
 * cdef _MinMaxvector_to_numpy(const vector[double] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(double),
 *                    format="d",
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_my_array = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2098
 *                    format="d",
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()             # <<<<<<<<<<<<<<
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)
 */
  __pyx_v_my_array->data = ((char *)__pyx_v_vec.data());

  /* "pydecode/potentials.pyx":2099
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array             # <<<<<<<<<<<<<<
 *     return np.asarray(my_view)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_my_array));
  if (unlikely(!__pyx_t_4.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_my_view = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "pydecode/potentials.pyx":2100
 *     my_array.data = <char *> vec.data()
 *     cdef double [:] my_view = my_array
 *     return np.asarray(my_view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_my_view, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2092
 * 
 * 
 * cdef _MinMaxvector_to_numpy(const vector[double] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("pydecode.potentials._MinMaxvector_to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_my_array);
  __PYX_XDEC_MEMVIEW(&__pyx_v_my_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2107
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2108
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2107
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2110
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2111
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CMinMaxMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2110
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2113
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinMaxMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_16_MinMaxMarginals_init(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self, Marginals<MinMaxPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2114
 * 
 *     cdef init(self, const CMinMaxMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2115
 *     cdef init(self, const CMinMaxMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2116
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2113
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinMaxMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2118
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinMax_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2119
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2120
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _MinMax_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2121
 *         if isinstance(obj, Edge):
 *             return _MinMax_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _MinMax_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2122
 *             return _MinMax_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _MinMax_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2123
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _MinMax_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2124
 *         elif isinstance(obj, Vertex):
 *             return _MinMax_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinMax_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2126
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinMax marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":2128
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MinMax marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":2127
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MinMax marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_MinMax, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":2126
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinMax marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2118
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinMax_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._MinMaxMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2131
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.thisptr.node_marginals())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinMaxMarginals_6as_array[] = "_MinMaxMarginals.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_6as_array(((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinMaxMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":2132
 * 
 *     def as_array(self):
 *         return _MinMaxvector_to_numpy(self.thisptr.node_marginals())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinMaxvector_to_numpy(__pyx_v_self->thisptr->node_marginals()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2131
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _MinMaxvector_to_numpy(self.thisptr.node_marginals())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinMaxMarginals.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2146
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6MinMax_inside[] = "MinMax.inside(Hypergraph graph, MinMaxPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6MinMax_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6MinMax_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6MinMax_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMax.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinMaxPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6MinMax_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinMaxPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2148
 *     def inside(Hypergraph graph,
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_MinMax(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2149
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()
 *         chart.chart = inside_MinMax(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<MinMaxPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2151
 *         chart.chart = inside_MinMax(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2146
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMax.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2154
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinMaxPotentials potentials,
 *                 MinMaxChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6MinMax_2outside[] = "MinMax.outside(Hypergraph graph, MinMaxPotentials potentials, MinMaxChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6MinMax_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6MinMax_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6MinMax_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMax.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinMaxPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_MinMaxChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6MinMax_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinMaxPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2157
 *                 MinMaxPotentials potentials,
 *                 MinMaxChart inside_chart):
 *         cdef MinMaxChart out_chart = MinMaxChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_MinMax(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2158
 *                 MinMaxChart inside_chart):
 *         cdef MinMaxChart out_chart = MinMaxChart()
 *         out_chart.chart = outside_MinMax(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<MinMaxPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2161
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2154
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinMaxPotentials potentials,
 *                 MinMaxChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinMax.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2166
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinMaxPotentials potentials):
 *         cdef const CMinMaxMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6MinMax_4compute_marginals[] = "MinMax.compute_marginals(Hypergraph graph, MinMaxPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6MinMax_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6MinMax_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6MinMax_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMax.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinMaxPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6MinMax_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials) {
  Marginals<MinMaxPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2169
 *                           MinMaxPotentials potentials):
 *         cdef const CMinMaxMarginals *marginals = \
 *             MinMax_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _MinMaxMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<MinMaxPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":2170
 *         cdef const CMinMaxMarginals *marginals = \
 *             MinMax_compute(graph.thisptr, potentials.thisptr)
 *         return _MinMaxMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinMaxMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__MinMaxMarginals *)((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2166
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinMaxPotentials potentials):
 *         cdef const CMinMaxMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinMax.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2173
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinMaxPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6MinMax_6prune_hypergraph[] = "MinMax.prune_hypergraph(Hypergraph graph, MinMaxPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6MinMax_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6MinMax_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6MinMax_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_6MinMax_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinMax.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinMaxPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6MinMax_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6MinMax_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2176
 *                          MinMaxPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2177
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2178
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2173
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinMaxPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinMax.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2198
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2198; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2198; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":2204
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2205
 *         """
 *         self.hypergraph = graph
 *         self.kind = SparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2206
 *         self.hypergraph = graph
 *         self.kind = SparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2198
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2208
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2209
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2210
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, SparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2208
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2212
 *         self.thisptr = NULL
 * 
 *     def times(self, SparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_4times[] = "SparseVectorPotentials.times(self, SparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":2214
 *     def times(self, SparseVectorPotentials other):
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":2215
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2212
 *         self.thisptr = NULL
 * 
 *     def times(self, SparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2217
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_6clone[] = "SparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":2218
 * 
 *     def clone(self):
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2219
 *     def clone(self):
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2217
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2221
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_8project[] = "SparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":2223
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":2224
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return SparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2221
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2226
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_10up_project[] = "SparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":2228
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return SparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":2230
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return SparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2226
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2233
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2234
 *     property bias:
 *         def __get__(self):
 *             return _SparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2233
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2263
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_12from_potentials[] = "SparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":2265
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":2267
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _SparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2268
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _SparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2273
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _SparseVector_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2271
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _SparseVector_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2270
 *             deref(potentials)[i] = _SparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2276
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2263
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2278
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_14from_vector[] = "SparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":2279
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2282
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":2284
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _SparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":2285
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _SparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2288
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2287
 *             deref(potentials)[i] = _SparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2292
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2278
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2294
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_16from_map[] = "SparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2294; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2294; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":2295
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2298
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":2300
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _SparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":2301
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _SparseVector_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":2302
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _SparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2305
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2304
 *             potentials[j] = _SparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":2309
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2294
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2311
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return SparseVector_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_18_bias[] = "SparseVectorPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":2312
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return SparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2313
 *     def _bias(self, bias):
 *         if bias is None:
 *             return SparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _SparseVector_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(SparseVectorPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2315
 *             return SparseVector_one()
 *         else:
 *             return _SparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2311
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return SparseVector_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2320
 * 
 * 
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_22SparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2322
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2323
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2324
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2320
 * 
 * 
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2326
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2327
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2326
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2329
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_22dot[] = "SparseVectorPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2333
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _SparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2329
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2337
 * 
 * cdef class SparseVectorValue:
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_f_8pydecode_10potentials_17SparseVectorValue_init(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2338
 * cdef class SparseVectorValue:
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2339
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2337
 * 
 * cdef class SparseVectorValue:
 *     cdef SparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2342
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17SparseVectorValue_from_value[] = "SparseVectorValue.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17SparseVectorValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2343
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = SparseVectorValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _SparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2344
 *     def from_value(vector[pair[int, int]] val):
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2345
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2342
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2348
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17SparseVectorValue_2zero_raw[] = "SparseVectorValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17SparseVectorValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2349
 *     @staticmethod
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(SparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2348
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2352
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17SparseVectorValue_4one_raw[] = "SparseVectorValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17SparseVectorValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2353
 *     @staticmethod
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(SparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2352
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2356
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17SparseVectorValue_6zero[] = "SparseVectorValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17SparseVectorValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2357
 *     @staticmethod
 *     def zero():
 *         return SparseVectorValue().init(SparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1), SparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2356
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2360
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17SparseVectorValue_8one[] = "SparseVectorValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17SparseVectorValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2361
 *     @staticmethod
 *     def one():
 *         return SparseVectorValue().init(SparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(SparseVectorValue self, SparseVectorValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1), SparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2360
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2363
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 *     def __add__(SparseVectorValue self, SparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_SparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_SparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2364
 * 
 *     def __add__(SparseVectorValue self, SparseVectorValue other):
 *         return SparseVectorValue().init(SparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2365
 *     def __add__(SparseVectorValue self, SparseVectorValue other):
 *         return SparseVectorValue().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(SparseVectorValue self, SparseVectorValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1), SparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2363
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 *     def __add__(SparseVectorValue self, SparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2367
 *                                                   other.thisval))
 * 
 *     def __mul__(SparseVectorValue self, SparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_SparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_SparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2368
 * 
 *     def __mul__(SparseVectorValue self, SparseVectorValue other):
 *         return SparseVectorValue().init(SparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2369
 *     def __mul__(SparseVectorValue self, SparseVectorValue other):
 *         return SparseVectorValue().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_t_1), SparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2367
 *                                                   other.thisval))
 * 
 *     def __mul__(SparseVectorValue self, SparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2372
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2373
 *     property value:
 *         def __get__(self):
 *             return _SparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2372
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2375
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_SparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":2376
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2375
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2379
 * 
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__SparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_SparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":2380
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class SparseVectorChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2379
 * 
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2383
 * 
 * cdef class SparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2384
 * cdef class SparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = SparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2385
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = SparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2386
 *         self.kind = SparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2387
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<SparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2383
 * 
 * cdef class SparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2389
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2390
 * 
 *     def __getitem__(self, Vertex node):
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2389
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2392
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2393
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2394
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2392
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2404
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2405
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2404
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2407
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2408
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2407
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2410
 *         del self.thisptr
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_22_SparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, Marginals<SparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2411
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2412
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2413
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2410
 *         del self.thisptr
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2415
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2416
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2417
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2418
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _SparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2419
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2420
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _SparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2421
 *         elif isinstance(obj, Vertex):
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2423
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":2425
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":2424
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have SparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Sparse, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":2423
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2415
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._SparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2440
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_inside[] = "SparseVector.inside(Hypergraph graph, SparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<SparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2442
 *     def inside(Hypergraph graph,
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_SparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2443
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 *         chart.chart = inside_SparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<SparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2445
 *         chart.chart = inside_SparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2440
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2448
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_2outside[] = "SparseVector.outside(Hypergraph graph, SparseVectorPotentials potentials, SparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_SparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<SparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2451
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 *         cdef SparseVectorChart out_chart = SparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_SparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2452
 *                 SparseVectorChart inside_chart):
 *         cdef SparseVectorChart out_chart = SparseVectorChart()
 *         out_chart.chart = outside_SparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<SparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2455
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2448
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2460
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_4compute_marginals[] = "SparseVector.compute_marginals(Hypergraph graph, SparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials) {
  Marginals<SparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2463
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 *             SparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _SparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<SparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":2464
 *         cdef const CSparseVectorMarginals *marginals = \
 *             SparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _SparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2460
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2467
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_6prune_hypergraph[] = "SparseVector.prune_hypergraph(Hypergraph graph, SparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2470
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2471
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2472
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2467
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2492
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2492; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":2498
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2499
 *         """
 *         self.hypergraph = graph
 *         self.kind = MinSparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2500
 *         self.hypergraph = graph
 *         self.kind = MinSparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2492
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2502
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2503
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2504
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, MinSparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2502
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2506
 *         self.thisptr = NULL
 * 
 *     def times(self, MinSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_4times[] = "MinSparseVectorPotentials.times(self, MinSparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":2508
 *     def times(self, MinSparseVectorPotentials other):
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":2509
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2506
 *         self.thisptr = NULL
 * 
 *     def times(self, MinSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2511
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_6clone[] = "MinSparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":2512
 * 
 *     def clone(self):
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2513
 *     def clone(self):
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2511
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2515
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_8project[] = "MinSparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":2517
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":2518
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return MinSparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2515
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2520
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project[] = "MinSparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":2522
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":2524
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2520
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2527
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2528
 *     property bias:
 *         def __get__(self):
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2527
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2557
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_12from_potentials[] = "MinSparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":2559
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":2561
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2562
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2567
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _MinSparseVector_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2565
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _MinSparseVector_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2564
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2570
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2557
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2572
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_14from_vector[] = "MinSparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":2573
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2576
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":2578
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":2579
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2582
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2581
 *             deref(potentials)[i] = _MinSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2586
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2572
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2588
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_16from_map[] = "MinSparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":2589
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2592
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":2594
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":2595
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":2596
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _MinSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2599
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2598
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":2603
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2588
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2605
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MinSparseVector_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_18_bias[] = "MinSparseVectorPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":2606
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return MinSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2607
 *     def _bias(self, bias):
 *         if bias is None:
 *             return MinSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _MinSparseVector_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(MinSparseVectorPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2609
 *             return MinSparseVector_one()
 *         else:
 *             return _MinSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2605
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MinSparseVector_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2614
 * 
 * 
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_25MinSparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2616
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2617
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2618
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2614
 * 
 * 
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2620
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2621
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2620
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2623
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_22dot[] = "MinSparseVectorPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2627
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _MinSparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2623
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2631
 * 
 * cdef class MinSparseVectorValue:
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_f_8pydecode_10potentials_20MinSparseVectorValue_init(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2632
 * cdef class MinSparseVectorValue:
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2633
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2631
 * 
 * cdef class MinSparseVectorValue:
 *     cdef MinSparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2636
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_from_value[] = "MinSparseVectorValue.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2637
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = MinSparseVectorValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _MinSparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2638
 *     def from_value(vector[pair[int, int]] val):
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2639
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2636
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2642
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw[] = "MinSparseVectorValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2643
 *     @staticmethod
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(MinSparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2642
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2646
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_4one_raw[] = "MinSparseVectorValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2647
 *     @staticmethod
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(MinSparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2646
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2650
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_6zero[] = "MinSparseVectorValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2651
 *     @staticmethod
 *     def zero():
 *         return MinSparseVectorValue().init(MinSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1), MinSparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2650
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2654
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_8one[] = "MinSparseVectorValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2655
 *     @staticmethod
 *     def one():
 *         return MinSparseVectorValue().init(MinSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(MinSparseVectorValue self, MinSparseVectorValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1), MinSparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2654
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2657
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 *     def __add__(MinSparseVectorValue self, MinSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2658
 * 
 *     def __add__(MinSparseVectorValue self, MinSparseVectorValue other):
 *         return MinSparseVectorValue().init(MinSparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2659
 *     def __add__(MinSparseVectorValue self, MinSparseVectorValue other):
 *         return MinSparseVectorValue().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(MinSparseVectorValue self, MinSparseVectorValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1), MinSparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2657
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 *     def __add__(MinSparseVectorValue self, MinSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2661
 *                                                   other.thisval))
 * 
 *     def __mul__(MinSparseVectorValue self, MinSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2662
 * 
 *     def __mul__(MinSparseVectorValue self, MinSparseVectorValue other):
 *         return MinSparseVectorValue().init(MinSparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2663
 *     def __mul__(MinSparseVectorValue self, MinSparseVectorValue other):
 *         return MinSparseVectorValue().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_t_1), MinSparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2661
 *                                                   other.thisval))
 * 
 *     def __mul__(MinSparseVectorValue self, MinSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2666
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2667
 *     property value:
 *         def __get__(self):
 *             return _MinSparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2666
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2669
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_MinSparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":2670
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2669
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2673
 * 
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MinSparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":2674
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class MinSparseVectorChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2673
 * 
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2677
 * 
 * cdef class MinSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2678
 * cdef class MinSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinSparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2679
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinSparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2680
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2681
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<MinSparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2677
 * 
 * cdef class MinSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2683
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2684
 * 
 *     def __getitem__(self, Vertex node):
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2683
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2686
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2687
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2688
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2686
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2698
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2699
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2698
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2701
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2702
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2701
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2704
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_25_MinSparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, Marginals<MinSparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2705
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2706
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2707
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2704
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2709
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2710
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2711
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2712
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _MinSparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2713
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2714
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _MinSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2715
 *         elif isinstance(obj, Vertex):
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2717
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":2719
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":2718
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MinSparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_MinSpa, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":2717
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2709
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2734
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_inside[] = "MinSparseVector.inside(Hypergraph graph, MinSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2736
 *     def inside(Hypergraph graph,
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_MinSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2737
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 *         chart.chart = inside_MinSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<MinSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2739
 *         chart.chart = inside_MinSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2734
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2742
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_2outside[] = "MinSparseVector.outside(Hypergraph graph, MinSparseVectorPotentials potentials, MinSparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_MinSparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2745
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 *         cdef MinSparseVectorChart out_chart = MinSparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_MinSparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2746
 *                 MinSparseVectorChart inside_chart):
 *         cdef MinSparseVectorChart out_chart = MinSparseVectorChart()
 *         out_chart.chart = outside_MinSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<MinSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2749
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2742
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2754
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_4compute_marginals[] = "MinSparseVector.compute_marginals(Hypergraph graph, MinSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials) {
  Marginals<MinSparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2757
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 *             MinSparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _MinSparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<MinSparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":2758
 *         cdef const CMinSparseVectorMarginals *marginals = \
 *             MinSparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _MinSparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2754
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2761
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph[] = "MinSparseVector.prune_hypergraph(Hypergraph graph, MinSparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2764
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2765
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2766
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2761
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2786
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":2792
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2793
 *         """
 *         self.hypergraph = graph
 *         self.kind = MaxSparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MaxSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2794
 *         self.hypergraph = graph
 *         self.kind = MaxSparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2786
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2796
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2797
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2798
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, MaxSparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2796
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2800
 *         self.thisptr = NULL
 * 
 *     def times(self, MaxSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_4times[] = "MaxSparseVectorPotentials.times(self, MaxSparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":2802
 *     def times(self, MaxSparseVectorPotentials other):
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":2803
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2800
 *         self.thisptr = NULL
 * 
 *     def times(self, MaxSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2805
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone[] = "MaxSparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":2806
 * 
 *     def clone(self):
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2807
 *     def clone(self):
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2805
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2809
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_8project[] = "MaxSparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2809; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2809; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2809; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":2811
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":2812
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2809
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2814
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project[] = "MaxSparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":2816
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":2818
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2814
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2821
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2822
 *     property bias:
 *         def __get__(self):
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2821
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2851
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_12from_potentials[] = "MaxSparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":2853
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":2855
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2856
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2856; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2861
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _MaxSparseVector_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2859
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _MaxSparseVector_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2858
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2864
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2851
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2866
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_vector[] = "MaxSparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2866; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2866; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":2867
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2870
 * 
 *         cdef vector[vector[pair[int, int]]] *potentials = \
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":2872
 *             new vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":2873
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2876
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2875
 *             deref(potentials)[i] = _MaxSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2880
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2866
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2882
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_map[] = "MaxSparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2882; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2882; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":2883
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":2886
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":2888
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":2889
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":2890
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _MaxSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2890; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2893
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2892
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":2897
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2882
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2899
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MaxSparseVector_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_18_bias[] = "MaxSparseVectorPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::vector<std::pair<int,int> > __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":2900
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return MaxSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2901
 *     def _bias(self, bias):
 *         if bias is None:
 *             return MaxSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _MaxSparseVector_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(MaxSparseVectorPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2903
 *             return MaxSparseVector_one()
 *         else:
 *             return _MaxSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2899
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return MaxSparseVector_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2908
 * 
 * 
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_25MaxSparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2910
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2911
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2912
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2908
 * 
 * 
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2914
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2915
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2914
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2917
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot[] = "MaxSparseVectorPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2921
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _MaxSparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2917
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2925
 * 
 * cdef class MaxSparseVectorValue:
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_f_8pydecode_10potentials_20MaxSparseVectorValue_init(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2926
 * cdef class MaxSparseVectorValue:
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2927
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2925
 * 
 * cdef class MaxSparseVectorValue:
 *     cdef MaxSparseVectorValue init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2930
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_from_value[] = "MaxSparseVectorValue.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2931
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = MaxSparseVectorValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2932
 *     def from_value(vector[pair[int, int]] val):
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2933
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2930
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2936
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw[] = "MaxSparseVectorValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2937
 *     @staticmethod
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(MaxSparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2937; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2936
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2940
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw[] = "MaxSparseVectorValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2941
 *     @staticmethod
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(MaxSparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2940
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2944
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_6zero[] = "MaxSparseVectorValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2945
 *     @staticmethod
 *     def zero():
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1), MaxSparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2945; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2944
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2948
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_8one[] = "MaxSparseVectorValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2949
 *     @staticmethod
 *     def one():
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1), MaxSparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2948
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2951
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 *     def __add__(MaxSparseVectorValue self, MaxSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_10__add__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2952
 * 
 *     def __add__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 *         return MaxSparseVectorValue().init(MaxSparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2953
 *     def __add__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 *         return MaxSparseVectorValue().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1), MaxSparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2951
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 *     def __add__(MaxSparseVectorValue self, MaxSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2955
 *                                                   other.thisval))
 * 
 *     def __mul__(MaxSparseVectorValue self, MaxSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2956
 * 
 *     def __mul__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 *         return MaxSparseVectorValue().init(MaxSparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2957
 *     def __mul__(MaxSparseVectorValue self, MaxSparseVectorValue other):
 *         return MaxSparseVectorValue().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_t_1), MaxSparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2955
 *                                                   other.thisval))
 * 
 *     def __mul__(MaxSparseVectorValue self, MaxSparseVectorValue other):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2960
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2961
 *     property value:
 *         def __get__(self):
 *             return _MaxSparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2960
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2963
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_MaxSparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":2964
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2963
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2967
 * 
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MaxSparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":2968
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class MaxSparseVectorChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2967
 * 
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2971
 * 
 * cdef class MaxSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2972
 * cdef class MaxSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MaxSparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MaxSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2973
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MaxSparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2974
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2975
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<MaxSparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2971
 * 
 * cdef class MaxSparseVectorChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2977
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2978
 * 
 *     def __getitem__(self, Vertex node):
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2977
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2980
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2981
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2982
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2980
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2992
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2993
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2992
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2995
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2996
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2995
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2998
 *         del self.thisptr
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_25_MaxSparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, Marginals<MaxSparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2999
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3000
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3001
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2998
 *         del self.thisptr
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3003
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3004
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3005
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3006
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _MaxSparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":3007
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":3008
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _MaxSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3009
 *         elif isinstance(obj, Vertex):
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3011
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":3013
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":3012
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have MaxSparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":3011
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3003
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3028
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_inside[] = "MaxSparseVector.inside(Hypergraph graph, MaxSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MaxSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":3030
 *     def inside(Hypergraph graph,
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3031
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<MaxSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3033
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3028
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3036
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_2outside[] = "MaxSparseVector.outside(Hypergraph graph, MaxSparseVectorPotentials potentials, MaxSparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MaxSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":3039
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 *         cdef MaxSparseVectorChart out_chart = MaxSparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_MaxSparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3040
 *                 MaxSparseVectorChart inside_chart):
 *         cdef MaxSparseVectorChart out_chart = MaxSparseVectorChart()
 *         out_chart.chart = outside_MaxSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<MaxSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3043
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3036
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3048
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_4compute_marginals[] = "MaxSparseVector.compute_marginals(Hypergraph graph, MaxSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials) {
  Marginals<MaxSparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":3051
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 *             MaxSparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _MaxSparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<MaxSparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":3052
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 *             MaxSparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _MaxSparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3048
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3055
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph[] = "MaxSparseVector.prune_hypergraph(Hypergraph graph, MaxSparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":3058
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3059
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3060
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3055
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3081
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_18CountingPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_18CountingPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3081; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3081; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_18CountingPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":3087
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3088
 *         """
 *         self.hypergraph = graph
 *         self.kind = Counting             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Counting); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3089
 *         self.hypergraph = graph
 *         self.kind = Counting
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3081
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3091
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_18CountingPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_18CountingPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3092
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":3093
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, CountingPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3091
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3095
 *         self.thisptr = NULL
 * 
 *     def times(self, CountingPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_4times[] = "CountingPotentials.times(self, CountingPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_other) {
  HypergraphPotentials<CountingPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":3097
 *     def times(self, CountingPotentials other):
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":3098
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3095
 *         self.thisptr = NULL
 * 
 *     def times(self, CountingPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3100
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_6clone[] = "CountingPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":3101
 * 
 *     def clone(self):
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3102
 *     def clone(self):
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3100
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3104
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_8project[] = "CountingPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<CountingPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":3106
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":3107
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return CountingPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3104
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3109
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_10up_project[] = "CountingPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<CountingPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<CountingPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":3111
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return CountingPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<CountingPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":3113
 *             cmake_projected_potentials_Counting(self.thisptr,
 *                                                   projection.thisptr)
 *         return CountingPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3109
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3116
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":3117
 *     property bias:
 *         def __get__(self):
 *             return _Counting_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3116
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3146
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[int] *potentials = \
 *             new vector[int](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_12from_potentials[] = "CountingPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<int> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<CountingPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":3148
 *     def from_potentials(self, other_potentials):
 *         cdef vector[int] *potentials = \
 *             new vector[int](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<int>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":3150
 *             new vector[int](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Counting_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":3151
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _Counting_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3151; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3156
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Counting_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3154
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Counting_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<CountingPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3153
 *             deref(potentials)[i] = _Counting_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":3159
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3146
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[int] *potentials = \
 *             new vector[int](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3161
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_14from_vector[] = "CountingPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  int __pyx_v_my_bias;
  std::vector<int> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::vector<int> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<CountingPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":3162
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef int my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":3165
 * 
 *         cdef vector[int] *potentials = \
 *             new vector[int](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<int>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":3167
 *             new vector[int](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Counting_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":3168
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _Counting_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_v); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3171
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<CountingPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3170
 *             deref(potentials)[i] = _Counting_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":3175
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3161
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3177
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_16from_map[] = "CountingPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3177; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  int __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<int> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<int> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  size_t __pyx_t_11;
  HypergraphPotentials<CountingPotential> *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":3178
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef int my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[int] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":3181
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[int] potentials = \
 *             vector[int](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<int>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":3183
 *             vector[int](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Counting_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_4)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_8, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_8 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "pydecode/potentials.pyx":3184
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Counting_to_cpp(v)
 * 
 */
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_10]) = __pyx_t_9;

    /* "pydecode/potentials.pyx":3185
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Counting_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_v); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_11]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_9);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3188
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_12 = HypergraphSparsePotentials<CountingPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3187
 *             potentials[j] = _Counting_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_12;

  /* "pydecode/potentials.pyx":3192
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3177
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3194
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Counting_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_18_bias[] = "CountingPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":3195
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return Counting_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3196
 *     def _bias(self, bias):
 *         if bias is None:
 *             return Counting_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _Counting_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_int(CountingPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3198
 *             return Counting_one()
 *         else:
 *             return _Counting_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_bias); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":3194
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Counting_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3201
 * 
 * 
 *     def from_array(self, int [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef int my_bias = self._bias(bias)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_20from_array[] = "CountingPotentials.from_array(self, __Pyx_memviewslice X, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_21from_array(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/potentials.pyx":3202
 * 
 *     def from_array(self, int [:] X,
 *                    bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_array") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X = __Pyx_PyObject_to_MemoryviewSlice_ds_int(values[0]); if (unlikely(!__pyx_v_X.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_array", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_20from_array(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_X, __pyx_v_bias);

  /* "pydecode/potentials.pyx":3201
 * 
 * 
 *     def from_array(self, int [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef int my_bias = self._bias(bias)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_20from_array(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, __Pyx_memviewslice __pyx_v_X, PyObject *__pyx_v_bias) {
  int __pyx_v_my_bias;
  int __pyx_v_s;
  std::vector<int> *__pyx_v_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::vector<int> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  HypergraphPotentials<CountingPotential> *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "pydecode/potentials.pyx":3203
 *     def from_array(self, int [:] X,
 *                    bias=None):
 *         cdef int my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef int s = self.hypergraph.thisptr.edges().size()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":3204
 *                    bias=None):
 *         cdef int my_bias = self._bias(bias)
 *         cdef int s = self.hypergraph.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] *vec= \
 */
  __pyx_v_s = __pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size();

  /* "pydecode/potentials.pyx":3207
 * 
 *         cdef vector[int] *vec= \
 *             new vector[int]()             # <<<<<<<<<<<<<<
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 */
  try {
    __pyx_t_5 = new std::vector<int>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec = __pyx_t_5;

  /* "pydecode/potentials.pyx":3208
 *         cdef vector[int] *vec= \
 *             new vector[int]()
 *         vec.assign(&X[0], (&X[0]) + s)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
  __pyx_t_6 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_v_X.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_v_X.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_v_X.shape[0])) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_vec->assign((&(*((int *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_6 * __pyx_v_X.strides[0]) )))), ((&(*((int *) ( /* dim=0 */ (__pyx_v_X.data + __pyx_t_7 * __pyx_v_X.strides[0]) )))) + __pyx_v_s));

  /* "pydecode/potentials.pyx":3211
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         vec, my_bias, False)
 *         return self
 */
  try {
    __pyx_t_8 = HypergraphVectorPotentials<CountingPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_vec, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3210
 *         vec.assign(&X[0], (&X[0]) + s)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 */
  __pyx_v_self->thisptr = __pyx_t_8;

  /* "pydecode/potentials.pyx":3213
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         vec, my_bias, False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3201
 * 
 * 
 *     def from_array(self, int [:] X,             # <<<<<<<<<<<<<<
 *                    bias=None):
 *         cdef int my_bias = self._bias(bias)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3215
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.thisptr.potentials())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_22as_array[] = "CountingPotentials.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_23as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_22as_array(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_22as_array(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":3216
 * 
 *     def as_array(self):
 *         return _Countingvector_to_numpy(self.thisptr.potentials())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Countingvector_to_numpy(__pyx_v_self->thisptr->potentials()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3215
 *         return self
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.thisptr.potentials())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3220
 * 
 * 
 *     cdef init(self, CHypergraphCountingPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_18CountingPotentials_init(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, HypergraphPotentials<CountingPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3222
 *     cdef init(self, CHypergraphCountingPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3223
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":3224
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3220
 * 
 * 
 *     cdef init(self, CHypergraphCountingPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3226
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_25__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_24__getitem__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_24__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3227
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3226
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3229
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_26dot[] = "CountingPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_27dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_26dot(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_26dot(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":3233
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _Counting_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3229
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3237
 * 
 * cdef class CountingValue:
 *     cdef CountingValue init(self, int val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_f_8pydecode_10potentials_13CountingValue_init(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self, int __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3238
 * cdef class CountingValue:
 *     cdef CountingValue init(self, int val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":3239
 *     cdef CountingValue init(self, int val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3237
 * 
 * cdef class CountingValue:
 *     cdef CountingValue init(self, int val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3242
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingValue_from_value[] = "CountingValue.from_value(int val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13CountingValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_val == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_from_value(int __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":3243
 *     @staticmethod
 *     def from_value(int val):
 *         created = CountingValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _Counting_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3244
 *     def from_value(int val):
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":3245
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3242
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3248
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingValue_2zero_raw[] = "CountingValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13CountingValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":3249
 *     @staticmethod
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(CountingPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3248
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3252
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingValue_4one_raw[] = "CountingValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13CountingValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":3253
 *     @staticmethod
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(CountingPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3252
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3256
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingValue_6zero[] = "CountingValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13CountingValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":3257
 *     @staticmethod
 *     def zero():
 *         return CountingValue().init(Counting_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *)((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1), CountingPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3256
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3260
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingValue_8one[] = "CountingValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13CountingValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":3261
 *     @staticmethod
 *     def one():
 *         return CountingValue().init(Counting_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(CountingValue self, CountingValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *)((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1), CountingPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3260
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3263
 *         return CountingValue().init(Counting_one())
 * 
 *     def __add__(CountingValue self, CountingValue other):             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_CountingValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_CountingValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_10__add__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":3264
 * 
 *     def __add__(CountingValue self, CountingValue other):
 *         return CountingValue().init(Counting_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3265
 *     def __add__(CountingValue self, CountingValue other):
 *         return CountingValue().init(Counting_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(CountingValue self, CountingValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *)((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1), CountingPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3263
 *         return CountingValue().init(Counting_one())
 * 
 *     def __add__(CountingValue self, CountingValue other):             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3267
 *                                                   other.thisval))
 * 
 *     def __mul__(CountingValue self, CountingValue other):             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_CountingValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_CountingValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":3268
 * 
 *     def __mul__(CountingValue self, CountingValue other):
 *         return CountingValue().init(Counting_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3269
 *     def __mul__(CountingValue self, CountingValue other):
 *         return CountingValue().init(Counting_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue *)((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_t_1), CountingPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3267
 *                                                   other.thisval))
 * 
 *     def __mul__(CountingValue self, CountingValue other):             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3272
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_CountingValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_CountingValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":3273
 *     property value:
 *         def __get__(self):
 *             return _Counting_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef int _Counting_to_cpp(int val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3272
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3275
 *             return _Counting_from_cpp(self.thisval)
 * 
 * cdef int _Counting_to_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static int __pyx_f_8pydecode_10potentials__Counting_to_cpp(int __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Counting_to_cpp", 0);

  /* "pydecode/potentials.pyx":3276
 * 
 * cdef int _Counting_to_cpp(int val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3275
 *             return _Counting_from_cpp(self.thisval)
 * 
 * cdef int _Counting_to_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3279
 * 
 * 
 * cdef _Counting_from_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Counting_from_cpp(int __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Counting_from_cpp", 0);

  /* "pydecode/potentials.pyx":3280
 * 
 * cdef _Counting_from_cpp(int val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class CountingChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3279
 * 
 * 
 * cdef _Counting_from_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3283
 * 
 * cdef class CountingChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingChart___init__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_13CountingChart___init__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":3284
 * cdef class CountingChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Counting             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Counting); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3285
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Counting
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CCountingChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":3286
 *         self.kind = Counting
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":3287
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CCountingChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<CountingPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":3283
 * 
 * cdef class CountingChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3289
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3290
 * 
 *     def __getitem__(self, Vertex node):
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3289
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3292
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3293
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":3294
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":3292
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3297
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.chart.chart())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13CountingChart_6as_array[] = "CountingChart.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingChart_6as_array(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_6as_array(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":3298
 * 
 *     def as_array(self):
 *         return _Countingvector_to_numpy(self.chart.chart())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Countingvector_to_numpy(__pyx_v_self->chart->chart()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3297
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.chart.chart())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3302
 * 
 * 
 * cdef _Countingvector_to_numpy(const vector[int] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

static PyObject *__pyx_f_8pydecode_10potentials__Countingvector_to_numpy(std::vector<int> const &__pyx_v_vec) {
  struct __pyx_array_obj *__pyx_v_my_array = 0;
  __Pyx_memviewslice __pyx_v_my_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Countingvector_to_numpy", 0);

  /* "pydecode/potentials.pyx":3304
 * cdef _Countingvector_to_numpy(const vector[int] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(int),
 *                    format="i",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_vec.size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3305
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 *                    itemsize=sizeof(int),             # <<<<<<<<<<<<<<
 *                    format="i",
 *                    mode="c", allocate_buffer=False)
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_s_i) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_mode, __pyx_n_s_c) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3307
 *                    itemsize=sizeof(int),
 *                    format="i",
 *                    mode="c", allocate_buffer=False)             # <<<<<<<<<<<<<<
 *     my_array.data = <char *> vec.data()
 *     cdef int [:] my_view = my_array
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3304
 * cdef _Countingvector_to_numpy(const vector[int] &vec):
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),             # <<<<<<<<<<<<<<
 *                    itemsize=sizeof(int),
 *                    format="i",
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_my_array = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3308
 *                    format="i",
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()             # <<<<<<<<<<<<<<
 *     cdef int [:] my_view = my_array
 *     return np.asarray(my_view)
 */
  __pyx_v_my_array->data = ((char *)__pyx_v_vec.data());

  /* "pydecode/potentials.pyx":3309
 *                    mode="c", allocate_buffer=False)
 *     my_array.data = <char *> vec.data()
 *     cdef int [:] my_view = my_array             # <<<<<<<<<<<<<<
 *     return np.asarray(my_view)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_int(((PyObject *)__pyx_v_my_array));
  if (unlikely(!__pyx_t_4.memview)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_my_view = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "pydecode/potentials.pyx":3310
 *     my_array.data = <char *> vec.data()
 *     cdef int [:] my_view = my_array
 *     return np.asarray(my_view)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_my_view, 1, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3302
 * 
 * 
 * cdef _Countingvector_to_numpy(const vector[int] &vec):             # <<<<<<<<<<<<<<
 *     cdef view.array my_array = \
 *         view.array(shape=(vec.size(),),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("pydecode.potentials._Countingvector_to_numpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_my_array);
  __PYX_XDEC_MEMVIEW(&__pyx_v_my_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3317
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":3318
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3317
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3320
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3321
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":3320
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3323
 *         del self.thisptr
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_18_CountingMarginals_init(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, Marginals<CountingPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3324
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3325
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3326
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3323
 *         del self.thisptr
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3328
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3329
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3330
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3331
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _Counting_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":3332
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":3333
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _Counting_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3334
 *         elif isinstance(obj, Vertex):
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3336
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":3338
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":3337
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Counting marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Counti, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":3336
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3328
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3341
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.thisptr.node_marginals())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18_CountingMarginals_6as_array[] = "_CountingMarginals.as_array(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals_6as_array(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_6as_array(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("as_array", 0);

  /* "pydecode/potentials.pyx":3342
 * 
 *     def as_array(self):
 *         return _Countingvector_to_numpy(self.thisptr.node_marginals())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Countingvector_to_numpy(__pyx_v_self->thisptr->node_marginals()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3341
 * 
 * 
 *     def as_array(self):             # <<<<<<<<<<<<<<
 *         return _Countingvector_to_numpy(self.thisptr.node_marginals())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3348
 * 
 * 
 *     def threshold(self, int semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18_CountingMarginals_8threshold[] = "_CountingMarginals.threshold(self, int semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_9threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  int __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __Pyx_PyInt_As_int(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals_8threshold(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self), ((int)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_8threshold(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, int __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":3352
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3353
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3348
 * 
 * 
 *     def threshold(self, int semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3364
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_inside[] = "Counting.inside(Hypergraph graph, CountingPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<CountingPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":3366
 *     def inside(Hypergraph graph,
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Counting(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3367
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 *         chart.chart = inside_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3369
 *         chart.chart = inside_Counting(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3364
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Counting.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3372
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_2outside[] = "Counting.outside(Hypergraph graph, CountingPotentials potentials, CountingChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_CountingChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<CountingPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":3375
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 *         cdef CountingChart out_chart = CountingChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Counting(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3376
 *                 CountingChart inside_chart):
 *         cdef CountingChart out_chart = CountingChart()
 *         out_chart.chart = outside_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3379
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3372
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Counting.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3384
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_4viterbi[] = "Counting.viterbi(Hypergraph graph, CountingPotentials potentials, CountingChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":3386
 *     def viterbi(Hypergraph graph,
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CCountingChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_CountingChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_CountingChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":3384
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart) {
  Chart<CountingPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<CountingPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":3389
 *         cdef CCountingChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":3390
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3391
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3393
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Counting(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<CountingPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":3394
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)
 *         viterbi_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3398
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":3399
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":3400
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":3401
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3384
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Counting.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3406
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_6compute_marginals[] = "Counting.compute_marginals(Hypergraph graph, CountingPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials) {
  Marginals<CountingPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":3409
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 *             Counting_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _CountingMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<CountingPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":3410
 *         cdef const CCountingMarginals *marginals = \
 *             Counting_compute(graph.thisptr, potentials.thisptr)
 *         return _CountingMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__CountingMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *)((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3406
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Counting.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3413
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_8prune_hypergraph[] = "Counting.prune_hypergraph(Hypergraph graph, CountingPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":3416
 *                          CountingPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3417
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3418
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3413
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Counting.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3439
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_14BoolPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_14BoolPotentials_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials___cinit__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_14BoolPotentials___cinit__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":3445
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_v_self->__pyx_base.hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3446
 *         """
 *         self.hypergraph = graph
 *         self.kind = Bool             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.kind);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.kind);
  __pyx_v_self->__pyx_base.kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3447
 *         self.hypergraph = graph
 *         self.kind = Bool
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3439
 *     """
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3449
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_14BoolPotentials_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_14BoolPotentials_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3450
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":3451
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, BoolPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3449
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3453
 *         self.thisptr = NULL
 * 
 *     def times(self, BoolPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_4times[] = "BoolPotentials.times(self, BoolPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_other) {
  HypergraphPotentials<BoolPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":3455
 *     def times(self, BoolPotentials other):
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":3456
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3453
 *         self.thisptr = NULL
 * 
 *     def times(self, BoolPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3458
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_6clone[] = "BoolPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":3459
 * 
 *     def clone(self):
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3460
 *     def clone(self):
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3458
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3462
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_8project[] = "BoolPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<BoolPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":3464
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":3465
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return BoolPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3462
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3467
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_10up_project[] = "BoolPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10potentials_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<BoolPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<BoolPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":3469
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return BoolPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<BoolPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":3471
 *             cmake_projected_potentials_Bool(self.thisptr,
 *                                                   projection.thisptr)
 *         return BoolPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3467
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3474
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":3475
 *     property bias:
 *         def __get__(self):
 *             return _Bool_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3474
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3504
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[bool] *potentials = \
 *             new vector[bool](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_12from_potentials[] = "BoolPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_13from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_12from_potentials(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_12from_potentials(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<bool> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<bool> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  bool __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<BoolPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":3506
 *     def from_potentials(self, other_potentials):
 *         cdef vector[bool] *potentials = \
 *             new vector[bool](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = new std::vector<bool>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":3508
 *             new vector[bool](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Bool_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":3509
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             deref(potentials)[i] = _Bool_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3509; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3514
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Bool_to_cpp(other_potentials.bias),             # <<<<<<<<<<<<<<
 *                                         False)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3512
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Bool_to_cpp(other_potentials.bias),
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<BoolPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_7), 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3511
 *             deref(potentials)[i] = _Bool_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":3517
 *                                         False)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3504
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[bool] *potentials = \
 *             new vector[bool](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3519
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias = self._bias(bias)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_14from_vector[] = "BoolPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3519; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_vector(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_vector(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  bool __pyx_v_my_bias;
  std::vector<bool> *__pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  std::vector<bool> *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  HypergraphPotentials<BoolPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":3520
 * 
 *     def from_vector(self, in_vec, bias=None):
 *         cdef bool my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[bool] *potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":3523
 * 
 *         cdef vector[bool] *potentials = \
 *             new vector[bool](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_5 = new std::vector<bool>(__pyx_v_self->__pyx_base.hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":3525
 *             new vector[bool](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             deref(potentials)[i] = _Bool_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_2 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pydecode/potentials.pyx":3526
 * 
 *         for i, v in enumerate(in_vec):
 *             deref(potentials)[i] = _Bool_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((*__pyx_v_potentials)[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3529
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         my_bias,
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<BoolPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3528
 *             deref(potentials)[i] = _Bool_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":3533
 *                                         my_bias,
 *                                         False)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3519
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias = self._bias(bias)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3535
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_16from_map[] = "BoolPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3535; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3535; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_map(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_map(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  bool __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<bool> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  std::vector<bool> __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  size_t __pyx_t_12;
  HypergraphPotentials<BoolPotential> *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":3536
 * 
 *     def from_map(self, in_map, bias=None):
 *         cdef bool my_bias = self._bias(bias)             # <<<<<<<<<<<<<<
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[bool] potentials = \
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_bias_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_bias);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_bias);
  __Pyx_GIVEREF(__pyx_v_bias);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_my_bias = __pyx_t_4;

  /* "pydecode/potentials.pyx":3539
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[bool] potentials = \
 *             vector[bool](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = std::vector<bool>(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_6;

  /* "pydecode/potentials.pyx":3541
 *             vector[bool](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Bool_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __pyx_t_2 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_5, &__pyx_t_1, &__pyx_t_9, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":3542
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Bool_to_cpp(v)
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_11]) = __pyx_t_10;

    /* "pydecode/potentials.pyx":3543
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Bool_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_12 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_12]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3546
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials,
 */
  try {
    __pyx_t_13 = HypergraphSparsePotentials<BoolPotential>::make_potentials(__pyx_v_self->__pyx_base.hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3545
 *             potentials[j] = _Bool_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_13;

  /* "pydecode/potentials.pyx":3550
 *                                         potentials,
 *                                         my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def _bias(self, bias):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3535
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias = self._bias(bias)
 *         cdef c_map.map[int, int] map_potentials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3552
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Bool_one()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_18_bias[] = "BoolPotentials._bias(self, bias)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_19_bias(PyObject *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bias (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_18_bias(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_bias));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_18_bias(CYTHON_UNUSED struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_bias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bias", 0);

  /* "pydecode/potentials.pyx":3553
 * 
 *     def _bias(self, bias):
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             return Bool_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3554
 *     def _bias(self, bias):
 *         if bias is None:
 *             return Bool_one()             # <<<<<<<<<<<<<<
 *         else:
 *             return _Bool_to_cpp(bias)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(BoolPotential::one()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3556
 *             return Bool_one()
 *         else:
 *             return _Bool_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_bias); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":3552
 *         return self
 * 
 *     def _bias(self, bias):             # <<<<<<<<<<<<<<
 *         if bias is None:
 *             return Bool_one()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials._bias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3561
 * 
 * 
 *     cdef init(self, CHypergraphBoolPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_14BoolPotentials_init(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, HypergraphPotentials<BoolPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3563
 *     cdef init(self, CHypergraphBoolPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3564
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":3565
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3561
 * 
 * 
 *     cdef init(self, CHypergraphBoolPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3567
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10potentials_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3568
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3567
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3570
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_22dot[] = "BoolPotentials.dot(self, Path path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10potentials_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":3574
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 *         """
 *         return _Bool_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3570
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Take the dot product with `path` :math:`\theta^{\top} y`.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3578
 * 
 * cdef class BoolValue:
 *     cdef BoolValue init(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_f_8pydecode_10potentials_9BoolValue_init(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self, bool __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3579
 * cdef class BoolValue:
 *     cdef BoolValue init(self, bool val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":3580
 *     cdef BoolValue init(self, bool val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3578
 * 
 * cdef class BoolValue:
 *     cdef BoolValue init(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3583
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9BoolValue_from_value[] = "BoolValue.from_value(bool val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9BoolValue_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_val == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_from_value(bool __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":3584
 *     @staticmethod
 *     def from_value(bool val):
 *         created = BoolValue()             # <<<<<<<<<<<<<<
 *         created.thisval = _Bool_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3585
 *     def from_value(bool val):
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":3586
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3583
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3589
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9BoolValue_2zero_raw[] = "BoolValue.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9BoolValue_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":3590
 *     @staticmethod
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(BoolPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3589
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3593
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9BoolValue_4one_raw[] = "BoolValue.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9BoolValue_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":3594
 *     @staticmethod
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(BoolPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3593
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3597
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9BoolValue_6zero[] = "BoolValue.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9BoolValue_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":3598
 *     @staticmethod
 *     def zero():
 *         return BoolValue().init(Bool_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *)((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1), BoolPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3597
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3601
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9BoolValue_8one[] = "BoolValue.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9BoolValue_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":3602
 *     @staticmethod
 *     def one():
 *         return BoolValue().init(Bool_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(BoolValue self, BoolValue other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *)((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1), BoolPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3601
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3604
 *         return BoolValue().init(Bool_one())
 * 
 *     def __add__(BoolValue self, BoolValue other):             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_BoolValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_BoolValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_10__add__(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_10__add__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":3605
 * 
 *     def __add__(BoolValue self, BoolValue other):
 *         return BoolValue().init(Bool_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3606
 *     def __add__(BoolValue self, BoolValue other):
 *         return BoolValue().init(Bool_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(BoolValue self, BoolValue other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *)((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1), BoolPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3604
 *         return BoolValue().init(Bool_one())
 * 
 *     def __add__(BoolValue self, BoolValue other):             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3608
 *                                                   other.thisval))
 * 
 *     def __mul__(BoolValue self, BoolValue other):             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials_BoolValue, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_BoolValue, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_12__mul__(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_12__mul__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":3609
 * 
 *     def __mul__(BoolValue self, BoolValue other):
 *         return BoolValue().init(Bool_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolValue)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3610
 *     def __mul__(BoolValue self, BoolValue other):
 *         return BoolValue().init(Bool_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue *)((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_t_1), BoolPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3608
 *                                                   other.thisval))
 * 
 *     def __mul__(BoolValue self, BoolValue other):             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3613
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolValue_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolValue_5value___get__(((struct __pyx_obj_8pydecode_10potentials_BoolValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolValue_5value___get__(struct __pyx_obj_8pydecode_10potentials_BoolValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":3614
 *     property value:
 *         def __get__(self):
 *             return _Bool_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef bool _Bool_to_cpp(bool val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3613
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolValue.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3616
 *             return _Bool_from_cpp(self.thisval)
 * 
 * cdef bool _Bool_to_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static bool __pyx_f_8pydecode_10potentials__Bool_to_cpp(bool __pyx_v_val) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Bool_to_cpp", 0);

  /* "pydecode/potentials.pyx":3617
 * 
 * cdef bool _Bool_to_cpp(bool val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3616
 *             return _Bool_from_cpp(self.thisval)
 * 
 * cdef bool _Bool_to_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3620
 * 
 * 
 * cdef _Bool_from_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Bool_from_cpp(bool __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Bool_from_cpp", 0);

  /* "pydecode/potentials.pyx":3621
 * 
 * cdef _Bool_from_cpp(bool val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class BoolChart(Chart):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3620
 * 
 * 
 * cdef _Bool_from_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3624
 * 
 * cdef class BoolChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolChart___init__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_9BoolChart___init__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":3625
 * cdef class BoolChart(Chart):
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Bool             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3626
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Bool
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CBoolChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":3627
 *         self.kind = Bool
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":3628
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CBoolChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
    __pyx_v_self->chart = new Chart<BoolPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":3624
 * 
 * cdef class BoolChart(Chart):
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3630
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3631
 * 
 *     def __getitem__(self, Vertex node):
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3630
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3633
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3634
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":3635
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":3633
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3645
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":3646
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":3645
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3648
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":3649
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":3648
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":3651
 *         del self.thisptr
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_14_BoolMarginals_init(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, Marginals<BoolPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3652
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3653
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3654
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3651
 *         del self.thisptr
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3656
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3657
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3658
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3659
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Vertex):
 *             return _Bool_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":3660
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10potentials_Vertex)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":3661
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Vertex):
 *             return _Bool_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":3662
 *         elif isinstance(obj, Vertex):
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3664
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":3666
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);

    /* "pydecode/potentials.pyx":3665
 *         else:
 *             raise HypergraphAccessException(
 *                 "Only nodes and edges have Bool marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Bool_m, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/potentials.pyx":3664
 *                 self.thisptr.marginal((<Vertex>obj).nodeptr))
 *         else:
 *             raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3656
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3673
 * 
 * 
 *     def threshold(self, bool semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14_BoolMarginals_6threshold[] = "_BoolMarginals.threshold(self, bool semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  bool __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __Pyx_PyObject_IsTrue(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3673; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self), ((bool)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, bool __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":3677
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3678
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3673
 * 
 * 
 *     def threshold(self, bool semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3689
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_inside[] = "Bool.inside(Hypergraph graph, BoolPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<BoolPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":3691
 *     def inside(Hypergraph graph,
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Bool(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3692
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 *         chart.chart = inside_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3694
 *         chart.chart = inside_Bool(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3689
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Bool.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3697
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_2outside[] = "Bool.outside(Hypergraph graph, BoolPotentials potentials, BoolChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_BoolChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<BoolPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":3700
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 *         cdef BoolChart out_chart = BoolChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Bool(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3701
 *                 BoolChart inside_chart):
 *         cdef BoolChart out_chart = BoolChart()
 *         out_chart.chart = outside_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":3704
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3697
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Bool.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3709
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_4viterbi[] = "Bool.viterbi(Hypergraph graph, BoolPotentials potentials, BoolChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":3711
 *     def viterbi(Hypergraph graph,
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CBoolChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_BoolChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_BoolChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":3709
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart) {
  Chart<BoolPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<BoolPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":3714
 *         cdef CBoolChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":3715
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":3716
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":3718
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Bool(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<BoolPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":3719
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)
 *         viterbi_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":3723
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":3724
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":3725
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":3726
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3709
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Bool.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3731
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_6compute_marginals[] = "Bool.compute_marginals(Hypergraph graph, BoolPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials) {
  Marginals<BoolPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":3734
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 *             Bool_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _BoolMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<BoolPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":3735
 *         cdef const CBoolMarginals *marginals = \
 *             Bool_compute(graph.thisptr, potentials.thisptr)
 *         return _BoolMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__BoolMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *)((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3731
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Bool.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3738
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_8prune_hypergraph[] = "Bool.prune_hypergraph(Hypergraph graph, BoolPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":3741
 *                          BoolPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3742
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3743
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3738
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Bool.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3768
 *     """
 * 
 *     cdef BackPointers init(self, CBackPointers *ptr,             # <<<<<<<<<<<<<<
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 */

static struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_f_8pydecode_10potentials_12BackPointers_init(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, BackPointers *__pyx_v_ptr, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":3770
 *     cdef BackPointers init(self, CBackPointers *ptr,
 *                            Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":3771
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":3772
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     property path:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3768
 *     """
 * 
 *     cdef BackPointers init(self, CBackPointers *ptr,             # <<<<<<<<<<<<<<
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3775
 * 
 *     property path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self) {
  Hyperpath *__pyx_v_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":3776
 *     property path:
 *         def __get__(self):
 *             cdef CHyperpath *path = self.thisptr.construct_path()             # <<<<<<<<<<<<<<
 *             return Path().init(path, self.graph)
 * 
 */
  __pyx_v_path = __pyx_v_self->thisptr->construct_path();

  /* "pydecode/potentials.pyx":3777
 *         def __get__(self):
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Vertex node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Path)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Path *)((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Path *)__pyx_t_1), __pyx_v_path, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3775
 * 
 *     property path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BackPointers.path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3779
 *             return Path().init(path, self.graph)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10potentials_Vertex, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_Vertex *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_Vertex *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":3780
 * 
 *     def __getitem__(self, Vertex node):
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     # def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_Edge *)((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_Edge *)__pyx_t_1), __pyx_v_self->thisptr->get(__pyx_v_node->nodeptr), ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3779
 *             return Path().init(path, self.graph)
 * 
 *     def __getitem__(self, Vertex node):             # <<<<<<<<<<<<<<
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BackPointers.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3787
 * 
 * 
 * def inside(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the inside values for potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_inside[] = "inside(Hypergraph graph, Potentials potentials)\n\n    Compute the inside values for potentials.\n\n    Parameters\n    ----------\n\n    graph : :py:class:`Hypergraph`\n      The hypergraph :math:`({\\cal V}, {\\cal E})` to search.\n\n    potentials : :py:class:`Potentials`\n      The potentials :math:`\\theta` to use for inside computations.\n\n    Returns\n    -------\n\n    chart : :py:class:`Chart`\n       The inside chart. Type depends on potentials type, i.e.\n       for inside potentials this will be the probability paths\n       reaching this node.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":3808
 *        reaching this node.
 *     """
 *     return potentials.kind.inside(graph, potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials->kind, __pyx_n_s_inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3787
 * 
 * 
 * def inside(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the inside values for potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3812
 * 
 * 
 * def outside(Hypergraph graph, Potentials potentials, Chart inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the outside values for potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_2outside[] = "outside(Hypergraph graph, Potentials potentials, Chart inside_chart)\n\n    Compute the outside values for potentials.\n\n    Parameters\n    -----------\n\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials :math:`\\theta` to use for outside computations.\n\n    inside_chart : :py:class:`Chart`\n       The associated inside chart. Compute by calling\n       :py:function:`inside`.  Must be the same type as potentials.\n\n    Returns\n    ---------\n\n    chart : :py:class:`Chart`\n       The outside chart. Type depends on potentials type, i.e. for\n       inside potentials this will be the probability paths reaching\n       this node.\n\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_Chart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_Chart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_inside_chart) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":3838
 * 
 *     """
 *     return potentials.kind.outside(graph, potentials, inside_chart)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials->kind, __pyx_n_s_outside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __Pyx_INCREF(((PyObject *)__pyx_v_inside_chart));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_inside_chart));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_inside_chart));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3812
 * 
 * 
 * def outside(Hypergraph graph, Potentials potentials, Chart inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the outside values for potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3841
 * 
 * 
 * def best_path(Hypergraph graph, Potentials potentials, Chart chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     Find the best path through a hypergraph for a given set of potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4best_path[] = "best_path(Hypergraph graph, Potentials potentials, Chart chart=None)\n\n    Find the best path through a hypergraph for a given set of potentials.\n\n    Formally gives\n    :math:`\\arg \\max_{y \\in {\\cal X}} \\theta^{\\top} x`\n    in the hypergraph.\n\n    Parameters\n    ----------\n\n    graph : :py:class:`Hypergraph`\n      The hypergraph :math:`({\\cal V}, {\\cal E})` to search.\n\n    potentials : :py:class:`Potentials`\n      The potentials :math:`\\theta` of the hypergraph.\n\n    chart : :py:class:`Chart`\n      A chart to be reused. For memory efficiency.\n\n    Returns\n    -------\n    path : :py:class:`Path`\n      The best path :math:`\\arg \\max_{y \\in {\\cal X}} \\theta^{\\top} x`.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5best_path = {__Pyx_NAMESTR("best_path"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5best_path, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4best_path)};
static PyObject *__pyx_pw_8pydecode_10potentials_5best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("best_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_Chart *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("best_path", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "best_path") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_Chart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("best_path", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_Chart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4best_path(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_Chart *__pyx_v_chart) {
  PyObject *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("best_path", 0);

  /* "pydecode/potentials.pyx":3866
 *       The best path :math:`\arg \max_{y \in {\cal X}} \theta^{\top} x`.
 *     """
 *     bp = potentials.kind.viterbi(graph, potentials, chart)             # <<<<<<<<<<<<<<
 *     return bp.path
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials->kind, __pyx_n_s_viterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_chart));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_chart));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bp = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":3867
 *     """
 *     bp = potentials.kind.viterbi(graph, potentials, chart)
 *     return bp.path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_bp, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3841
 * 
 * 
 * def best_path(Hypergraph graph, Potentials potentials, Chart chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     Find the best path through a hypergraph for a given set of potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3870
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     return prune(graph, potentials, thres)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6prune_hypergraph[] = "prune_hypergraph(Hypergraph graph, Potentials potentials, thres)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_thres = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_thres,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
    __pyx_v_thres = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_thres);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, PyObject *__pyx_v_thres) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":3871
 * 
 * def prune_hypergraph(Hypergraph graph, Potentials potentials, thres):
 *     return prune(graph, potentials, thres)             # <<<<<<<<<<<<<<
 * 
 * def prune(Hypergraph graph, Potentials potentials, thres):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_prune); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __Pyx_INCREF(__pyx_v_thres);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_thres);
  __Pyx_GIVEREF(__pyx_v_thres);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3870
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     return prune(graph, potentials, thres)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3873
 *     return prune(graph, potentials, thres)
 * 
 * def prune(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     Prune hyperedges with low marginal score from the hypergraph.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9prune(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8prune[] = "prune(Hypergraph graph, Potentials potentials, thres)\n\n    Prune hyperedges with low marginal score from the hypergraph.\n\n    Parameters\n    -----------\n\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials of the hypergraph.\n\n    thres : Potential\n       The potential threshold to use.\n\n    Returns\n    --------\n    map : :py:class:`HypergraphMap`\n       Map from original graph to new graph.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9prune = {__Pyx_NAMESTR("prune"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9prune, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8prune)};
static PyObject *__pyx_pw_8pydecode_10potentials_9prune(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_thres = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_thres,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
    __pyx_v_thres = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8prune(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_thres);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8prune(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials, PyObject *__pyx_v_thres) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune", 0);

  /* "pydecode/potentials.pyx":3894
 *        Map from original graph to new graph.
 *     """
 *     return potentials.kind.prune_hypergraph(graph, potentials, thres)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials->kind, __pyx_n_s_prune_hypergraph); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __Pyx_INCREF(__pyx_v_thres);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_thres);
  __Pyx_GIVEREF(__pyx_v_thres);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3873
 *     return prune(graph, potentials, thres)
 * 
 * def prune(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     Prune hyperedges with low marginal score from the hypergraph.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.prune", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3897
 * 
 * 
 * def compute_marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     return marginals(graph, potentials)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10compute_marginals[] = "compute_marginals(Hypergraph graph, Potentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_11compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":3898
 * 
 * def compute_marginals(Hypergraph graph, Potentials potentials):
 *     return marginals(graph, potentials)             # <<<<<<<<<<<<<<
 * 
 * def marginals(Hypergraph graph, Potentials potentials):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3897
 * 
 * 
 * def compute_marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     return marginals(graph, potentials)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3900
 *     return marginals(graph, potentials)
 * 
 * def marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute marginals for hypergraph and potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12marginals[] = "marginals(Hypergraph graph, Potentials potentials)\n\n    Compute marginals for hypergraph and potentials.\n\n    Parameters\n    -----------\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials of the hypergraph.\n\n    Returns\n    --------\n    marginals : :py:class:`Marginals`\n       The node and edge marginals associated with these potentials.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13marginals = {__Pyx_NAMESTR("marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_13marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_Potentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_Potentials *__pyx_v_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("marginals", 0);

  /* "pydecode/potentials.pyx":3917
 *        The node and edge marginals associated with these potentials.
 *     """
 *     return potentials.kind.compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 * 
 * inside_values = inside
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials->kind, __pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3900
 *     return marginals(graph, potentials)
 * 
 * def marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute marginals for hypergraph and potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3923
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15make_pruning_projections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14make_pruning_projections[] = "make_pruning_projections(Hypergraph graph, BoolPotentials filt)\n\n    DEPRECATED\n\n    Use project.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15make_pruning_projections = {__Pyx_NAMESTR("make_pruning_projections"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15make_pruning_projections, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14make_pruning_projections)};
static PyObject *__pyx_pw_8pydecode_10potentials_15make_pruning_projections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_pruning_projections (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_filt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_pruning_projections", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_pruning_projections") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_filt = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_pruning_projections", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.make_pruning_projections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filt), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "filt", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14make_pruning_projections(__pyx_self, __pyx_v_graph, __pyx_v_filt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14make_pruning_projections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt) {
  HypergraphMap const *__pyx_v_projection;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_pruning_projections", 0);

  /* "pydecode/potentials.pyx":3930
 *     """
 *     cdef const CHypergraphMap *projection = \
 *         cproject_hypergraph(graph.thisptr,             # <<<<<<<<<<<<<<
 *                             deref(filt.thisptr))
 *     return HypergraphMap().init(projection, graph, None)
 */
  __pyx_v_projection = project_hypergraph(__pyx_v_graph->thisptr, (*__pyx_v_filt->thisptr));

  /* "pydecode/potentials.pyx":3932
 *         cproject_hypergraph(graph.thisptr,
 *                             deref(filt.thisptr))
 *     return HypergraphMap().init(projection, graph, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *)((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1), __pyx_v_projection, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3923
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.make_pruning_projections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3935
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Project a graph based on a set of boolean potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17project(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16project[] = "project(Hypergraph graph, BoolPotentials filter)\n\n    Project a graph based on a set of boolean potentials.\n\n    Edges with value 0 are pruned, edges with value\n    1 are pruned if they are no longer in a path.\n\n    Parameters\n    -----------\n    graph : Hypergraph\n\n    filter : BoolPotentials\n        The pruning filter to use.\n\n    Returns\n    --------\n    map : HypergraphMap\n        A map from the original graph to the new graph produced.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17project = {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16project)};
static PyObject *__pyx_pw_8pydecode_10potentials_17project(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_filter,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_filter = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filter), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "filter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16project(__pyx_self, __pyx_v_graph, __pyx_v_filter);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16project(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":3954
 *         A map from the original graph to the new graph produced.
 *     """
 *     return make_pruning_projections(graph, filter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_filter));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_filter));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filter));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3954; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3935
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Project a graph based on a set of boolean potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3957
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_19binarize(PyObject *__pyx_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18binarize[] = "binarize(Hypergraph graph)\n\n    Binarize a hypergraph by making all k-ary edges right branching.\n\n    Parameters\n    ----------\n    graph : Hypergraph\n\n    Returns\n    --------\n    map : HypergraphMap\n        A map from the original graph to the binary branching graph.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_19binarize = {__Pyx_NAMESTR("binarize"), (PyCFunction)__pyx_pw_8pydecode_10potentials_19binarize, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18binarize)};
static PyObject *__pyx_pw_8pydecode_10potentials_19binarize(PyObject *__pyx_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("binarize (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18binarize(__pyx_self, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18binarize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph) {
  HypergraphMap *__pyx_v_hypergraph_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("binarize", 0);

  /* "pydecode/potentials.pyx":3970
 *         A map from the original graph to the binary branching graph.
 *     """
 *     cdef CHypergraphMap *hypergraph_map = cbinarize(graph.thisptr)             # <<<<<<<<<<<<<<
 *     return HypergraphMap().init(hypergraph_map, graph, None)
 * 
 */
  __pyx_v_hypergraph_map = binarize(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":3971
 *     """
 *     cdef CHypergraphMap *hypergraph_map = cbinarize(graph.thisptr)
 *     return HypergraphMap().init(hypergraph_map, graph, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *)((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1), __pyx_v_hypergraph_map, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3957
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.binarize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3974
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_21pairwise_dot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20pairwise_dot[] = "pairwise_dot(SparseVectorPotentials potentials, vec, LogViterbiPotentials weights)\n\n    DEPRECATED.\n\n    1) Take the dot produce of each element of potentials and vector.\n    2) Add this value to each element of weights.\n\n    Parameters\n    -----------\n    potentials: SparseVectorPotentials\n        A vector associated with each edge.\n\n    vec: list-like\n        A float vector\n\n    weights: LogViterbiPotentials\n        A mutable set of potentials.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_21pairwise_dot = {__Pyx_NAMESTR("pairwise_dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_21pairwise_dot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20pairwise_dot)};
static PyObject *__pyx_pw_8pydecode_10potentials_21pairwise_dot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_vec = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pairwise_dot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_potentials,&__pyx_n_s_vec,&__pyx_n_s_weights,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pairwise_dot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[0]);
    __pyx_v_vec = values[1];
    __pyx_v_weights = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.pairwise_dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20pairwise_dot(__pyx_self, __pyx_v_potentials, __pyx_v_vec, __pyx_v_weights);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20pairwise_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_vec, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights) {
  std::vector<double> __pyx_v_rvec;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pairwise_dot", 0);

  /* "pydecode/potentials.pyx":3994
 *         A mutable set of potentials.
 *     """
 *     cdef vector[double] rvec = vector[double]()             # <<<<<<<<<<<<<<
 *     for i in vec:
 *         rvec.push_back(<double>i)
 */
  try {
    __pyx_t_1 = std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rvec = __pyx_t_1;

  /* "pydecode/potentials.pyx":3995
 *     """
 *     cdef vector[double] rvec = vector[double]()
 *     for i in vec:             # <<<<<<<<<<<<<<
 *         rvec.push_back(<double>i)
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 */
  if (PyList_CheckExact(__pyx_v_vec) || PyTuple_CheckExact(__pyx_v_vec)) {
    __pyx_t_2 = __pyx_v_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pydecode/potentials.pyx":3996
 *     cdef vector[double] rvec = vector[double]()
 *     for i in vec:
 *         rvec.push_back(<double>i)             # <<<<<<<<<<<<<<
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_i); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_rvec.push_back(((double)__pyx_t_6));
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3997
 *     for i in vec:
 *         rvec.push_back(<double>i)
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)             # <<<<<<<<<<<<<<
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,
 */
  pairwise_dot((*__pyx_v_potentials->thisptr), __pyx_v_rvec, __pyx_v_weights->thisptr);

  /* "pydecode/potentials.pyx":3974
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.pairwise_dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":3999
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_23extend_hypergraph_by_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22extend_hypergraph_by_count[] = "extend_hypergraph_by_count(Hypergraph graph, CountingPotentials potentials, int lower_limit, int upper_limit, int goal)\n\n    DEPRECATED\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_23extend_hypergraph_by_count = {__Pyx_NAMESTR("extend_hypergraph_by_count"), (PyCFunction)__pyx_pw_8pydecode_10potentials_23extend_hypergraph_by_count, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22extend_hypergraph_by_count)};
static PyObject *__pyx_pw_8pydecode_10potentials_23extend_hypergraph_by_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_v_lower_limit;
  int __pyx_v_upper_limit;
  int __pyx_v_goal;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend_hypergraph_by_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_lower_limit,&__pyx_n_s_upper_limit,&__pyx_n_s_goal,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lower_limit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper_limit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_goal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extend_hypergraph_by_count") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_lower_limit = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_lower_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4001; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_upper_limit = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_upper_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4002; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_goal = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_goal == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4003; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.extend_hypergraph_by_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10potentials_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22extend_hypergraph_by_count(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_lower_limit, __pyx_v_upper_limit, __pyx_v_goal);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22extend_hypergraph_by_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, int __pyx_v_lower_limit, int __pyx_v_upper_limit, int __pyx_v_goal) {
  HypergraphMap *__pyx_v_projection;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_hypergraph_by_count", 0);

  /* "pydecode/potentials.pyx":4009
 * 
 *     cdef CHypergraphMap *projection = \
 *         cextend_hypergraph_by_count(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                     deref(potentials.thisptr),
 *                                     lower_limit,
 */
  __pyx_v_projection = extend_hypergraph_by_count(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_lower_limit, __pyx_v_upper_limit, __pyx_v_goal);

  /* "pydecode/potentials.pyx":4015
 *                                     goal)
 * 
 *     return HypergraphMap().init(projection, None, graph)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap *)((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)__pyx_t_1), __pyx_v_projection, ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None), __pyx_v_graph)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":3999
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.extend_hypergraph_by_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d_3;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_6) {
      __pyx_t_7 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_6) {
        __pyx_t_8 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {

      /* "View.MemoryView":117
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_array_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":123
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":124
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":126
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":127
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":129
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":130
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(format, unicode):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":132
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if isinstance(format, unicode):             # <<<<<<<<<<<<<<
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_format); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":133
 * 
 *         if isinstance(format, unicode):
 *             format = (<unicode>format).encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    if (unlikely(__pyx_v_format == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "encode");
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = PyUnicode_AsASCIIString(((PyObject*)__pyx_v_format)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "View.MemoryView":134
 *         if isinstance(format, unicode):
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":135
 *             format = (<unicode>format).encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_self->_format); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->format = __pyx_t_5;

  /* "View.MemoryView":138
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyMem_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":139
 * 
 *         self._shape = <Py_ssize_t *> PyMem_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":141
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":142
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":145
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_6 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":146
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":147
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_7 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":148
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":151
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":152
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":153
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;
    goto __pyx_L10;
  }

  /* "View.MemoryView":154
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":155
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":156
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "View.MemoryView":158
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L10:;

  /* "View.MemoryView":160
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":163
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":164
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":165
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":168
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":169
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":170
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":172
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":173
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":174
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && unlikely(__pyx_v_itemsize == -1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_1; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "View.MemoryView":175
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":176
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }
      goto __pyx_L13;
    }
    __pyx_L13:;
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "View.MemoryView":116
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":179
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array_getbuffer_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array_getbuffer_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":180
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":181
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":182
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);
    goto __pyx_L3;
  }

  /* "View.MemoryView":183
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":184
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":185
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":186
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":187
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":188
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":189
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":190
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":191
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":192
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":193
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":194
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":196
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":197
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "View.MemoryView":199
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":201
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":179
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":205
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":206
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":207
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);
    goto __pyx_L3;
  }

  /* "View.MemoryView":208
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":209
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":210
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "View.MemoryView":212
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyMem_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":213
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyMem_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     property memview:
 */
  PyMem_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":205
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":217
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

/* Python wrapper */
static PyObject *get_memview(PyObject *__pyx_v_self); /*proto*/
static PyObject *get_memview(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = get_memview_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *get_memview_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":219
 *         def __get__(self):
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *             return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":220
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *             return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":217
 *     property memview:
 *         @cname('get_memview')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 * 
 *             flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":223
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array_MemoryView_5array_6__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array_MemoryView_5array_6__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":224
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array_MemoryView_5array_8__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array_MemoryView_5array_8__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":227
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array_MemoryView_5array_10__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array_MemoryView_5array_10__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":230
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":229
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":238
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":239
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":241
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":242
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":241
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_array_type)), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":243
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":245
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":234
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":271
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":272
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":271
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":273
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":274
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":273
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":288
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":290
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":294
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":296
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":297
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":299
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview')
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":288
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":317
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":318
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":319
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":320
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_1 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)((PyObject *)__pyx_memoryview_type)));
  if (!(__pyx_t_1 != 0)) {
    __pyx_t_2 = (__pyx_v_obj != Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
  } else {
    __pyx_t_3 = (__pyx_t_1 != 0);
  }
  if (__pyx_t_3) {

    /* "View.MemoryView":321
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":322
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_3 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":323
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":324
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         self.lock = PyThread_allocate_lock()
 */
      Py_INCREF(Py_None);
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":326
 *                 Py_INCREF(Py_None)
 * 
 *         self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         if self.lock == NULL:
 *             raise MemoryError
 */
  __pyx_v_self->lock = PyThread_allocate_lock();

  /* "View.MemoryView":327
 * 
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_3 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":328
 *         self.lock = PyThread_allocate_lock()
 *         if self.lock == NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":330
 *             raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":331
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = self.view.format == b'O'             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_self->dtype_is_object = __pyx_t_3;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "View.MemoryView":333
 *             self.dtype_is_object = self.view.format == b'O'
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L6:;

  /* "View.MemoryView":335
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":337
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":317
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":339
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":340
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":341
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         if self.lock != NULL:
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":343
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             PyThread_free_lock(self.lock)
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":344
 * 
 *         if self.lock != NULL:
 *             PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
    PyThread_free_lock(__pyx_v_self->lock);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "View.MemoryView":339
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":346
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":348
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":350
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (PyList_CheckExact(__pyx_v_index) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":351
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_7;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":353
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":346
 *             PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":356
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":357
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":358
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;
  }

  /* "View.MemoryView":360
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":363
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "View.MemoryView":364
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":366
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":367
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":356
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":369
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":370
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":372
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "View.MemoryView":373
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":374
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_4) {

      /* "View.MemoryView":375
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "View.MemoryView":377
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
      __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":379
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":369
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":381
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":382
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject *)__pyx_memoryview_type)); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":384
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":385
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":384
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L4_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":386
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L6_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":387
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_None);
        __pyx_r = Py_None;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L11_try_end:;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":389
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":381
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":391
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":395
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":396
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":397
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":395
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":391
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":399
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[128];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":401
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":406
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":408
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":409
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":410
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":411
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "View.MemoryView":412
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":414
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":416
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":417
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":418
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);
      goto __pyx_L8;
    }
    /*else*/ {

      /* "View.MemoryView":420
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":424
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "View.MemoryView":426
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":429
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    /*exception exit:*/{
      __pyx_L6_error:;
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":399
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":432
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":433
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":431
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":435
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":438
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":441
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":442
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":443
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_bytesitem);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_bytesitem);
      __Pyx_GIVEREF(__pyx_v_bytesitem);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_result = __pyx_t_5;
      __pyx_t_5 = 0;
    }
    /*else:*/ {

      /* "View.MemoryView":447
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      __pyx_t_7 = strlen(__pyx_v_self->view.format); 
      __pyx_t_8 = ((__pyx_t_7 == 1) != 0);
      if (__pyx_t_8) {

        /* "View.MemoryView":448
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L6_except_return;
      }

      /* "View.MemoryView":449
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "View.MemoryView":444
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyErr_ExceptionMatches(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_9) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":445
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L10_try_end:;
  }

  /* "View.MemoryView":435
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  char *__pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":454
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":459
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":460
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":462
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":464
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_8 = __pyx_v_bytesvalue;
  __pyx_t_10 = PyBytes_AS_STRING(__pyx_t_8);
  __pyx_t_11 = (__pyx_t_10 + PyBytes_GET_SIZE(__pyx_t_8));
  for (__pyx_t_12 = __pyx_t_10; __pyx_t_12 < __pyx_t_11; __pyx_t_12++) {
    __pyx_t_9 = __pyx_t_12;
    __pyx_v_c = (__pyx_t_9[0]);

    /* "View.MemoryView":465
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":464
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":465
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "View.MemoryView":451
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":468
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_getbuffer_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview_getbuffer_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  char *__pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "View.MemoryView":469
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":470
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_2;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":472
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
    __pyx_v_info->shape = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":474
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":475
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_2;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "View.MemoryView":477
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
    __pyx_v_info->strides = NULL;
  }
  __pyx_L4:;

  /* "View.MemoryView":479
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":480
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_2 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_2;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "View.MemoryView":482
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":484
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":485
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_3;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "View.MemoryView":487
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
    __pyx_v_info->format = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":489
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_4 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":490
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_5 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_5;

  /* "View.MemoryView":491
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = 0
 */
  __pyx_t_6 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_6;

  /* "View.MemoryView":492
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.obj = self
 */
  __pyx_t_6 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_6;

  /* "View.MemoryView":493
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":494
 *         info.len = self.view.len
 *         info.readonly = 0
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":468
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape
 */

  /* function exit code */
  __pyx_r = 0;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_transpose(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_transpose_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_transpose_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":502
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *             transpose_memslice(&result.from_slice)
 *             return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":503
 *         def __get__(self):
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":504
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":501
 *     property T:
 *         @cname('__pyx_memoryview_transpose')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef _memoryviewslice result = memoryview_copy(self)
 *             transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":508
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview__get__base_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview__get__base_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":509
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):
 *             return self.obj             # <<<<<<<<<<<<<<
 * 
 *     property shape:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":508
 *     property base:
 *         @cname('__pyx_memoryview__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":513
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([self.view.shape[i] for i in xrange(self.view.ndim)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_shape(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_shape_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_shape_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":514
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):
 *             return tuple([self.view.shape[i] for i in xrange(self.view.ndim)])             # <<<<<<<<<<<<<<
 * 
 *     property strides:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_self->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_self->view.shape[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":513
 *     property shape:
 *         @cname('__pyx_memoryview_get_shape')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return tuple([self.view.shape[i] for i in xrange(self.view.ndim)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_strides(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_strides_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_strides_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":519
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):
 *             if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *                 raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":521
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([self.view.strides[i] for i in xrange(self.view.ndim)])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":523
 *                 raise ValueError("Buffer view does not expose strides")
 * 
 *             return tuple([self.view.strides[i] for i in xrange(self.view.ndim)])             # <<<<<<<<<<<<<<
 * 
 *     property suboffsets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_self->view.ndim;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->view.strides[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":518
 *     property strides:
 *         @cname('__pyx_memoryview_get_strides')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":527
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return [-1] * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_suboffsets(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_suboffsets_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_suboffsets_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":528
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *                 return [-1] * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":529
 *         def __get__(self):
 *             if self.view.suboffsets == NULL:
 *                 return [-1] * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *             return tuple([self.view.suboffsets[i] for i in xrange(self.view.ndim)])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->view.ndim<0) ? 0:__pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_self->view.ndim; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_neg_1);
        PyList_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_int_neg_1);
        __Pyx_GIVEREF(__pyx_int_neg_1);
      }
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":531
 *                 return [-1] * self.view.ndim
 * 
 *             return tuple([self.view.suboffsets[i] for i in xrange(self.view.ndim)])             # <<<<<<<<<<<<<<
 * 
 *     property ndim:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_v_self->view.ndim;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->view.suboffsets[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":527
 *     property suboffsets:
 *         @cname('__pyx_memoryview_get_suboffsets')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.view.suboffsets == NULL:
 *                 return [-1] * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":535
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_ndim(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_ndim_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_ndim_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":536
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):
 *             return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     property itemsize:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":535
 *     property ndim:
 *         @cname('__pyx_memoryview_get_ndim')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":540
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_itemsize(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_itemsize_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_itemsize_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":541
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):
 *             return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property nbytes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":540
 *     property itemsize:
 *         @cname('__pyx_memoryview_get_itemsize')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":545
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_nbytes(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_nbytes_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_nbytes_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":546
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):
 *             return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":545
 *     property nbytes:
 *         @cname('__pyx_memoryview_get_nbytes')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":550
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview_get_size(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_get_size_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_get_size_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":551
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):
 *             if self._size is None:             # <<<<<<<<<<<<<<
 *                 result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":552
 *         def __get__(self):
 *             if self._size is None:
 *                 result = 1             # <<<<<<<<<<<<<<
 * 
 *                 for length in self.shape:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":554
 *                 result = 1
 * 
 *                 for length in self.shape:             # <<<<<<<<<<<<<<
 *                     result *= length
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "View.MemoryView":555
 * 
 *                 for length in self.shape:
 *                     result *= length             # <<<<<<<<<<<<<<
 * 
 *                 self._size = result
 */
      __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "View.MemoryView":557
 *                     result *= length
 * 
 *                 self._size = result             # <<<<<<<<<<<<<<
 * 
 *             return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":559
 *                 self._size = result
 * 
 *             return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":550
 *     property size:
 *         @cname('__pyx_memoryview_get_size')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._size is None:
 *                 result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":562
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":563
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;
  }

  /* "View.MemoryView":565
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":561
 *             return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":568
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":569
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_id, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":568
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":572
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":578
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":579
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":581
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":584
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":585
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice, 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig(__pyx_v_mslice, 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":581
 *         return slice_is_contig(mslice, 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":587
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":589
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":591
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":592
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), __pyx_k_c, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":597
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":587
 *         return slice_is_contig(mslice, 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":599
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":601
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":603
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":604
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), __pyx_k_fortran, __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":609
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":599
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":614
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryview_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":615
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":616
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":613
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":620
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, ((PyObject *)__pyx_memoryview_type)); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":622
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":627
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":628
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":630
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":632
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":633
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":634
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":635
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_tup) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":636
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":637
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":638
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_9 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_t_7);
            PyList_SET_ITEM(__pyx_t_9, __pyx_temp, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_7);
          }
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "View.MemoryView":639
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;
        goto __pyx_L7;
      }
      /*else*/ {

        /* "View.MemoryView":641
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
        __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_9); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_L7:;

      /* "View.MemoryView":642
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "View.MemoryView":644
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      __pyx_t_1 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
      if (__pyx_t_2) {
        __pyx_t_1 = ((!(__Pyx_PyIndex_Check(__pyx_v_item) != 0)) != 0);
        __pyx_t_11 = __pyx_t_1;
      } else {
        __pyx_t_11 = __pyx_t_2;
      }
      if (__pyx_t_11) {

        /* "View.MemoryView":645
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        {__pyx_filename = __pyx_f[2]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "View.MemoryView":647
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      if (!__pyx_v_have_slices) {
        __pyx_t_11 = PySlice_Check(__pyx_v_item); 
        __pyx_t_2 = __pyx_t_11;
      } else {
        __pyx_t_2 = __pyx_v_have_slices;
      }
      __pyx_v_have_slices = __pyx_t_2;

      /* "View.MemoryView":648
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":650
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":651
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_2 = (__pyx_v_nslices != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":652
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PySlice_Type))), __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_3);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_4); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "View.MemoryView":654
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __pyx_t_9 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_9 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":622
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":656
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(ndim):
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":658
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     cdef int i
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if suboffsets[i] >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":659
 *     cdef int i
 *     for i in range(ndim):
 *         if suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_3 = (((__pyx_v_suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":660
 *     for i in range(ndim):
 *         if suboffsets[i] >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }

  /* "View.MemoryView":656
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(ndim):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":667
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":668
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":675
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst)));

  /* "View.MemoryView":679
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "View.MemoryView":681
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":682
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":683
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":685
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":686
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":692
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":693
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":698
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":699
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":703
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (PyList_CheckExact(__pyx_v_indices) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":704
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (__Pyx_PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":708
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":705
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }

    /* "View.MemoryView":711
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":712
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":713
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":714
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1;

      /* "View.MemoryView":715
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
      goto __pyx_L6;
    }
    /*else*/ {

      /* "View.MemoryView":717
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_12 = __pyx_int_0;
      } else {
        __pyx_t_12 = __pyx_t_9;
        __pyx_t_9 = 0;
      }
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":718
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_9 = __pyx_int_0;
      } else {
        __pyx_t_9 = __pyx_t_12;
        __pyx_t_12 = 0;
      }
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":719
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_12 = __pyx_int_0;
      } else {
        __pyx_t_12 = __pyx_t_9;
        __pyx_t_9 = 0;
      }
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":721
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = (__pyx_t_12 != Py_None);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":722
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = (__pyx_t_12 != Py_None);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":723
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_1 = (__pyx_t_12 != Py_None);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":725
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "View.MemoryView":731
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":733
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":734
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":735
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":736
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

    /* "View.MemoryView":734
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":739
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":740
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":739
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":667
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":764
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":784
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":786
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":787
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "View.MemoryView":788
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":789
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":792
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
    __pyx_t_2 = (__pyx_v_have_step != 0);
    if (__pyx_t_2) {
      __pyx_t_1 = (__pyx_v_step < 0);
      __pyx_t_4 = __pyx_t_1;
    } else {
      __pyx_t_4 = __pyx_t_2;
    }
    __pyx_v_negative_step = __pyx_t_4;

    /* "View.MemoryView":794
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    if ((__pyx_v_have_step != 0)) {
      __pyx_t_4 = (__pyx_v_step == 0);
      __pyx_t_2 = __pyx_t_4;
    } else {
      __pyx_t_2 = (__pyx_v_have_step != 0);
    }
    if (__pyx_t_2) {

      /* "View.MemoryView":795
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "View.MemoryView":798
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":799
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":800
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":801
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":802
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;
          goto __pyx_L9;
        }
        __pyx_L9:;
        goto __pyx_L8;
      }

      /* "View.MemoryView":803
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":804
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":805
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);
          goto __pyx_L10;
        }
        /*else*/ {

          /* "View.MemoryView":807
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L10:;
        goto __pyx_L8;
      }
      __pyx_L8:;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "View.MemoryView":809
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":810
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);
        goto __pyx_L11;
      }
      /*else*/ {

        /* "View.MemoryView":812
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
        __pyx_v_start = 0;
      }
      __pyx_L11:;
    }
    __pyx_L7:;

    /* "View.MemoryView":814
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":815
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":816
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":817
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":818
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;
          goto __pyx_L14;
        }
        __pyx_L14:;
        goto __pyx_L13;
      }

      /* "View.MemoryView":819
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":820
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;
        goto __pyx_L13;
      }
      __pyx_L13:;
      goto __pyx_L12;
    }
    /*else*/ {

      /* "View.MemoryView":822
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":823
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "View.MemoryView":825
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L15:;
    }
    __pyx_L12:;

    /* "View.MemoryView":827
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":828
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;
      goto __pyx_L16;
    }
    __pyx_L16:;

    /* "View.MemoryView":832
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":834
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":835
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);
      goto __pyx_L17;
    }
    __pyx_L17:;

    /* "View.MemoryView":837
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;
      goto __pyx_L18;
    }
    __pyx_L18:;

    /* "View.MemoryView":841
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":842
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":843
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":846
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":847
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));
    goto __pyx_L19;
  }
  /*else*/ {

    /* "View.MemoryView":849
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L19:;

  /* "View.MemoryView":851
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":852
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":853
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":854
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);
        goto __pyx_L22;
      }
      /*else*/ {

        /* "View.MemoryView":856
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, __pyx_k_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L22:;
      goto __pyx_L21;
    }
    /*else*/ {

      /* "View.MemoryView":859
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L21:;
    goto __pyx_L20;
  }
  __pyx_L20:;

  /* "View.MemoryView":861
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":764
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":867
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":869
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1;

  /* "View.MemoryView":870
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":873
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":874
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && unlikely(__pyx_v_itemsize == -1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":875
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":877
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":878
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":879
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);
      goto __pyx_L4;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "View.MemoryView":882
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":883
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":884
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":885
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "View.MemoryView":887
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":888
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":890
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":891
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "View.MemoryView":894
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":867
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":900
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":901
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":903
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":904
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":908
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":909
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":910
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_4 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_4;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":911
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_4 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_4;

    /* "View.MemoryView":913
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_6 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_6) {
      __pyx_t_7 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
      __pyx_t_8 = __pyx_t_7;
    } else {
      __pyx_t_8 = __pyx_t_6;
    }
    if (__pyx_t_8) {

      /* "View.MemoryView":914
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, __pyx_k_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "View.MemoryView":916
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":900
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":933
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":934
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":933
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":936
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":937
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":938
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":940
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_vtabptr_memoryview->convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":936
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":942
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":943
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":944
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":946
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     property base:
 */
    __pyx_t_3 = __pyx_vtabptr_memoryview->assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":942
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":950
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryviewslice__get__base(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_memoryviewslice__get__base_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryviewslice__get__base_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":951
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):
 *             return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":950
 *     property base:
 *         @cname('__pyx_memoryviewslice__get__base')
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":957
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":966
 *     cdef int i
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":967
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "View.MemoryView":972
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_memoryviewslice_type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":974
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":975
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":977
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":978
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":980
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":981
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":982
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":983
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":984
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     result.flags = PyBUF_RECORDS
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":986
 *     Py_INCREF(Py_None)
 * 
 *     result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

  /* "View.MemoryView":988
 *     result.flags = PyBUF_RECORDS
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 *     result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":989
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 *     result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":990
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 *     result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
  __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

  /* "View.MemoryView":992
 *     result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         result.view.len *= result.view.shape[i]
 */
  __pyx_t_6 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_6;

  /* "View.MemoryView":993
 * 
 *     result.view.len = result.view.itemsize
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         result.view.len *= result.view.shape[i]
 * 
 */
  __pyx_t_7 = __pyx_v_ndim;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "View.MemoryView":994
 *     result.view.len = result.view.itemsize
 *     for i in range(ndim):
 *         result.view.len *= result.view.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_v_result->__pyx_base.view.len = (__pyx_v_result->__pyx_base.view.len * (__pyx_v_result->__pyx_base.view.shape[__pyx_v_i]));
  }

  /* "View.MemoryView":996
 *         result.view.len *= result.view.shape[i]
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":997
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":999
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":957
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1002
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1005
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1006
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1007
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1009
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1010
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1002
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1013
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1017
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1018
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1019
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1021
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1022
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1024
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_dim = __pyx_t_3;

    /* "View.MemoryView":1025
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         if suboffsets == NULL:
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1026
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         if suboffsets == NULL:
 *             dst.suboffsets[dim] = -1
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1027
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         if suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             dst.suboffsets[dim] = -1
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_suboffsets == NULL) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1028
 *         dst.strides[dim] = strides[dim]
 *         if suboffsets == NULL:
 *             dst.suboffsets[dim] = -1             # <<<<<<<<<<<<<<
 *         else:
 *             dst.suboffsets[dim] = suboffsets[dim]
 */
      (__pyx_v_dst->suboffsets[__pyx_v_dim]) = -1;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "View.MemoryView":1030
 *             dst.suboffsets[dim] = -1
 *         else:
 *             dst.suboffsets[dim] = suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
      (__pyx_v_dst->suboffsets[__pyx_v_dim]) = (__pyx_v_suboffsets[__pyx_v_dim]);
    }
    __pyx_L5:;
  }

  /* "View.MemoryView":1013
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1033
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1036
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1037
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1033
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1040
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1047
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), ((PyObject *)__pyx_memoryviewslice_type)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1048
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1049
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1051
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1052
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1054
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1056
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1040
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1062
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1063
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1064
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1066
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1062
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1069
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1074
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1075
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1077
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1078
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1079
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1080
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1082
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1083
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1084
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1085
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1087
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1088
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;
  }
  /*else*/ {

    /* "View.MemoryView":1090
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1069
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1093
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1100
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1101
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1102
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1103
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1105
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1106
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_1 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1107
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
        __pyx_t_3 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
        if (__pyx_t_3) {
          __pyx_t_3 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
        }
        __pyx_t_4 = (__pyx_t_3 != 0);
      } else {
        __pyx_t_4 = __pyx_t_2;
      }
      __pyx_t_2 = __pyx_t_4;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (__pyx_t_2) {

      /* "View.MemoryView":1108
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent));
      goto __pyx_L4;
    }
    /*else*/ {

      /* "View.MemoryView":1110
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
      __pyx_t_5 = __pyx_v_dst_extent;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1111
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize);

        /* "View.MemoryView":1112
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1113
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1115
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
    __pyx_t_5 = __pyx_v_dst_extent;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1116
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1120
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1121
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1093
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1123
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1126
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1123
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1130
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1133
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1135
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1136
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1138
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1130
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1141
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1150
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1151
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_idx = __pyx_t_3;

      /* "View.MemoryView":1152
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1153
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1155
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1156
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1157
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1159
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1141
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1162
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1173
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1174
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1176
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1177
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1178
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1181
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1182
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1183
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1184
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1185
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1;
  }

  /* "View.MemoryView":1187
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order);

  /* "View.MemoryView":1191
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "View.MemoryView":1192
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1193
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src, order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "View.MemoryView":1195
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1196
 * 
 *     if slice_is_contig(src, order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size);
    goto __pyx_L9;
  }
  /*else*/ {

    /* "View.MemoryView":1198
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1200
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1162
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1208
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1207
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1211
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1212
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_1 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_Format(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_error, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":1211
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1215
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1216
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1217
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_error, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  /*else*/ {

    /* "View.MemoryView":1219
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "View.MemoryView":1215
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1222
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1230
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1231
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1233
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1234
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1235
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1238
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1239
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);
    goto __pyx_L3;
  }

  /* "View.MemoryView":1240
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1241
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1243
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1245
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_5; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1246
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1247
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1248
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1249
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;
        goto __pyx_L7;
      }
      /*else*/ {

        /* "View.MemoryView":1251
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
        __pyx_t_4 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L7:;
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "View.MemoryView":1253
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1254
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_4 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, __pyx_k_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L8;
    }
    __pyx_L8:;
  }

  /* "View.MemoryView":1256
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(&src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1258
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(&src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig((&__pyx_v_src), __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1259
 * 
 *         if not slice_is_contig(&src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "View.MemoryView":1261
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_6 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_tmpdata = __pyx_t_6;

    /* "View.MemoryView":1262
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;
    goto __pyx_L9;
  }
  __pyx_L9:;

  /* "View.MemoryView":1264
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1267
 * 
 * 
 *         if slice_is_contig(&src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1268
 * 
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'C', __pyx_v_ndim);
      goto __pyx_L12;
    }

    /* "View.MemoryView":1269
 *         if slice_is_contig(&src, 'C', ndim):
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig((&__pyx_v_src), 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1270
 *             direct_copy = slice_is_contig(&dst, 'C', ndim)
 *         elif slice_is_contig(&src, 'F', ndim):
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig((&__pyx_v_dst), 'F', __pyx_v_ndim);
      goto __pyx_L12;
    }
    __pyx_L12:;

    /* "View.MemoryView":1272
 *             direct_copy = slice_is_contig(&dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1274
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1275
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim));

      /* "View.MemoryView":1276
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1277
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1278
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;
    }
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "View.MemoryView":1280
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "View.MemoryView":1283
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "View.MemoryView":1284
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L14;
  }
  __pyx_L14:;

  /* "View.MemoryView":1286
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1287
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1288
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1290
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1291
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1222
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1294
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *slice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_slice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1298
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1300
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         slice.shape[i + offset] = slice.shape[i]
 *         slice.strides[i + offset] = slice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1301
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         slice.shape[i + offset] = slice.shape[i]             # <<<<<<<<<<<<<<
 *         slice.strides[i + offset] = slice.strides[i]
 *         slice.suboffsets[i + offset] = slice.suboffsets[i]
 */
    (__pyx_v_slice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_slice->shape[__pyx_v_i]);

    /* "View.MemoryView":1302
 *     for i in range(ndim - 1, -1, -1):
 *         slice.shape[i + offset] = slice.shape[i]
 *         slice.strides[i + offset] = slice.strides[i]             # <<<<<<<<<<<<<<
 *         slice.suboffsets[i + offset] = slice.suboffsets[i]
 * 
 */
    (__pyx_v_slice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_slice->strides[__pyx_v_i]);

    /* "View.MemoryView":1303
 *         slice.shape[i + offset] = slice.shape[i]
 *         slice.strides[i + offset] = slice.strides[i]
 *         slice.suboffsets[i + offset] = slice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_slice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_slice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1305
 *         slice.suboffsets[i + offset] = slice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         slice.shape[i] = 1
 *         slice.strides[i] = slice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1306
 * 
 *     for i in range(offset):
 *         slice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         slice.strides[i] = slice.strides[0]
 *         slice.suboffsets[i] = -1
 */
    (__pyx_v_slice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1307
 *     for i in range(offset):
 *         slice.shape[i] = 1
 *         slice.strides[i] = slice.strides[0]             # <<<<<<<<<<<<<<
 *         slice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_slice->strides[__pyx_v_i]) = (__pyx_v_slice->strides[0]);

    /* "View.MemoryView":1308
 *         slice.shape[i] = 1
 *         slice.strides[i] = slice.strides[0]
 *         slice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_slice->suboffsets[__pyx_v_i]) = -1;
  }

  /* "View.MemoryView":1294
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *slice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1316
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1320
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1321
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "View.MemoryView":1316
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1325
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1328
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1325
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1331
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1335
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "View.MemoryView":1336
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_3 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_3) {

      /* "View.MemoryView":1337
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_3 = (__pyx_v_inc != 0);
      if (__pyx_t_3) {

        /* "View.MemoryView":1338
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));
        goto __pyx_L6;
      }
      /*else*/ {

        /* "View.MemoryView":1340
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "View.MemoryView":1342
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1345
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1331
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1351
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1354
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1355
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1357
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1351
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "View.MemoryView":1365
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1366
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1368
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1370
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize);

      /* "View.MemoryView":1371
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "View.MemoryView":1373
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
    __pyx_t_2 = __pyx_v_extent;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "View.MemoryView":1374
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1376
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1361
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "pair.from_py":163
 * 
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

static std::pair<int,int> __pyx_convert_pair_from_py_int____int(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,int> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int____int", 0);

  /* "pair.from_py":164
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":165
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely(__pyx_t_6 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = std::pair<int,int>(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  /* "pair.from_py":163
 * 
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<int,int> > __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(PyObject *__pyx_v_o) {
  std::vector<std::pair<int,int> > __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<int,int> __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_", 0);

  /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":49
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_int____int(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(const std::pair<int,int> &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":181
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):
 *     return X_to_py(p.first), Y_to_py(p.second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(const std::vector<std::pair<int,int> > &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8pydecode_10potentials_Labeling(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Labeling *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Labeling *)o);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Labeling(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Labeling *p = (struct __pyx_obj_8pydecode_10potentials_Labeling *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->edge_labels);
  Py_CLEAR(p->node_labels);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Labeling(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Labeling *p = (struct __pyx_obj_8pydecode_10potentials_Labeling *)o;
  if (p->edge_labels) {
    e = (*v)(p->edge_labels, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Labeling(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Labeling *p = (struct __pyx_obj_8pydecode_10potentials_Labeling *)o;
  tmp = ((PyObject*)p->edge_labels);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_Labeling(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Labeling[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Labeling = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_Labeling, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Labeling = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_8Labeling_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Labeling = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Labeling"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Labeling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Labeling, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Labeling, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Labeling, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("Labeling(Hypergraph graph, node_labels=None, edge_labels=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Labeling, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Labeling, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Labeling, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_8Labeling_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Labeling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LazyEdges __pyx_vtable_8pydecode_10potentials__LazyEdges;

static PyObject *__pyx_tp_new_8pydecode_10potentials__LazyEdges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__LazyEdges *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__LazyEdges;
  new((void*)&(p->_edges)) std::vector<Hyperedge const *>();
  p->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__LazyEdges(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__LazyEdges *p = (struct __pyx_obj_8pydecode_10potentials__LazyEdges *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->_edges);
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__LazyEdges(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__LazyEdges *p = (struct __pyx_obj_8pydecode_10potentials__LazyEdges *)o;
  if (p->_graph) {
    e = (*v)(((PyObject*)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__LazyEdges(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__LazyEdges *p = (struct __pyx_obj_8pydecode_10potentials__LazyEdges *)o;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__LazyEdges(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__LazyEdges[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LazyEdges = {
  __pyx_pw_8pydecode_10potentials_10_LazyEdges_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__LazyEdges, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LazyEdges = {
  __pyx_pw_8pydecode_10potentials_10_LazyEdges_7__len__, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_10_LazyEdges_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__LazyEdges = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._LazyEdges"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__LazyEdges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__LazyEdges, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LazyEdges, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LazyEdges, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LazyEdges(graph)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__LazyEdges, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__LazyEdges, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10potentials_10_LazyEdges_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__LazyEdges, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_10_LazyEdges_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__LazyEdges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LazyVertices __pyx_vtable_8pydecode_10potentials__LazyVertices;

static PyObject *__pyx_tp_new_8pydecode_10potentials__LazyVertices(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__LazyVertices *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__LazyVertices;
  new((void*)&(p->_nodes)) std::vector<Hypernode const *>();
  p->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__LazyVertices(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__LazyVertices *p = (struct __pyx_obj_8pydecode_10potentials__LazyVertices *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->_nodes);
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__LazyVertices(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__LazyVertices *p = (struct __pyx_obj_8pydecode_10potentials__LazyVertices *)o;
  if (p->_graph) {
    e = (*v)(((PyObject*)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__LazyVertices(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__LazyVertices *p = (struct __pyx_obj_8pydecode_10potentials__LazyVertices *)o;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__LazyVertices(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__LazyVertices[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LazyVertices = {
  __pyx_pw_8pydecode_10potentials_13_LazyVertices_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__LazyVertices, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LazyVertices = {
  __pyx_pw_8pydecode_10potentials_13_LazyVertices_7__len__, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_13_LazyVertices_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__LazyVertices = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._LazyVertices"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__LazyVertices), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__LazyVertices, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LazyVertices, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LazyVertices, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LazyVertices(graph)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__LazyVertices, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__LazyVertices, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10potentials_13_LazyVertices_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__LazyVertices, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_13_LazyVertices_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__LazyVertices, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Hypergraph __pyx_vtable_8pydecode_10potentials_Hypergraph;

static PyObject *__pyx_tp_new_8pydecode_10potentials_Hypergraph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_Hypergraph;
  p->labeling = ((struct __pyx_obj_8pydecode_10potentials_Labeling *)Py_None); Py_INCREF(Py_None);
  p->_cached_edges = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_10Hypergraph_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Hypergraph(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *p = (struct __pyx_obj_8pydecode_10potentials_Hypergraph *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_10Hypergraph_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->labeling);
  Py_CLEAR(p->_cached_edges);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Hypergraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *p = (struct __pyx_obj_8pydecode_10potentials_Hypergraph *)o;
  if (p->labeling) {
    e = (*v)(((PyObject*)p->labeling), a); if (e) return e;
  }
  if (p->_cached_edges) {
    e = (*v)(p->_cached_edges, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Hypergraph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Hypergraph *p = (struct __pyx_obj_8pydecode_10potentials_Hypergraph *)o;
  tmp = ((PyObject*)p->labeling);
  p->labeling = ((struct __pyx_obj_8pydecode_10potentials_Labeling *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cached_edges);
  p->_cached_edges = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Hypergraph_vertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Hypergraph_8vertices_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Hypergraph_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Hypergraph_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Hypergraph_root(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Hypergraph_4root_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Hypergraph_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Hypergraph_5edges_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Hypergraph[] = {
  {__Pyx_NAMESTR("builder"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Hypergraph_5builder, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Hypergraph_4builder)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_Hypergraph[] = {
  {(char *)"vertices", __pyx_getprop_8pydecode_10potentials_10Hypergraph_vertices, 0, 0, 0},
  {(char *)"nodes", __pyx_getprop_8pydecode_10potentials_10Hypergraph_nodes, 0, 0, 0},
  {(char *)"root", __pyx_getprop_8pydecode_10potentials_10Hypergraph_root, 0, 0, 0},
  {(char *)"edges", __pyx_getprop_8pydecode_10potentials_10Hypergraph_edges, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Hypergraph = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Hypergraph"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Hypergraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Hypergraph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10potentials_10Hypergraph_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    The search space of a dynamic program.\n\n    Hypergraph consisting of a set of nodes :math:`{\\cal V}`,\n    hyperedges :math:`{\\cal E}`, and a root vertex.\n\n    Attributes\n    -----------\n\n    edges : list of :py:class:`Edge`\n      List of edge set :math:`{\\cal E}` in topological order.\n\n    root : :py:class:`Vertex`\n      Root vertex in :math:`{\\cal V}`.\n\n    vertices : list of :py:class:`Vertex`\n      List of vertex set :math:`{\\cal V}` in topological order.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Hypergraph, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Hypergraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Hypergraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_Hypergraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Hypergraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_GraphBuilder __pyx_vtable_8pydecode_10potentials_GraphBuilder;

static PyObject *__pyx_tp_new_8pydecode_10potentials_GraphBuilder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_GraphBuilder;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  p->started = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_GraphBuilder(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *p = (struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->graph);
  Py_CLEAR(p->edge_labels);
  Py_CLEAR(p->node_labels);
  Py_CLEAR(p->started);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_GraphBuilder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *p = (struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  if (p->edge_labels) {
    e = (*v)(p->edge_labels, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  if (p->started) {
    e = (*v)(p->started, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_GraphBuilder(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_GraphBuilder *p = (struct __pyx_obj_8pydecode_10potentials_GraphBuilder *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->edge_labels);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->started);
  p->started = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_GraphBuilder[] = {
  {__Pyx_NAMESTR("__enter__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12GraphBuilder_3__enter__, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12GraphBuilder_2__enter__)},
  {__Pyx_NAMESTR("__exit__"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12GraphBuilder_5__exit__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12GraphBuilder_4__exit__)},
  {__Pyx_NAMESTR("add_node"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12GraphBuilder_7add_node, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12GraphBuilder_6add_node)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10potentials_GraphBuilder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.GraphBuilder"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_GraphBuilder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_GraphBuilder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("GraphBuilder()\n\n    Direct constructor for hypergraphs.\n\n    Usage ::\n\n           >> hypergraph = Hypergraph()\n           >> with hypergraph.builder() as b:\n           >>    b.add_node()\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_GraphBuilder, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_GraphBuilder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_GraphBuilder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_12GraphBuilder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_GraphBuilder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Vertex __pyx_vtable_8pydecode_10potentials_Vertex;

static PyObject *__pyx_tp_new_8pydecode_10potentials_Vertex(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Vertex *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Vertex *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_Vertex;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_6Vertex_9__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Vertex(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Vertex *p = (struct __pyx_obj_8pydecode_10potentials_Vertex *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_6Vertex_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Vertex(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Vertex *p = (struct __pyx_obj_8pydecode_10potentials_Vertex *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Vertex(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Vertex *p = (struct __pyx_obj_8pydecode_10potentials_Vertex *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_6Vertex_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_6Vertex_2id_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_6Vertex_subedges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_6Vertex_8subedges_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_6Vertex_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_6Vertex_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_6Vertex_is_terminal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_6Vertex_11is_terminal_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_6Vertex_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_6Vertex_5label_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Vertex[] = {
  {__Pyx_NAMESTR("_removed"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Vertex_11_removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Vertex_10_removed)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_Vertex[] = {
  {(char *)"id", __pyx_getprop_8pydecode_10potentials_6Vertex_id, 0, 0, 0},
  {(char *)"subedges", __pyx_getprop_8pydecode_10potentials_6Vertex_subedges, 0, 0, 0},
  {(char *)"edges", __pyx_getprop_8pydecode_10potentials_6Vertex_edges, 0, 0, 0},
  {(char *)"is_terminal", __pyx_getprop_8pydecode_10potentials_6Vertex_is_terminal, 0, 0, 0},
  {(char *)"label", __pyx_getprop_8pydecode_10potentials_6Vertex_label, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Vertex = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Vertex"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Vertex), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Vertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8pydecode_10potentials_6Vertex_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_10potentials_6Vertex_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10potentials_6Vertex_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Hypergraph vertex.\n\n    A hypergraph constains a set of vertices :math:`v \\in {\\cal V}`.\n    Each vertex (besides the root) is in the tail of many possible\n    hyperedges :math:`e \\in {\\cal E}`, and (besides terminal vertices)\n    at the head of many other edges.\n\n    The vertex object has access to the subedges of the vertex\n    or a bit indicating it is a terminal vertex. It also optionally\n    has an associated label, which may be any python object.\n\n    Attributes\n    -------------\n\n    subedges : iterator of :py:class:`Edge` s\n\n       The hyperedges that have this vertex as head.\n\n       We write this as :math:`\\{e \\in {\\cal E} : h(e) = v \\}`\n\n    is_terminal : bool\n       Indicates whether this vertex is terminal (no-subedges).\n\n    label : any\n        Data associated with the vertex.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Vertex, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Vertex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Vertex, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_Vertex, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Vertex, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Edge __pyx_vtable_8pydecode_10potentials_Edge;

static PyObject *__pyx_tp_new_8pydecode_10potentials_Edge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Edge *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Edge *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_Edge;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_4Edge_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Edge(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Edge *p = (struct __pyx_obj_8pydecode_10potentials_Edge *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_4Edge_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Edge(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Edge *p = (struct __pyx_obj_8pydecode_10potentials_Edge *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Edge(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Edge *p = (struct __pyx_obj_8pydecode_10potentials_Edge *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Edge_tail(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Edge_4tail_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Edge_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Edge_4head_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Edge_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Edge_5label_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Edge_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Edge_2id_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Edge[] = {
  {__Pyx_NAMESTR("_removed"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Edge_9_removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Edge_8_removed)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_Edge[] = {
  {(char *)"tail", __pyx_getprop_8pydecode_10potentials_4Edge_tail, 0, 0, 0},
  {(char *)"head", __pyx_getprop_8pydecode_10potentials_4Edge_head, 0, 0, 0},
  {(char *)"label", __pyx_getprop_8pydecode_10potentials_4Edge_label, 0, 0, 0},
  {(char *)"id", __pyx_getprop_8pydecode_10potentials_4Edge_id, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Edge = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Edge"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Edge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Edge, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8pydecode_10potentials_4Edge_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_10potentials_4Edge_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Hypergraph hyperedge.\n\n\n    A hypergraph constains a set of hyperedge :math:`e \\in {\\cal E}`.\n    at the head of many other edges.  A hyperedge is a vector\n    :math:`\\langle v_1 , \\langle v_2 \\ldots v_{n} \\rangle \\rangle`\n    where :math:`v_1` is a head vertex and :math:`v_2 \\ldots v_{n}` is\n    a tail.\n\n    We represent a hyperedge with a reference to the head vertex,\n    an iterator of tail vertices, and a label which may be any\n    piece of python data.\n\n    Attributes\n    -----------\n\n    head : :py:class:`Vertex`\n        The head vertex :math:`v_1`.\n\n    tail : iterator of :py:class:`Vertex`\n        The tail vertices :math:`v_2 \\ldots v_{n}`.\n\n    label : any\n        Data associated with the hyperedge.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Edge, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Edge, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Edge, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_Edge, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Edge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Path __pyx_vtable_8pydecode_10potentials_Path;

static PyObject *__pyx_tp_new_8pydecode_10potentials_Path(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Path *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Path *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_Path;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_4Path_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Path(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Path *p = (struct __pyx_obj_8pydecode_10potentials_Path *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_4Path_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Path(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Path *p = (struct __pyx_obj_8pydecode_10potentials_Path *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Path(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Path *p = (struct __pyx_obj_8pydecode_10potentials_Path *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Path_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Path_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Path_vertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Path_8vertices_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_4Path_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_4Path_5nodes_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Path[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_Path[] = {
  {(char *)"edges", __pyx_getprop_8pydecode_10potentials_4Path_edges, 0, 0, 0},
  {(char *)"vertices", __pyx_getprop_8pydecode_10potentials_4Path_vertices, 0, 0, 0},
  {(char *)"nodes", __pyx_getprop_8pydecode_10potentials_4Path_nodes, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Path = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_8pydecode_10potentials_4Path_7__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Path = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Path"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Path), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Path, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Path, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10potentials_4Path_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Path through the hypergraph.\n\n    A (hyper)path representing a possible traversal of the hypergraph.\n    A path is a member of the combinatorial set\n    :math:`y \\in {\\cal Y}` satisfying the consistency conditions.\n\n    We represent a path as an ordered list of edges and vertices\n\n    Usage:\n\n    To check if an edge is in a path ::\n\n       >> edge in path\n\n    Attributes\n    -----------\n\n    edges : iterator of :py:class:`Edge`\n        The hyperedges in the path :math:`y_e = 1` in topological order.\n\n    vertices : iterator of :py:class:`Vertex`\n        The vertices in the path :math:`y_v = 1` in topological order.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Path, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Path, /*tp_clear*/
  __pyx_pw_8pydecode_10potentials_4Path_11__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10potentials_4Path_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Path, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_Path, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Path, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_HypergraphMap __pyx_vtable_8pydecode_10potentials_HypergraphMap;

static PyObject *__pyx_tp_new_8pydecode_10potentials_HypergraphMap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_HypergraphMap;
  p->range_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->domain_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_13HypergraphMap_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_HypergraphMap(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *p = (struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_13HypergraphMap_7__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->range_graph);
  Py_CLEAR(p->domain_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_HypergraphMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *p = (struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)o;
  if (p->range_graph) {
    e = (*v)(((PyObject*)p->range_graph), a); if (e) return e;
  }
  if (p->domain_graph) {
    e = (*v)(((PyObject*)p->domain_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_HypergraphMap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_HypergraphMap *p = (struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)o;
  tmp = ((PyObject*)p->range_graph);
  p->range_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->domain_graph);
  p->domain_graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_HypergraphMap(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_13HypergraphMap_domain_hypergraph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_13HypergraphMap_17domain_hypergraph_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_13HypergraphMap_range_hypergraph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_13HypergraphMap_16range_hypergraph_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_HypergraphMap[] = {
  {__Pyx_NAMESTR("compose"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13HypergraphMap_3compose, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13HypergraphMap_2compose)},
  {__Pyx_NAMESTR("invert"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13HypergraphMap_5invert, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13HypergraphMap_4invert)},
  {__Pyx_NAMESTR("_build_range_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13HypergraphMap_11_build_range_hypergraph, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13HypergraphMap_10_build_range_hypergraph)},
  {__Pyx_NAMESTR("_build_domain_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13HypergraphMap_13_build_domain_hypergraph, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13HypergraphMap_12_build_domain_hypergraph)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_HypergraphMap[] = {
  {(char *)"domain_hypergraph", __pyx_getprop_8pydecode_10potentials_13HypergraphMap_domain_hypergraph, 0, 0, 0},
  {(char *)"range_hypergraph", __pyx_getprop_8pydecode_10potentials_13HypergraphMap_range_hypergraph, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_HypergraphMap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_HypergraphMap, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HypergraphMap = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_13HypergraphMap_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_HypergraphMap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.HypergraphMap"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_HypergraphMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_HypergraphMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_HypergraphMap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HypergraphMap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Map between two hypergraphs.\n\n    It is often useful to indicate the relationship between edges\n    in multiple hypergraphs. Say we have two hypergraphs\n    :math:`({\\cal V}, {\\cal E})` and :math:`({\\cal V}', {\\cal E}')`.\n    This class represents a function :math:`m : {\\cal V} \\cup {\\cal E} \\mapsto {\\cal V}' \\cup {\\cal E}'`.\n\n\n    Usage:\n\n    To map a vertex or edge ::\n\n       >> hypergraph_map[edge]\n\n       >> hypergraph_map[vertex]\n\n    It can also be used to map objects over a hypergraph, for instance ::\n\n       >> hypergraph_map[potentials]\n\n    Attributes\n    -----------\n    domain_hypergraph : :py:class:`Hypergraph`\n      Hypergraph in the domain  of the map :math:`({\\cal V}, {\\cal E})`\n\n    range_hypergraph : :py:class:`Hypergraph`\n      Hypergraph in the range of the map :math:`({\\cal V}', {\\cal E})'`\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_HypergraphMap, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_HypergraphMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_HypergraphMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_HypergraphMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_HypergraphMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers __pyx_vtable_8pydecode_10potentials_BackPointers;

static PyObject *__pyx_tp_new_8pydecode_10potentials_BackPointers(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_BackPointers;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BackPointers(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BackPointers(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BackPointers(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BackPointers(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_12BackPointers_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BackPointers[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_BackPointers[] = {
  {(char *)"path", __pyx_getprop_8pydecode_10potentials_12BackPointers_path, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BackPointers = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BackPointers, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BackPointers = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BackPointers = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BackPointers"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BackPointers), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BackPointers, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BackPointers, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BackPointers, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    The back pointers generated by the Viterbi algorithm.\n\n    Acts as a map ::\n\n       >> print bp[node]\n\n    Gives the best back edge for node.\n\n    Attributes\n    -----------\n\n    path : Hyperpath\n       The best hyperpath from the root.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BackPointers, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BackPointers, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BackPointers, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_BackPointers, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BackPointers, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_Potentials(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Potentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Potentials *)o);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Potentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_Potentials *p = (struct __pyx_obj_8pydecode_10potentials_Potentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_Potentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_Potentials *p = (struct __pyx_obj_8pydecode_10potentials_Potentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_Potentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_Potentials *p = (struct __pyx_obj_8pydecode_10potentials_Potentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Potentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Potentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_10Potentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_10Potentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_Potentials[] = {
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_1show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_show)},
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_3times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_2times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_5clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_4clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_7project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_6project)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_9from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_8from_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10Potentials_11dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10Potentials_10dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_Potentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_10Potentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_10Potentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10potentials_Potentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Potentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Potentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Attributes\n    ------------\n\n    bias : value\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Potentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Potentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_Potentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_Potentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Potentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_Chart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Chart(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_8pydecode_10potentials_Chart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Chart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Chart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Chart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A dynamic programming chart associated with a hypergraph.\n\n    Chart :math:`S^{|{\\cal V}|}` associated with a hypergraph (V, E)\n    and semiring S.\n\n    Acts as a vector ::\n\n       >> print chart[node]\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Chart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials __pyx_vtable_8pydecode_10potentials_ViterbiPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_ViterbiPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_ViterbiPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_ViterbiPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_ViterbiPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_ViterbiPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_18_bias)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_20from_array)},
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_22as_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_27dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_26dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_ViterbiPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ViterbiPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_ViterbiPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ViterbiPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_25__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_ViterbiPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.ViterbiPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_ViterbiPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ViterbiPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ViterbiPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Real-valued max probability potentials.\nUses the operations :math:`(+, *) = (\\max, *)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_ViterbiPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_ViterbiPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_ViterbiPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_ViterbiPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_ViterbiPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_ViterbiChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_ViterbiChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_ViterbiChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_ViterbiChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_ViterbiChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_ViterbiChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_ViterbiChart[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiChart_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiChart_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ViterbiChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_ViterbiChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ViterbiChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_ViterbiChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.ViterbiChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_ViterbiChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ViterbiChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ViterbiChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("ViterbiChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_ViterbiChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_ViterbiChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_ViterbiChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_ViterbiChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiValue __pyx_vtable_8pydecode_10potentials_ViterbiValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_ViterbiValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_ViterbiValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_ViterbiValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_12ViterbiValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_12ViterbiValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_ViterbiValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12ViterbiValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12ViterbiValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_ViterbiValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_12ViterbiValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ViterbiValue = {
  __pyx_pw_8pydecode_10potentials_12ViterbiValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_12ViterbiValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_ViterbiValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.ViterbiValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_ViterbiValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ViterbiValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_ViterbiValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_ViterbiValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_ViterbiValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials __pyx_vtable_8pydecode_10potentials_LogViterbiPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_LogViterbiPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_LogViterbiPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_LogViterbiPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_LogViterbiPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_18_bias)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_20from_array)},
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_22as_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_27dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_26dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_LogViterbiPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogViterbiPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_LogViterbiPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogViterbiPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_25__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_LogViterbiPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.LogViterbiPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogViterbiPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogViterbiPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Real-valued max log-probability potentials.\nUses the operations :math:`(+, *) = (\\max, *)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_LogViterbiPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_LogViterbiPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_LogViterbiPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_LogViterbiPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_LogViterbiChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_LogViterbiChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_LogViterbiChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_LogViterbiChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_LogViterbiChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_LogViterbiChart[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiChart_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiChart_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogViterbiChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_LogViterbiChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogViterbiChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_LogViterbiChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.LogViterbiChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogViterbiChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogViterbiChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("LogViterbiChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_LogViterbiChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_LogViterbiChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_LogViterbiChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_LogViterbiChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiValue __pyx_vtable_8pydecode_10potentials_LogViterbiValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_LogViterbiValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_15LogViterbiValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_15LogViterbiValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_LogViterbiValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15LogViterbiValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15LogViterbiValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_LogViterbiValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_15LogViterbiValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LogViterbiValue = {
  __pyx_pw_8pydecode_10potentials_15LogViterbiValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_15LogViterbiValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_LogViterbiValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.LogViterbiValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LogViterbiValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_LogViterbiValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_LogViterbiValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_LogViterbiValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials __pyx_vtable_8pydecode_10potentials_InsidePotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_InsidePotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_InsidePotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_16InsidePotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_InsidePotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16InsidePotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_InsidePotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_InsidePotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_InsidePotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16InsidePotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_InsidePotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_18_bias)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_21from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_20from_array)},
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_23as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_22as_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_27dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_26dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_InsidePotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_16InsidePotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_InsidePotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_InsidePotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InsidePotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16InsidePotentials_25__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_InsidePotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.InsidePotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_InsidePotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_InsidePotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_InsidePotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InsidePotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Real-valued probability potentials.\nUses the operations :math:`(+, *) = (+, *)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_InsidePotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_InsidePotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_InsidePotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_InsidePotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_InsidePotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_InsideChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_InsideChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_InsideChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_InsideChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_InsideChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_InsideChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_InsideChart[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideChart_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideChart_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_InsideChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_InsideChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InsideChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_InsideChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.InsideChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_InsideChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_InsideChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_InsideChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InsideChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("InsideChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_InsideChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_InsideChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_InsideChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_InsideChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsideValue __pyx_vtable_8pydecode_10potentials_InsideValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_InsideValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_InsideValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_InsideValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_InsideValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_11InsideValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_11InsideValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_InsideValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11InsideValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11InsideValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_InsideValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_11InsideValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_InsideValue = {
  __pyx_pw_8pydecode_10potentials_11InsideValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_11InsideValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_InsideValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.InsideValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_InsideValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_InsideValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_InsideValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_InsideValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_InsideValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_InsideValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxPotentials __pyx_vtable_8pydecode_10potentials_MinMaxPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MinMaxPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinMaxPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinMaxPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinMaxPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinMaxPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16MinMaxPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinMaxPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_18_bias)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_21from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_20from_array)},
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_23as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_22as_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16MinMaxPotentials_27dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16MinMaxPotentials_26dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MinMaxPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_16MinMaxPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinMaxPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinMaxPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinMaxPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16MinMaxPotentials_25__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinMaxPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinMaxPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinMaxPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinMaxPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinMaxPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Real-valued min value potentials.\nUses the operations :math:`(+, *) = (\\min, \\max)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinMaxPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinMaxPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinMaxPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MinMaxPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinMaxPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinMaxChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_11MinMaxChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinMaxChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_MinMaxChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinMaxChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinMaxChart *p = (struct __pyx_obj_8pydecode_10potentials_MinMaxChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_MinMaxChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinMaxChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinMaxChart[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxChart_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxChart_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinMaxChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinMaxChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinMaxChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_11MinMaxChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinMaxChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinMaxChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinMaxChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinMaxChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinMaxChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinMaxChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MinMaxChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinMaxChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinMaxChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinMaxChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_11MinMaxChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinMaxChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinMaxValue __pyx_vtable_8pydecode_10potentials_MinMaxValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinMaxValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinMaxValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinMaxValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MinMaxValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinMaxValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_11MinMaxValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_11MinMaxValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinMaxValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11MinMaxValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11MinMaxValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MinMaxValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_11MinMaxValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MinMaxValue = {
  __pyx_pw_8pydecode_10potentials_11MinMaxValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_11MinMaxValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinMaxValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinMaxValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinMaxValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinMaxValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MinMaxValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinMaxValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MinMaxValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinMaxValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials __pyx_vtable_8pydecode_10potentials_SparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_SparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_SparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_SparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_SparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_18_bias)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_SparseVectorPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_SparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_SparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.SparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Sparse-vector valued weights.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_SparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_SparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_SparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_SparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_SparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_SparseVectorChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_SparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_SparseVectorChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_SparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_SparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_SparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_SparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.SparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("SparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_SparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_SparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_SparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_SparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorValue __pyx_vtable_8pydecode_10potentials_SparseVectorValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_SparseVectorValue;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorValue(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->thisval);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_17SparseVectorValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_17SparseVectorValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_SparseVectorValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17SparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17SparseVectorValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_SparseVectorValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_17SparseVectorValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SparseVectorValue = {
  __pyx_pw_8pydecode_10potentials_17SparseVectorValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_17SparseVectorValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_SparseVectorValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.SparseVectorValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SparseVectorValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_SparseVectorValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_SparseVectorValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_SparseVectorValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials __pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinSparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_18_bias)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MinSparseVectorPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinSparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinSparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinSparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinSparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinSparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinSparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinSparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    \n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinSparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinSparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinSparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinSparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinSparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinSparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinSparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinSparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinSparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MinSparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinSparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorValue __pyx_vtable_8pydecode_10potentials_MinSparseVectorValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorValue;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorValue(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->thisval);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_20MinSparseVectorValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinSparseVectorValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MinSparseVectorValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MinSparseVectorValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_20MinSparseVectorValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MinSparseVectorValue = {
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinSparseVectorValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinSparseVectorValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MinSparseVectorValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinSparseVectorValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MinSparseVectorValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinSparseVectorValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials __pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MaxSparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_18_bias)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MaxSparseVectorPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MaxSparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MaxSparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MaxSparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MaxSparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MaxSparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MaxSparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    \n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MaxSparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MaxSparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MaxSparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MaxSparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MaxSparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MaxSparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MaxSparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MaxSparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MaxSparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MaxSparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorValue __pyx_vtable_8pydecode_10potentials_MaxSparseVectorValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorValue;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorValue(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->thisval);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_20MaxSparseVectorValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MaxSparseVectorValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20MaxSparseVectorValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MaxSparseVectorValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_20MaxSparseVectorValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_MaxSparseVectorValue = {
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MaxSparseVectorValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MaxSparseVectorValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_MaxSparseVectorValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MaxSparseVectorValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MaxSparseVectorValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MaxSparseVectorValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials __pyx_vtable_8pydecode_10potentials_CountingPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_CountingPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_18CountingPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_CountingPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_18CountingPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_CountingPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_CountingPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_CountingPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_18CountingPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_CountingPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_18_bias)},
  {__Pyx_NAMESTR("from_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_21from_array, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_20from_array)},
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_23as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_22as_array)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_27dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_26dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_CountingPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_18CountingPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CountingPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_CountingPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CountingPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_18CountingPotentials_25__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_CountingPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.CountingPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_CountingPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_CountingPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CountingPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CountingPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Natural-valued counting potentials.\nUses the operations :math:`(+, *) = (+, *)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_CountingPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_CountingPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_CountingPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_CountingPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_CountingPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_CountingChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_CountingChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_CountingChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_CountingChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_CountingChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_CountingChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_CountingChart[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingChart_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingChart_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CountingChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_CountingChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CountingChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_CountingChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.CountingChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_CountingChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_CountingChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CountingChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CountingChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("CountingChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_CountingChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_CountingChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_CountingChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_CountingChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingValue __pyx_vtable_8pydecode_10potentials_CountingValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_CountingValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_CountingValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_CountingValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_CountingValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_13CountingValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_13CountingValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_CountingValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13CountingValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13CountingValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_CountingValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_13CountingValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CountingValue = {
  __pyx_pw_8pydecode_10potentials_13CountingValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_13CountingValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_CountingValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.CountingValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_CountingValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_CountingValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CountingValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_CountingValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_CountingValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_CountingValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials __pyx_vtable_8pydecode_10potentials_BoolPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Potentials(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_BoolPotentials;
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_14BoolPotentials_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BoolPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_14BoolPotentials_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->projection);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Potentials(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BoolPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  e = __pyx_tp_traverse_8pydecode_10potentials_Potentials(o, v, a); if (e) return e;
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BoolPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  __pyx_tp_clear_8pydecode_10potentials_Potentials(o);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10potentials_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BoolPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_14BoolPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BoolPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_10up_project)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_13from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_12from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_14from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_16from_map)},
  {__Pyx_NAMESTR("_bias"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_19_bias, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_18_bias)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_BoolPotentials[] = {
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_14BoolPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BoolPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BoolPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BoolPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BoolPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BoolPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BoolPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BoolPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BoolPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BoolPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Boolean-valued logical potentials.\nUses the operations :math:`(+, *) = (\\land, \\lor)`.\n\n    Potentials associated with the edges of a hypergraph.\n\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n\n       >> print potentials[edge]\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BoolPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BoolPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BoolPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_BoolPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BoolPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolChart(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Chart(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BoolChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Chart(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BoolChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Chart)) ? ((__pyx_ptype_8pydecode_10potentials_Chart->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Chart->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials_BoolChart)); if (e) return e;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BoolChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Chart)) { if (__pyx_ptype_8pydecode_10potentials_Chart->tp_clear) __pyx_ptype_8pydecode_10potentials_Chart->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials_BoolChart);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BoolChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BoolChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BoolChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BoolChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BoolChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BoolChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BoolChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BoolChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BoolChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BoolChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BoolChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("BoolChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BoolChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BoolChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BoolChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BoolChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolValue __pyx_vtable_8pydecode_10potentials_BoolValue;

static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolValue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BoolValue *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BoolValue *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_BoolValue;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BoolValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_9BoolValue_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_9BoolValue_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BoolValue[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9BoolValue_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9BoolValue_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_BoolValue[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_9BoolValue_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BoolValue = {
  __pyx_pw_8pydecode_10potentials_9BoolValue_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_9BoolValue_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BoolValue = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BoolValue"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BoolValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BoolValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BoolValue, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BoolValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_BoolValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BoolValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_Node __pyx_vtable_8pydecode_10potentials_Node;

static PyObject *__pyx_tp_new_8pydecode_10potentials_Node(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_Node *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Vertex(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_Node *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8pydecode_10potentials_Vertex*)__pyx_vtabptr_8pydecode_10potentials_Node;
  return o;
}

static PyTypeObject __pyx_type_8pydecode_10potentials_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Node"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Vertex, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pydecode_10potentials_6Vertex_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_8pydecode_10potentials_6Vertex_7__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_Vertex, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_Vertex, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_Marginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_Marginals(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_8pydecode_10potentials_Marginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Marginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_Marginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Marginal values with a hypergraph and potentials.\n\n    Marginal values :math:`S^{|{\\cal E} \\times {\\cal V}|}` associated\n    with a hypergraph ({\\cal V}, {\\cal E}) and semiring S.\n\n    Acts as a dictionary ::\n\n       >> print marginals[edge]\n       >> print marginals[node]\n\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_Marginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals __pyx_vtable_8pydecode_10potentials__ViterbiMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__ViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__ViterbiMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__ViterbiMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__ViterbiMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__ViterbiMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__ViterbiMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__ViterbiMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__ViterbiMarginals[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_6as_array)},
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_9threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_8threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__ViterbiMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__ViterbiMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__ViterbiMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__ViterbiMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._ViterbiMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__ViterbiMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__ViterbiMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__ViterbiMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_ViterbiMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__ViterbiMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__ViterbiMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__ViterbiMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__ViterbiMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals __pyx_vtable_8pydecode_10potentials__LogViterbiMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__LogViterbiMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__LogViterbiMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__LogViterbiMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__LogViterbiMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__LogViterbiMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__LogViterbiMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__LogViterbiMarginals[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_6as_array)},
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_9threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_8threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LogViterbiMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__LogViterbiMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LogViterbiMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__LogViterbiMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._LogViterbiMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__LogViterbiMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LogViterbiMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LogViterbiMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LogViterbiMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__LogViterbiMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__LogViterbiMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__LogViterbiMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals __pyx_vtable_8pydecode_10potentials__InsideMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__InsideMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__InsideMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__InsideMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__InsideMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__InsideMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__InsideMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__InsideMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__InsideMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__InsideMarginals[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_InsideMarginals_6as_array)},
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_InsideMarginals_9threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_InsideMarginals_8threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__InsideMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__InsideMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__InsideMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__InsideMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._InsideMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__InsideMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__InsideMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__InsideMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__InsideMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_InsideMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__InsideMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__InsideMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__InsideMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__InsideMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinMaxMarginals __pyx_vtable_8pydecode_10potentials__MinMaxMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MinMaxMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MinMaxMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MinMaxMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__MinMaxMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__MinMaxMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__MinMaxMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__MinMaxMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__MinMaxMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MinMaxMarginals[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinMaxMarginals_6as_array)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__MinMaxMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__MinMaxMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__MinMaxMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MinMaxMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MinMaxMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MinMaxMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__MinMaxMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__MinMaxMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_MinMaxMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__MinMaxMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__MinMaxMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MinMaxMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_16_MinMaxMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MinMaxMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals __pyx_vtable_8pydecode_10potentials__SparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__SparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__SparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__SparseVectorMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__SparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__SparseVectorMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__SparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__SparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__SparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__SparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__SparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__SparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._SparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__SparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__SparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__SparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_SparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__SparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__SparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__SparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals __pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__MinSparseVectorMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__MinSparseVectorMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MinSparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__MinSparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__MinSparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__MinSparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MinSparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MinSparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__MinSparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__MinSparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_MinSparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals __pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__MaxSparseVectorMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__MaxSparseVectorMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MaxSparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__MaxSparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__MaxSparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__MaxSparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MaxSparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__MaxSparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__MaxSparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_MaxSparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals __pyx_vtable_8pydecode_10potentials__CountingMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__CountingMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__CountingMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__CountingMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__CountingMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__CountingMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__CountingMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__CountingMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__CountingMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__CountingMarginals[] = {
  {__Pyx_NAMESTR("as_array"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7as_array, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18_CountingMarginals_6as_array)},
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18_CountingMarginals_9threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18_CountingMarginals_8threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__CountingMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__CountingMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__CountingMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__CountingMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._CountingMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__CountingMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__CountingMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__CountingMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__CountingMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_CountingMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__CountingMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__CountingMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__CountingMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__CountingMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals __pyx_vtable_8pydecode_10potentials__BoolMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__BoolMarginals(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p;
  PyObject *o = __pyx_tp_new_8pydecode_10potentials_Marginals(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__BoolMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__BoolMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_8pydecode_10potentials_Marginals(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__BoolMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  e = ((likely(__pyx_ptype_8pydecode_10potentials_Marginals)) ? ((__pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse) ? __pyx_ptype_8pydecode_10potentials_Marginals->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pydecode_10potentials__BoolMarginals)); if (e) return e;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__BoolMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  if (likely(__pyx_ptype_8pydecode_10potentials_Marginals)) { if (__pyx_ptype_8pydecode_10potentials_Marginals->tp_clear) __pyx_ptype_8pydecode_10potentials_Marginals->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pydecode_10potentials__BoolMarginals);
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10potentials_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__BoolMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__BoolMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14_BoolMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__BoolMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__BoolMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__BoolMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__BoolMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._BoolMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__BoolMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__BoolMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__BoolMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__BoolMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_BoolMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__BoolMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__BoolMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__BoolMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__BoolMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *__pyx_freelist_8pydecode_10potentials___pyx_scope_struct____iter__[8];
static int __pyx_freecount_8pydecode_10potentials___pyx_scope_struct____iter__ = 0;

static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10potentials___pyx_scope_struct____iter__[--__pyx_freecount_8pydecode_10potentials___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__)))) {
    __pyx_freelist_8pydecode_10potentials___pyx_scope_struct____iter__[__pyx_freecount_8pydecode_10potentials___pyx_scope_struct____iter__++] = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct____iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_8pydecode_10potentials__LazyEdges *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pydecode_10potentials___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.__pyx_scope_struct____iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct____iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct____iter__, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct____iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_8pydecode_10potentials___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_1_genexpr[--__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)o);
  new((void*)&(p->__pyx_t_0)) std::vector<Hyperedge const *>::iterator();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->__pyx_t_0);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_8pydecode_10potentials___pyx_scope_struct_1_genexpr[__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct____iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pydecode_10potentials___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.__pyx_scope_struct_1_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_8pydecode_10potentials___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_2___iter__[--__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__)))) {
    __pyx_freelist_8pydecode_10potentials___pyx_scope_struct_2___iter__[__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_2___iter__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_8pydecode_10potentials__LazyVertices *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pydecode_10potentials___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.__pyx_scope_struct_2___iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_2___iter__, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_2___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_8pydecode_10potentials___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10potentials___pyx_scope_struct_3_genexpr[--__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)o);
  new((void*)&(p->__pyx_t_0)) std::vector<Hypernode const *>::iterator();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(&p->__pyx_t_0);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_8pydecode_10potentials___pyx_scope_struct_3_genexpr[__pyx_freecount_8pydecode_10potentials___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_2___iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_8pydecode_10potentials___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.__pyx_scope_struct_3_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return get_memview(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  0, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  __pyx_array_getbuffer, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.array"), /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.Enum"), /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_transpose(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview__get__base(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_shape(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_strides(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_suboffsets(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_ndim(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_itemsize(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_nbytes(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryview_get_size(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {__Pyx_NAMESTR("is_c_contig"), (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_f_contig"), (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("copy"), (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("copy_fortran"), (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, 0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, 0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, 0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, 0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, 0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, 0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, 0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, 0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.memoryview"), /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_memoryviewslice__get__base(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._memoryviewslice"), /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("Internal class for passing memoryview slices to Python"), /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("potentials"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_20s_s, __pyx_k_20s_s, sizeof(__pyx_k_20s_s), 0, 0, 1, 0},
  {&__pyx_kp_s_An_edge_must_have_at_least_one_t, __pyx_k_An_edge_must_have_at_least_one_t, sizeof(__pyx_k_An_edge_must_have_at_least_one_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Bad_edge_id, __pyx_k_Bad_edge_id, sizeof(__pyx_k_Bad_edge_id), 0, 0, 1, 0},
  {&__pyx_kp_s_Bad_node_id, __pyx_k_Bad_node_id, sizeof(__pyx_k_Bad_node_id), 0, 0, 1, 0},
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_compute_marginals, __pyx_k_Bool_compute_marginals, sizeof(__pyx_k_Bool_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_inside, __pyx_k_Bool_inside, sizeof(__pyx_k_Bool_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_outside, __pyx_k_Bool_outside, sizeof(__pyx_k_Bool_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_prune_hypergraph, __pyx_k_Bool_prune_hypergraph, sizeof(__pyx_k_Bool_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_viterbi, __pyx_k_Bool_viterbi, sizeof(__pyx_k_Bool_viterbi), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Chart, __pyx_k_Chart, sizeof(__pyx_k_Chart), 0, 0, 1, 1},
  {&__pyx_n_s_Counting, __pyx_k_Counting, sizeof(__pyx_k_Counting), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_compute_marginals, __pyx_k_Counting_compute_marginals, sizeof(__pyx_k_Counting_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_inside, __pyx_k_Counting_inside, sizeof(__pyx_k_Counting_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_outside, __pyx_k_Counting_outside, sizeof(__pyx_k_Counting_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_prune_hypergraph, __pyx_k_Counting_prune_hypergraph, sizeof(__pyx_k_Counting_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_viterbi, __pyx_k_Counting_viterbi, sizeof(__pyx_k_Counting_viterbi), 0, 0, 1, 1},
  {&__pyx_kp_s_EDGE_d, __pyx_k_EDGE_d, sizeof(__pyx_k_EDGE_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Edges_must_be_pairs_of_the_form, __pyx_k_Edges_must_be_pairs_of_the_form, sizeof(__pyx_k_Edges_must_be_pairs_of_the_form), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_HypergraphAccessException, __pyx_k_HypergraphAccessException, sizeof(__pyx_k_HypergraphAccessException), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphAccessException___init, __pyx_k_HypergraphAccessException___init, sizeof(__pyx_k_HypergraphAccessException___init), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphAccessException___str, __pyx_k_HypergraphAccessException___str, sizeof(__pyx_k_HypergraphAccessException___str), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphConstructionException, __pyx_k_HypergraphConstructionException, sizeof(__pyx_k_HypergraphConstructionException), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphConstructionException_2, __pyx_k_HypergraphConstructionException_2, sizeof(__pyx_k_HypergraphConstructionException_2), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphConstructionException_3, __pyx_k_HypergraphConstructionException_3, sizeof(__pyx_k_HypergraphConstructionException_3), 0, 0, 1, 1},
  {&__pyx_kp_s_Hypergraph_Edges_s_Vertices_s, __pyx_k_Hypergraph_Edges_s_Vertices_s, sizeof(__pyx_k_Hypergraph_Edges_s_Vertices_s), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_Inside, __pyx_k_Inside, sizeof(__pyx_k_Inside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_compute_marginals, __pyx_k_Inside_compute_marginals, sizeof(__pyx_k_Inside_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_inside, __pyx_k_Inside_inside, sizeof(__pyx_k_Inside_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_outside, __pyx_k_Inside_outside, sizeof(__pyx_k_Inside_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_prune_hypergraph, __pyx_k_Inside_prune_hypergraph, sizeof(__pyx_k_Inside_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_viterbi, __pyx_k_Inside_viterbi, sizeof(__pyx_k_Inside_viterbi), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_LogViterbi, __pyx_k_LogViterbi, sizeof(__pyx_k_LogViterbi), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_compute_marginals, __pyx_k_LogViterbi_compute_marginals, sizeof(__pyx_k_LogViterbi_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_inside, __pyx_k_LogViterbi_inside, sizeof(__pyx_k_LogViterbi_inside), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_outside, __pyx_k_LogViterbi_outside, sizeof(__pyx_k_LogViterbi_outside), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_prune_hypergraph, __pyx_k_LogViterbi_prune_hypergraph, sizeof(__pyx_k_LogViterbi_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_viterbi, __pyx_k_LogViterbi_viterbi, sizeof(__pyx_k_LogViterbi_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_Marginals, __pyx_k_Marginals, sizeof(__pyx_k_Marginals), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector, __pyx_k_MaxSparseVector, sizeof(__pyx_k_MaxSparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_compute_marginal, __pyx_k_MaxSparseVector_compute_marginal, sizeof(__pyx_k_MaxSparseVector_compute_marginal), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_inside, __pyx_k_MaxSparseVector_inside, sizeof(__pyx_k_MaxSparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_outside, __pyx_k_MaxSparseVector_outside, sizeof(__pyx_k_MaxSparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_prune_hypergraph, __pyx_k_MaxSparseVector_prune_hypergraph, sizeof(__pyx_k_MaxSparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_MinMax, __pyx_k_MinMax, sizeof(__pyx_k_MinMax), 0, 0, 1, 1},
  {&__pyx_n_s_MinMax_compute_marginals, __pyx_k_MinMax_compute_marginals, sizeof(__pyx_k_MinMax_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_MinMax_inside, __pyx_k_MinMax_inside, sizeof(__pyx_k_MinMax_inside), 0, 0, 1, 1},
  {&__pyx_n_s_MinMax_outside, __pyx_k_MinMax_outside, sizeof(__pyx_k_MinMax_outside), 0, 0, 1, 1},
  {&__pyx_n_s_MinMax_prune_hypergraph, __pyx_k_MinMax_prune_hypergraph, sizeof(__pyx_k_MinMax_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector, __pyx_k_MinSparseVector, sizeof(__pyx_k_MinSparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_compute_marginal, __pyx_k_MinSparseVector_compute_marginal, sizeof(__pyx_k_MinSparseVector_compute_marginal), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_inside, __pyx_k_MinSparseVector_inside, sizeof(__pyx_k_MinSparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_outside, __pyx_k_MinSparseVector_outside, sizeof(__pyx_k_MinSparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_prune_hypergraph, __pyx_k_MinSparseVector_prune_hypergraph, sizeof(__pyx_k_MinSparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_kp_s_Must_constuct_graph_in_with_bloc, __pyx_k_Must_constuct_graph_in_with_bloc, sizeof(__pyx_k_Must_constuct_graph_in_with_bloc), 0, 0, 1, 0},
  {&__pyx_kp_s_NODE_d, __pyx_k_NODE_d, sizeof(__pyx_k_NODE_d), 0, 0, 1, 0},
  {&__pyx_kp_s_No_inequality_on_paths, __pyx_k_No_inequality_on_paths, sizeof(__pyx_k_No_inequality_on_paths), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Bool_m, __pyx_k_Only_nodes_and_edges_have_Bool_m, sizeof(__pyx_k_Only_nodes_and_edges_have_Bool_m), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Counti, __pyx_k_Only_nodes_and_edges_have_Counti, sizeof(__pyx_k_Only_nodes_and_edges_have_Counti), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Inside, __pyx_k_Only_nodes_and_edges_have_Inside, sizeof(__pyx_k_Only_nodes_and_edges_have_Inside), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_LogVit, __pyx_k_Only_nodes_and_edges_have_LogVit, sizeof(__pyx_k_Only_nodes_and_edges_have_LogVit), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa, __pyx_k_Only_nodes_and_edges_have_MaxSpa, sizeof(__pyx_k_Only_nodes_and_edges_have_MaxSpa), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_MinMax, __pyx_k_Only_nodes_and_edges_have_MinMax, sizeof(__pyx_k_Only_nodes_and_edges_have_MinMax), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_MinSpa, __pyx_k_Only_nodes_and_edges_have_MinSpa, sizeof(__pyx_k_Only_nodes_and_edges_have_MinSpa), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Sparse, __pyx_k_Only_nodes_and_edges_have_Sparse, sizeof(__pyx_k_Only_nodes_and_edges_have_Sparse), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Viterb, __pyx_k_Only_nodes_and_edges_have_Viterb, sizeof(__pyx_k_Only_nodes_and_edges_have_Viterb), 0, 0, 1, 0},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Passed_s, __pyx_k_Passed_s, sizeof(__pyx_k_Passed_s), 0, 0, 1, 0},
  {&__pyx_n_s_Potentials, __pyx_k_Potentials, sizeof(__pyx_k_Potentials), 0, 0, 1, 1},
  {&__pyx_kp_s_Received_s, __pyx_k_Received_s, sizeof(__pyx_k_Received_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Root_s, __pyx_k_Root_s, sizeof(__pyx_k_Root_s), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector, __pyx_k_SparseVector, sizeof(__pyx_k_SparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_compute_marginals, __pyx_k_SparseVector_compute_marginals, sizeof(__pyx_k_SparseVector_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_inside, __pyx_k_SparseVector_inside, sizeof(__pyx_k_SparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_outside, __pyx_k_SparseVector_outside, sizeof(__pyx_k_SparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_prune_hypergraph, __pyx_k_SparseVector_prune_hypergraph, sizeof(__pyx_k_SparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_kp_s_There_is_no_edge_labeling, __pyx_k_There_is_no_edge_labeling, sizeof(__pyx_k_There_is_no_edge_labeling), 0, 0, 1, 0},
  {&__pyx_kp_s_There_is_no_node_labeling, __pyx_k_There_is_no_node_labeling, sizeof(__pyx_k_There_is_no_node_labeling), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi, __pyx_k_Viterbi, sizeof(__pyx_k_Viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_compute_marginals, __pyx_k_Viterbi_compute_marginals, sizeof(__pyx_k_Viterbi_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_inside, __pyx_k_Viterbi_inside, sizeof(__pyx_k_Viterbi_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_outside, __pyx_k_Viterbi_outside, sizeof(__pyx_k_Viterbi_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_prune_hypergraph, __pyx_k_Viterbi_prune_hypergraph, sizeof(__pyx_k_Viterbi_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_viterbi, __pyx_k_Viterbi_viterbi, sizeof(__pyx_k_Viterbi_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_best_path, __pyx_k_best_path, sizeof(__pyx_k_best_path), 0, 0, 1, 1},
  {&__pyx_n_s_bias, __pyx_k_bias, sizeof(__pyx_k_bias), 0, 0, 1, 1},
  {&__pyx_n_s_bias_2, __pyx_k_bias_2, sizeof(__pyx_k_bias_2), 0, 0, 1, 1},
  {&__pyx_n_s_binarize, __pyx_k_binarize, sizeof(__pyx_k_binarize), 0, 0, 1, 1},
  {&__pyx_n_s_bool_potentials, __pyx_k_bool_potentials, sizeof(__pyx_k_bool_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_bp, __pyx_k_bp, sizeof(__pyx_k_bp), 0, 0, 1, 1},
  {&__pyx_n_s_build_domain_hypergraph, __pyx_k_build_domain_hypergraph, sizeof(__pyx_k_build_domain_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_build_range_hypergraph, __pyx_k_build_range_hypergraph, sizeof(__pyx_k_build_range_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_chart, __pyx_k_chart, sizeof(__pyx_k_chart), 0, 0, 1, 1},
  {&__pyx_n_s_cinit___locals_lambda, __pyx_k_cinit___locals_lambda, sizeof(__pyx_k_cinit___locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_compute_marginals, __pyx_k_compute_marginals, sizeof(__pyx_k_compute_marginals), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_created, __pyx_k_created, sizeof(__pyx_k_created), 0, 0, 1, 1},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_kp_s_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 0, 1, 0},
  {&__pyx_n_s_d_3, __pyx_k_d_3, sizeof(__pyx_k_d_3), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_domain_hypergraph, __pyx_k_domain_hypergraph, sizeof(__pyx_k_domain_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_edge_labels, __pyx_k_edge_labels, sizeof(__pyx_k_edge_labels), 0, 0, 1, 1},
  {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
  {&__pyx_n_s_extend_hypergraph_by_count, __pyx_k_extend_hypergraph_by_count, sizeof(__pyx_k_extend_hypergraph_by_count), 0, 0, 1, 1},
  {&__pyx_n_s_filt, __pyx_k_filt, sizeof(__pyx_k_filt), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_from_value, __pyx_k_from_value, sizeof(__pyx_k_from_value), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_goal, __pyx_k_goal, sizeof(__pyx_k_goal), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_head, __pyx_k_head, sizeof(__pyx_k_head), 0, 0, 1, 1},
  {&__pyx_kp_s_home_srush_Projects_decoding_py, __pyx_k_home_srush_Projects_decoding_py, sizeof(__pyx_k_home_srush_Projects_decoding_py), 0, 0, 1, 0},
  {&__pyx_n_s_hypergraph_map, __pyx_k_hypergraph_map, sizeof(__pyx_k_hypergraph_map), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_map, __pyx_k_in_map, sizeof(__pyx_k_in_map), 0, 0, 1, 1},
  {&__pyx_n_s_in_vec, __pyx_k_in_vec, sizeof(__pyx_k_in_vec), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_inside, __pyx_k_inside, sizeof(__pyx_k_inside), 0, 0, 1, 1},
  {&__pyx_n_s_inside_chart, __pyx_k_inside_chart, sizeof(__pyx_k_inside_chart), 0, 0, 1, 1},
  {&__pyx_n_s_inside_values, __pyx_k_inside_values, sizeof(__pyx_k_inside_values), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lower_limit, __pyx_k_lower_limit, sizeof(__pyx_k_lower_limit), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_pruning_projections, __pyx_k_make_pruning_projections, sizeof(__pyx_k_make_pruning_projections), 0, 0, 1, 1},
  {&__pyx_n_s_marginals, __pyx_k_marginals, sizeof(__pyx_k_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_node_labels, __pyx_k_node_labels, sizeof(__pyx_k_node_labels), 0, 0, 1, 1},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_one, __pyx_k_one, sizeof(__pyx_k_one), 0, 0, 1, 1},
  {&__pyx_n_s_one_raw, __pyx_k_one_raw, sizeof(__pyx_k_one_raw), 0, 0, 1, 1},
  {&__pyx_n_s_out_chart, __pyx_k_out_chart, sizeof(__pyx_k_out_chart), 0, 0, 1, 1},
  {&__pyx_n_s_outside, __pyx_k_outside, sizeof(__pyx_k_outside), 0, 0, 1, 1},
  {&__pyx_n_s_outside_values, __pyx_k_outside_values, sizeof(__pyx_k_outside_values), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pairwise_dot, __pyx_k_pairwise_dot, sizeof(__pyx_k_pairwise_dot), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_potentials, __pyx_k_potentials, sizeof(__pyx_k_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_project, __pyx_k_project, sizeof(__pyx_k_project), 0, 0, 1, 1},
  {&__pyx_n_s_projection, __pyx_k_projection, sizeof(__pyx_k_projection), 0, 0, 1, 1},
  {&__pyx_n_s_prune, __pyx_k_prune, sizeof(__pyx_k_prune), 0, 0, 1, 1},
  {&__pyx_n_s_prune_hypergraph, __pyx_k_prune_hypergraph, sizeof(__pyx_k_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_pydecode_potentials, __pyx_k_pydecode_potentials, sizeof(__pyx_k_pydecode_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_range_hypergraph, __pyx_k_range_hypergraph, sizeof(__pyx_k_range_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_removed, __pyx_k_removed, sizeof(__pyx_k_removed), 0, 0, 1, 1},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_s_rvec, __pyx_k_rvec, sizeof(__pyx_k_rvec), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_subedges, __pyx_k_subedges, sizeof(__pyx_k_subedges), 0, 0, 1, 1},
  {&__pyx_n_s_tail, __pyx_k_tail, sizeof(__pyx_k_tail), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thisptr, __pyx_k_thisptr, sizeof(__pyx_k_thisptr), 0, 0, 1, 1},
  {&__pyx_n_s_thres, __pyx_k_thres, sizeof(__pyx_k_thres), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_upper_limit, __pyx_k_upper_limit, sizeof(__pyx_k_upper_limit), 0, 0, 1, 1},
  {&__pyx_n_s_used_back, __pyx_k_used_back, sizeof(__pyx_k_used_back), 0, 0, 1, 1},
  {&__pyx_n_s_used_chart, __pyx_k_used_chart, sizeof(__pyx_k_used_chart), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_vec, __pyx_k_vec, sizeof(__pyx_k_vec), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_viterbi, __pyx_k_viterbi, sizeof(__pyx_k_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zero, __pyx_k_zero, sizeof(__pyx_k_zero), 0, 0, 1, 1},
  {&__pyx_n_s_zero_raw, __pyx_k_zero_raw, sizeof(__pyx_k_zero_raw), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pydecode/potentials.pyx":18
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_There_is_no_edge_labeling); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pydecode/potentials.pyx":24
 *         if isinstance(obj, Vertex):
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_There_is_no_node_labeling); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pydecode/potentials.pyx":218
 * 
 *         if not self.started:
 *             raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                 "Must constuct graph in 'with' block.")
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Must_constuct_graph_in_with_bloc); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pydecode/potentials.pyx":236
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "An edge must have at least one tail node.")
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_An_edge_must_have_at_least_one_t); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pydecode/potentials.pyx":468
 *         if op == 3:
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_No_inequality_on_paths); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "/usr/local/lib/python2.7/dist-packages/Cython-0.21dev-py2.7-linux-x86_64.egg/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":127
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "View.MemoryView":130
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(format, unicode):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":142
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":170
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":186
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "View.MemoryView":445
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "View.MemoryView":521
 *             if self.view.strides == NULL:
 * 
 *                 raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *             return tuple([self.view.strides[i] for i in xrange(self.view.ndim)])
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":638
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_tuple__23 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "View.MemoryView":641
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_tuple__24 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "View.MemoryView":652
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "View.MemoryView":660
 *     for i in range(ndim):
 *         if suboffsets[i] >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pydecode/potentials.pyx":484
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_init, 484, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":487
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_str, 487, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":492
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_value); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_init, 492, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":495
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_str, 495, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":958
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 958, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 964, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":968
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 968, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":972
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 972, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":976
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_one())
 * 
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 976, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1080
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */
  __pyx_tuple__41 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1088
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */
  __pyx_tuple__43 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1088, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1100
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */
  __pyx_tuple__45 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 1100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__47 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "pydecode/potentials.pyx":1122
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1129
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__50 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1316
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 1316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1322
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 1322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1326
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 1326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1330
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 1330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1334
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 1334, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1438
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1438, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1446
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1446, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1458
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */
  __pyx_tuple__62 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 1458, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__64 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "pydecode/potentials.pyx":1480
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */
  __pyx_tuple__65 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1487
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1487, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1674
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 1674, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1680
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 1680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1684
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 1684, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1688
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_zero())
 * 
 */
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 1688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1692
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_one())
 * 
 */
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 1692, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1796
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */
  __pyx_tuple__75 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1796, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1804
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */
  __pyx_tuple__77 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1804, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1816
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */
  __pyx_tuple__79 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 1816, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__81 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "pydecode/potentials.pyx":1838
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */
  __pyx_tuple__82 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1838, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1845
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__84 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1845, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2032
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 */
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2032, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2038, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2042
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2042, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2046
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_zero())
 * 
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2046, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2050
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_one())
 * 
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2050, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2146
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2146, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2154
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinMaxPotentials potentials,
 *                 MinMaxChart inside_chart):
 */
  __pyx_tuple__94 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2154, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2166
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinMaxPotentials potentials):
 *         cdef const CMinMaxMarginals *marginals = \
 */
  __pyx_tuple__96 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2166, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2173
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinMaxPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__98 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2342
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2342, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2348
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2352
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2352, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2356
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2356, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2360
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2360, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2440
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */
  __pyx_tuple__106 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2440, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2448
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */
  __pyx_tuple__108 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2448, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2460
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__110 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2460, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2467
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__112 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2467, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2636
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2636, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2642
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2642, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2646
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2646, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2650
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 */
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2650, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2654
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 */
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2654, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2734
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */
  __pyx_tuple__120 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2734, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2742
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */
  __pyx_tuple__122 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2742, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2754
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__124 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2761
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__126 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2761, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2930
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2930, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2936
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2940
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2940, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2944
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 */
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2944, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2948
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 */
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2948, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3028
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */
  __pyx_tuple__134 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 3028, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3036
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */
  __pyx_tuple__136 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 3036, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3048
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__138 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 3048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3055
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__140 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 3055, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3242
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 3242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3248
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 3248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3252
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 3252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3256
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_zero())
 * 
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 3256, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3260
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_one())
 * 
 */
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 3260, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3364
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */
  __pyx_tuple__148 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 3364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3372
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */
  __pyx_tuple__150 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 3372, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3384
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */
  __pyx_tuple__152 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 3384, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__154 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "pydecode/potentials.pyx":3406
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */
  __pyx_tuple__155 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 3406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3413
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__157 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 3413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3583
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__159)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 3583, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3589
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 3589, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3593
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 3593, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3597
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_zero())
 * 
 */
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 3597, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3601
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_one())
 * 
 */
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 3601, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3689
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */
  __pyx_tuple__165 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__165)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 3689, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3697
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */
  __pyx_tuple__167 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__167)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 3697, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3709
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */
  __pyx_tuple__169 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__169)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 3709, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__171 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__171)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "pydecode/potentials.pyx":3731
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */
  __pyx_tuple__172 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__172)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 3731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3738
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__174 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__174)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__175 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 3738, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__175)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3787
 * 
 * 
 * def inside(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the inside values for potentials.
 */
  __pyx_tuple__176 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_potentials); if (unlikely(!__pyx_tuple__176)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 3787, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3812
 * 
 * 
 * def outside(Hypergraph graph, Potentials potentials, Chart inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the outside values for potentials.
 */
  __pyx_tuple__178 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart); if (unlikely(!__pyx_tuple__178)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 3812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3841
 * 
 * 
 * def best_path(Hypergraph graph, Potentials potentials, Chart chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     Find the best path through a hypergraph for a given set of potentials.
 */
  __pyx_tuple__180 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__180)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_best_path, 3841, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3870
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     return prune(graph, potentials, thres)
 * 
 */
  __pyx_tuple__182 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_thres); if (unlikely(!__pyx_tuple__182)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 3870, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3873
 *     return prune(graph, potentials, thres)
 * 
 * def prune(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     Prune hyperedges with low marginal score from the hypergraph.
 */
  __pyx_tuple__184 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_thres); if (unlikely(!__pyx_tuple__184)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune, 3873, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3897
 * 
 * 
 * def compute_marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     return marginals(graph, potentials)
 * 
 */
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_potentials); if (unlikely(!__pyx_tuple__186)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 3897, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3900
 *     return marginals(graph, potentials)
 * 
 * def marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute marginals for hypergraph and potentials.
 */
  __pyx_tuple__188 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_potentials); if (unlikely(!__pyx_tuple__188)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_marginals, 3900, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3923
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */
  __pyx_tuple__190 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_filt, __pyx_n_s_projection); if (unlikely(!__pyx_tuple__190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_make_pruning_projections, 3923, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3935
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Project a graph based on a set of boolean potentials.
 */
  __pyx_tuple__192 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_filter); if (unlikely(!__pyx_tuple__192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__192, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_project, 3935, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3957
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */
  __pyx_tuple__194 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_hypergraph_map); if (unlikely(!__pyx_tuple__194)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_codeobj__195 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__194, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_binarize, 3957, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3974
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */
  __pyx_tuple__196 = PyTuple_Pack(5, __pyx_n_s_potentials, __pyx_n_s_vec, __pyx_n_s_weights, __pyx_n_s_rvec, __pyx_n_s_i); if (unlikely(!__pyx_tuple__196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__196, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_pairwise_dot, 3974, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3999
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */
  __pyx_tuple__198 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_lower_limit, __pyx_n_s_upper_limit, __pyx_n_s_goal, __pyx_n_s_projection); if (unlikely(!__pyx_tuple__198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_codeobj__199 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__198, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_extend_hypergraph_by_count, 3999, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__199)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "View.MemoryView":276
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__200 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__200)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);

  /* "View.MemoryView":277
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__201 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__201)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);

  /* "View.MemoryView":278
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__202)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);

  /* "View.MemoryView":281
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__203 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__203)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);

  /* "View.MemoryView":282
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__204 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__204)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpotentials(void); /*proto*/
PyMODINIT_FUNC initpotentials(void)
#else
PyMODINIT_FUNC PyInit_potentials(void); /*proto*/
PyMODINIT_FUNC PyInit_potentials(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_potentials(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("potentials"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pydecode__potentials) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pydecode.potentials")) {
      if (unlikely(PyDict_SetItemString(modules, "pydecode.potentials", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_8pydecode_10potentials__hypergraph_registry_counts = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Labeling) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Labeling.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Labeling", (PyObject *)&__pyx_type_8pydecode_10potentials_Labeling) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Labeling = &__pyx_type_8pydecode_10potentials_Labeling;
  __pyx_vtabptr_8pydecode_10potentials__LazyEdges = &__pyx_vtable_8pydecode_10potentials__LazyEdges;
  __pyx_vtable_8pydecode_10potentials__LazyEdges.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__LazyEdges *, std::vector<Hyperedge const *>))__pyx_f_8pydecode_10potentials_10_LazyEdges_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__LazyEdges.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__LazyEdges.tp_dict, __pyx_vtabptr_8pydecode_10potentials__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LazyEdges", (PyObject *)&__pyx_type_8pydecode_10potentials__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LazyEdges = &__pyx_type_8pydecode_10potentials__LazyEdges;
  __pyx_vtabptr_8pydecode_10potentials__LazyVertices = &__pyx_vtable_8pydecode_10potentials__LazyVertices;
  __pyx_vtable_8pydecode_10potentials__LazyVertices.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__LazyVertices *, std::vector<Hypernode const *>))__pyx_f_8pydecode_10potentials_13_LazyVertices_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__LazyVertices) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__LazyVertices.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__LazyVertices.tp_dict, __pyx_vtabptr_8pydecode_10potentials__LazyVertices) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LazyVertices", (PyObject *)&__pyx_type_8pydecode_10potentials__LazyVertices) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LazyVertices = &__pyx_type_8pydecode_10potentials__LazyVertices;
  __pyx_vtabptr_8pydecode_10potentials_Hypergraph = &__pyx_vtable_8pydecode_10potentials_Hypergraph;
  __pyx_vtable_8pydecode_10potentials_Hypergraph.init = (struct __pyx_obj_8pydecode_10potentials_Hypergraph *(*)(struct __pyx_obj_8pydecode_10potentials_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10potentials_Labeling *))__pyx_f_8pydecode_10potentials_10Hypergraph_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Hypergraph.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_Hypergraph.tp_dict, __pyx_vtabptr_8pydecode_10potentials_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Hypergraph", (PyObject *)&__pyx_type_8pydecode_10potentials_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Hypergraph = &__pyx_type_8pydecode_10potentials_Hypergraph;
  __pyx_vtabptr_8pydecode_10potentials_GraphBuilder = &__pyx_vtable_8pydecode_10potentials_GraphBuilder;
  __pyx_vtable_8pydecode_10potentials_GraphBuilder.init = (struct __pyx_obj_8pydecode_10potentials_GraphBuilder *(*)(struct __pyx_obj_8pydecode_10potentials_GraphBuilder *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *, Hypergraph *))__pyx_f_8pydecode_10potentials_12GraphBuilder_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_GraphBuilder.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_GraphBuilder.tp_dict, __pyx_vtabptr_8pydecode_10potentials_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GraphBuilder", (PyObject *)&__pyx_type_8pydecode_10potentials_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_GraphBuilder = &__pyx_type_8pydecode_10potentials_GraphBuilder;
  __pyx_vtabptr_8pydecode_10potentials_Vertex = &__pyx_vtable_8pydecode_10potentials_Vertex;
  __pyx_vtable_8pydecode_10potentials_Vertex.init = (struct __pyx_obj_8pydecode_10potentials_Vertex *(*)(struct __pyx_obj_8pydecode_10potentials_Vertex *, Hypernode const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_6Vertex_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Vertex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Vertex.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_Vertex.tp_dict, __pyx_vtabptr_8pydecode_10potentials_Vertex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Vertex", (PyObject *)&__pyx_type_8pydecode_10potentials_Vertex) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Vertex = &__pyx_type_8pydecode_10potentials_Vertex;
  __pyx_vtabptr_8pydecode_10potentials_Edge = &__pyx_vtable_8pydecode_10potentials_Edge;
  __pyx_vtable_8pydecode_10potentials_Edge.init = (struct __pyx_obj_8pydecode_10potentials_Edge *(*)(struct __pyx_obj_8pydecode_10potentials_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_4Edge_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Edge.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_Edge.tp_dict, __pyx_vtabptr_8pydecode_10potentials_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Edge", (PyObject *)&__pyx_type_8pydecode_10potentials_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Edge = &__pyx_type_8pydecode_10potentials_Edge;
  __pyx_vtabptr_8pydecode_10potentials_Path = &__pyx_vtable_8pydecode_10potentials_Path;
  __pyx_vtable_8pydecode_10potentials_Path.init = (struct __pyx_obj_8pydecode_10potentials_Path *(*)(struct __pyx_obj_8pydecode_10potentials_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_4Path_init;
  __pyx_vtable_8pydecode_10potentials_Path.equal = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_Path *, struct __pyx_obj_8pydecode_10potentials_Path *))__pyx_f_8pydecode_10potentials_4Path_equal;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Path.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_8pydecode_10potentials_Path, "__contains__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8pydecode_10potentials_4Path_6__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8pydecode_10potentials_4Path_6__contains__.doc = __pyx_doc_8pydecode_10potentials_4Path_6__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8pydecode_10potentials_4Path_6__contains__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_Path.tp_dict, __pyx_vtabptr_8pydecode_10potentials_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Path", (PyObject *)&__pyx_type_8pydecode_10potentials_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Path = &__pyx_type_8pydecode_10potentials_Path;
  __pyx_vtabptr_8pydecode_10potentials_HypergraphMap = &__pyx_vtable_8pydecode_10potentials_HypergraphMap;
  __pyx_vtable_8pydecode_10potentials_HypergraphMap.init = (struct __pyx_obj_8pydecode_10potentials_HypergraphMap *(*)(struct __pyx_obj_8pydecode_10potentials_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_13HypergraphMap_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_HypergraphMap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_HypergraphMap.tp_dict, __pyx_vtabptr_8pydecode_10potentials_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "HypergraphMap", (PyObject *)&__pyx_type_8pydecode_10potentials_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_HypergraphMap = &__pyx_type_8pydecode_10potentials_HypergraphMap;
  __pyx_vtabptr_8pydecode_10potentials_BackPointers = &__pyx_vtable_8pydecode_10potentials_BackPointers;
  __pyx_vtable_8pydecode_10potentials_BackPointers.init = (struct __pyx_obj_8pydecode_10potentials_BackPointers *(*)(struct __pyx_obj_8pydecode_10potentials_BackPointers *, BackPointers const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_12BackPointers_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BackPointers.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_BackPointers.tp_dict, __pyx_vtabptr_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BackPointers", (PyObject *)&__pyx_type_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BackPointers = &__pyx_type_8pydecode_10potentials_BackPointers;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Potentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Potentials.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Potentials", (PyObject *)&__pyx_type_8pydecode_10potentials_Potentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Potentials = &__pyx_type_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Chart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Chart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Chart", (PyObject *)&__pyx_type_8pydecode_10potentials_Chart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Chart = &__pyx_type_8pydecode_10potentials_Chart;
  __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials = &__pyx_vtable_8pydecode_10potentials_ViterbiPotentials;
  __pyx_vtable_8pydecode_10potentials_ViterbiPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *, HypergraphPotentials<ViterbiPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_17ViterbiPotentials_init;
  __pyx_type_8pydecode_10potentials_ViterbiPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_ViterbiPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_ViterbiPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ViterbiPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiPotentials = &__pyx_type_8pydecode_10potentials_ViterbiPotentials;
  __pyx_type_8pydecode_10potentials_ViterbiChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_ViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_ViterbiChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ViterbiChart", (PyObject *)&__pyx_type_8pydecode_10potentials_ViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiChart = &__pyx_type_8pydecode_10potentials_ViterbiChart;
  __pyx_vtabptr_8pydecode_10potentials_ViterbiValue = &__pyx_vtable_8pydecode_10potentials_ViterbiValue;
  __pyx_vtable_8pydecode_10potentials_ViterbiValue.init = (struct __pyx_obj_8pydecode_10potentials_ViterbiValue *(*)(struct __pyx_obj_8pydecode_10potentials_ViterbiValue *, double))__pyx_f_8pydecode_10potentials_12ViterbiValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_ViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_ViterbiValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_ViterbiValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_ViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ViterbiValue", (PyObject *)&__pyx_type_8pydecode_10potentials_ViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiValue = &__pyx_type_8pydecode_10potentials_ViterbiValue;
  __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials = &__pyx_vtable_8pydecode_10potentials_LogViterbiPotentials;
  __pyx_vtable_8pydecode_10potentials_LogViterbiPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *, HypergraphPotentials<LogViterbiPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_20LogViterbiPotentials_init;
  __pyx_type_8pydecode_10potentials_LogViterbiPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_LogViterbiPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_LogViterbiPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LogViterbiPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = &__pyx_type_8pydecode_10potentials_LogViterbiPotentials;
  __pyx_type_8pydecode_10potentials_LogViterbiChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_LogViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_LogViterbiChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "LogViterbiChart", (PyObject *)&__pyx_type_8pydecode_10potentials_LogViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiChart = &__pyx_type_8pydecode_10potentials_LogViterbiChart;
  __pyx_vtabptr_8pydecode_10potentials_LogViterbiValue = &__pyx_vtable_8pydecode_10potentials_LogViterbiValue;
  __pyx_vtable_8pydecode_10potentials_LogViterbiValue.init = (struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *(*)(struct __pyx_obj_8pydecode_10potentials_LogViterbiValue *, double))__pyx_f_8pydecode_10potentials_15LogViterbiValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_LogViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_LogViterbiValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_LogViterbiValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_LogViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LogViterbiValue", (PyObject *)&__pyx_type_8pydecode_10potentials_LogViterbiValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiValue = &__pyx_type_8pydecode_10potentials_LogViterbiValue;
  __pyx_vtabptr_8pydecode_10potentials_InsidePotentials = &__pyx_vtable_8pydecode_10potentials_InsidePotentials;
  __pyx_vtable_8pydecode_10potentials_InsidePotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *, HypergraphPotentials<InsidePotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_16InsidePotentials_init;
  __pyx_type_8pydecode_10potentials_InsidePotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_InsidePotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_InsidePotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InsidePotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsidePotentials = &__pyx_type_8pydecode_10potentials_InsidePotentials;
  __pyx_type_8pydecode_10potentials_InsideChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_InsideChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_InsideChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "InsideChart", (PyObject *)&__pyx_type_8pydecode_10potentials_InsideChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsideChart = &__pyx_type_8pydecode_10potentials_InsideChart;
  __pyx_vtabptr_8pydecode_10potentials_InsideValue = &__pyx_vtable_8pydecode_10potentials_InsideValue;
  __pyx_vtable_8pydecode_10potentials_InsideValue.init = (struct __pyx_obj_8pydecode_10potentials_InsideValue *(*)(struct __pyx_obj_8pydecode_10potentials_InsideValue *, double))__pyx_f_8pydecode_10potentials_11InsideValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_InsideValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_InsideValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_InsideValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_InsideValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InsideValue", (PyObject *)&__pyx_type_8pydecode_10potentials_InsideValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsideValue = &__pyx_type_8pydecode_10potentials_InsideValue;
  __pyx_vtabptr_8pydecode_10potentials_MinMaxPotentials = &__pyx_vtable_8pydecode_10potentials_MinMaxPotentials;
  __pyx_vtable_8pydecode_10potentials_MinMaxPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_MinMaxPotentials *, HypergraphPotentials<MinMaxPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_16MinMaxPotentials_init;
  __pyx_type_8pydecode_10potentials_MinMaxPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinMaxPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinMaxPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MinMaxPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MinMaxPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MinMaxPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_MinMaxPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinMaxPotentials = &__pyx_type_8pydecode_10potentials_MinMaxPotentials;
  __pyx_type_8pydecode_10potentials_MinMaxChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinMaxChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinMaxChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "MinMaxChart", (PyObject *)&__pyx_type_8pydecode_10potentials_MinMaxChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinMaxChart = &__pyx_type_8pydecode_10potentials_MinMaxChart;
  __pyx_vtabptr_8pydecode_10potentials_MinMaxValue = &__pyx_vtable_8pydecode_10potentials_MinMaxValue;
  __pyx_vtable_8pydecode_10potentials_MinMaxValue.init = (struct __pyx_obj_8pydecode_10potentials_MinMaxValue *(*)(struct __pyx_obj_8pydecode_10potentials_MinMaxValue *, double))__pyx_f_8pydecode_10potentials_11MinMaxValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinMaxValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinMaxValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MinMaxValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MinMaxValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MinMaxValue", (PyObject *)&__pyx_type_8pydecode_10potentials_MinMaxValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinMaxValue = &__pyx_type_8pydecode_10potentials_MinMaxValue;
  __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_SparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_SparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *, HypergraphPotentials<SparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_22SparseVectorPotentials_init;
  __pyx_type_8pydecode_10potentials_SparseVectorPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_SparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_SparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = &__pyx_type_8pydecode_10potentials_SparseVectorPotentials;
  __pyx_type_8pydecode_10potentials_SparseVectorChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_SparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_SparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "SparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_SparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorChart = &__pyx_type_8pydecode_10potentials_SparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials_SparseVectorValue = &__pyx_vtable_8pydecode_10potentials_SparseVectorValue;
  __pyx_vtable_8pydecode_10potentials_SparseVectorValue.init = (struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *(*)(struct __pyx_obj_8pydecode_10potentials_SparseVectorValue *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_17SparseVectorValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_SparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_SparseVectorValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_SparseVectorValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_SparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SparseVectorValue", (PyObject *)&__pyx_type_8pydecode_10potentials_SparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorValue = &__pyx_type_8pydecode_10potentials_SparseVectorValue;
  __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *, HypergraphPotentials<MinSparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_25MinSparseVectorPotentials_init;
  __pyx_type_8pydecode_10potentials_MinSparseVectorPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinSparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MinSparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = &__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials;
  __pyx_type_8pydecode_10potentials_MinSparseVectorChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinSparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "MinSparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_MinSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = &__pyx_type_8pydecode_10potentials_MinSparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorValue = &__pyx_vtable_8pydecode_10potentials_MinSparseVectorValue;
  __pyx_vtable_8pydecode_10potentials_MinSparseVectorValue.init = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *(*)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorValue *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_20MinSparseVectorValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinSparseVectorValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MinSparseVectorValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MinSparseVectorValue", (PyObject *)&__pyx_type_8pydecode_10potentials_MinSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorValue = &__pyx_type_8pydecode_10potentials_MinSparseVectorValue;
  __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *, HypergraphPotentials<MaxSparseVectorPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_25MaxSparseVectorPotentials_init;
  __pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MaxSparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = &__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials;
  __pyx_type_8pydecode_10potentials_MaxSparseVectorChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MaxSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MaxSparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "MaxSparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_MaxSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = &__pyx_type_8pydecode_10potentials_MaxSparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorValue = &__pyx_vtable_8pydecode_10potentials_MaxSparseVectorValue;
  __pyx_vtable_8pydecode_10potentials_MaxSparseVectorValue.init = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *(*)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorValue *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_20MaxSparseVectorValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MaxSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MaxSparseVectorValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MaxSparseVectorValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MaxSparseVectorValue", (PyObject *)&__pyx_type_8pydecode_10potentials_MaxSparseVectorValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue = &__pyx_type_8pydecode_10potentials_MaxSparseVectorValue;
  __pyx_vtabptr_8pydecode_10potentials_CountingPotentials = &__pyx_vtable_8pydecode_10potentials_CountingPotentials;
  __pyx_vtable_8pydecode_10potentials_CountingPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *, HypergraphPotentials<CountingPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_18CountingPotentials_init;
  __pyx_type_8pydecode_10potentials_CountingPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_CountingPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_CountingPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CountingPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingPotentials = &__pyx_type_8pydecode_10potentials_CountingPotentials;
  __pyx_type_8pydecode_10potentials_CountingChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_CountingChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_CountingChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "CountingChart", (PyObject *)&__pyx_type_8pydecode_10potentials_CountingChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingChart = &__pyx_type_8pydecode_10potentials_CountingChart;
  __pyx_vtabptr_8pydecode_10potentials_CountingValue = &__pyx_vtable_8pydecode_10potentials_CountingValue;
  __pyx_vtable_8pydecode_10potentials_CountingValue.init = (struct __pyx_obj_8pydecode_10potentials_CountingValue *(*)(struct __pyx_obj_8pydecode_10potentials_CountingValue *, int))__pyx_f_8pydecode_10potentials_13CountingValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_CountingValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_CountingValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_CountingValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_CountingValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CountingValue", (PyObject *)&__pyx_type_8pydecode_10potentials_CountingValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingValue = &__pyx_type_8pydecode_10potentials_CountingValue;
  __pyx_vtabptr_8pydecode_10potentials_BoolPotentials = &__pyx_vtable_8pydecode_10potentials_BoolPotentials;
  __pyx_vtable_8pydecode_10potentials_BoolPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *, HypergraphPotentials<BoolPotential> *, struct __pyx_obj_8pydecode_10potentials_HypergraphMap *))__pyx_f_8pydecode_10potentials_14BoolPotentials_init;
  __pyx_type_8pydecode_10potentials_BoolPotentials.tp_base = __pyx_ptype_8pydecode_10potentials_Potentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BoolPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_BoolPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BoolPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolPotentials = &__pyx_type_8pydecode_10potentials_BoolPotentials;
  __pyx_type_8pydecode_10potentials_BoolChart.tp_base = __pyx_ptype_8pydecode_10potentials_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BoolChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BoolChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "BoolChart", (PyObject *)&__pyx_type_8pydecode_10potentials_BoolChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolChart = &__pyx_type_8pydecode_10potentials_BoolChart;
  __pyx_vtabptr_8pydecode_10potentials_BoolValue = &__pyx_vtable_8pydecode_10potentials_BoolValue;
  __pyx_vtable_8pydecode_10potentials_BoolValue.init = (struct __pyx_obj_8pydecode_10potentials_BoolValue *(*)(struct __pyx_obj_8pydecode_10potentials_BoolValue *, bool))__pyx_f_8pydecode_10potentials_9BoolValue_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BoolValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BoolValue.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_BoolValue.tp_dict, __pyx_vtabptr_8pydecode_10potentials_BoolValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BoolValue", (PyObject *)&__pyx_type_8pydecode_10potentials_BoolValue) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolValue = &__pyx_type_8pydecode_10potentials_BoolValue;
  __pyx_vtabptr_8pydecode_10potentials_Node = &__pyx_vtable_8pydecode_10potentials_Node;
  __pyx_vtable_8pydecode_10potentials_Node.__pyx_base = *__pyx_vtabptr_8pydecode_10potentials_Vertex;
  __pyx_type_8pydecode_10potentials_Node.tp_base = __pyx_ptype_8pydecode_10potentials_Vertex;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Node.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_Node.tp_dict, __pyx_vtabptr_8pydecode_10potentials_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_8pydecode_10potentials_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Node = &__pyx_type_8pydecode_10potentials_Node;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_Marginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_Marginals.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "Marginals", (PyObject *)&__pyx_type_8pydecode_10potentials_Marginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_Marginals = &__pyx_type_8pydecode_10potentials_Marginals;
  __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals = &__pyx_vtable_8pydecode_10potentials__ViterbiMarginals;
  __pyx_vtable_8pydecode_10potentials__ViterbiMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *, Marginals<ViterbiPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_17_ViterbiMarginals_init;
  __pyx_type_8pydecode_10potentials__ViterbiMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__ViterbiMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__ViterbiMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_ViterbiMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__ViterbiMarginals = &__pyx_type_8pydecode_10potentials__ViterbiMarginals;
  __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals = &__pyx_vtable_8pydecode_10potentials__LogViterbiMarginals;
  __pyx_vtable_8pydecode_10potentials__LogViterbiMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *, Marginals<LogViterbiPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_20_LogViterbiMarginals_init;
  __pyx_type_8pydecode_10potentials__LogViterbiMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__LogViterbiMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__LogViterbiMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LogViterbiMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LogViterbiMarginals = &__pyx_type_8pydecode_10potentials__LogViterbiMarginals;
  __pyx_vtabptr_8pydecode_10potentials__InsideMarginals = &__pyx_vtable_8pydecode_10potentials__InsideMarginals;
  __pyx_vtable_8pydecode_10potentials__InsideMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *, Marginals<InsidePotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_16_InsideMarginals_init;
  __pyx_type_8pydecode_10potentials__InsideMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__InsideMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__InsideMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_InsideMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__InsideMarginals = &__pyx_type_8pydecode_10potentials__InsideMarginals;
  __pyx_vtabptr_8pydecode_10potentials__MinMaxMarginals = &__pyx_vtable_8pydecode_10potentials__MinMaxMarginals;
  __pyx_vtable_8pydecode_10potentials__MinMaxMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__MinMaxMarginals *, Marginals<MinMaxPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_16_MinMaxMarginals_init;
  __pyx_type_8pydecode_10potentials__MinMaxMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MinMaxMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MinMaxMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MinMaxMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MinMaxMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MinMaxMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__MinMaxMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MinMaxMarginals = &__pyx_type_8pydecode_10potentials__MinMaxMarginals;
  __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__SparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__SparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *, Marginals<SparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_22_SparseVectorMarginals_init;
  __pyx_type_8pydecode_10potentials__SparseVectorMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__SparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__SparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_SparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__SparseVectorMarginals = &__pyx_type_8pydecode_10potentials__SparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *, Marginals<MinSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_25_MinSparseVectorMarginals_init;
  __pyx_type_8pydecode_10potentials__MinSparseVectorMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MinSparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MinSparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals = &__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *, Marginals<MaxSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_25_MaxSparseVectorMarginals_init;
  __pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MaxSparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals = &__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__CountingMarginals = &__pyx_vtable_8pydecode_10potentials__CountingMarginals;
  __pyx_vtable_8pydecode_10potentials__CountingMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *, Marginals<CountingPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_18_CountingMarginals_init;
  __pyx_type_8pydecode_10potentials__CountingMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__CountingMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__CountingMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_CountingMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__CountingMarginals = &__pyx_type_8pydecode_10potentials__CountingMarginals;
  __pyx_vtabptr_8pydecode_10potentials__BoolMarginals = &__pyx_vtable_8pydecode_10potentials__BoolMarginals;
  __pyx_vtable_8pydecode_10potentials__BoolMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *, Marginals<BoolPotential> const *, struct __pyx_obj_8pydecode_10potentials_Hypergraph *))__pyx_f_8pydecode_10potentials_14_BoolMarginals_init;
  __pyx_type_8pydecode_10potentials__BoolMarginals.tp_base = __pyx_ptype_8pydecode_10potentials_Marginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__BoolMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__BoolMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_BoolMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__BoolMarginals = &__pyx_type_8pydecode_10potentials__BoolMarginals;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials___pyx_scope_struct____iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials___pyx_scope_struct____iter__.tp_print = 0;
  __pyx_ptype_8pydecode_10potentials___pyx_scope_struct____iter__ = &__pyx_type_8pydecode_10potentials___pyx_scope_struct____iter__;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_8pydecode_10potentials___pyx_scope_struct_1_genexpr = &__pyx_type_8pydecode_10potentials___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials___pyx_scope_struct_2___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials___pyx_scope_struct_2___iter__.tp_print = 0;
  __pyx_ptype_8pydecode_10potentials___pyx_scope_struct_2___iter__ = &__pyx_type_8pydecode_10potentials___pyx_scope_struct_2___iter__;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials___pyx_scope_struct_3_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_8pydecode_10potentials___pyx_scope_struct_3_genexpr = &__pyx_type_8pydecode_10potentials___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_array.tp_print = 0;
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryview.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pydecode/potentials.pyx":7
 * from libcpp cimport bool
 * 
 * cdef _hypergraph_registry_counts = {}             # <<<<<<<<<<<<<<
 * 
 * cdef class Labeling:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts);
  __Pyx_DECREF_SET(__pyx_v_8pydecode_10potentials__hypergraph_registry_counts, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":196
 *                                        final_edge_labels)
 * 
 *     def add_node(self, edges=[], label=None):             # <<<<<<<<<<<<<<
 *         """
 *         Add a node to the hypergraph.
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__4 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":431
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__7 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":483
 * 
 * 
 * class HypergraphAccessException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_HypergraphAccessException, __pyx_n_s_HypergraphAccessException, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pydecode/potentials.pyx":484
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_25HypergraphAccessException_1__init__, 0, __pyx_n_s_HypergraphAccessException___init, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":487
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_25HypergraphAccessException_3__str__, 0, __pyx_n_s_HypergraphAccessException___str, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":483
 * 
 * 
 * class HypergraphAccessException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_HypergraphAccessException, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HypergraphAccessException, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":491
 * 
 * 
 * class HypergraphConstructionException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_HypergraphConstructionException, __pyx_n_s_HypergraphConstructionException, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);

  /* "pydecode/potentials.pyx":492
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_31HypergraphConstructionException_1__init__, 0, __pyx_n_s_HypergraphConstructionException_2, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_init, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":495
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_31HypergraphConstructionException_3__str__, 0, __pyx_n_s_HypergraphConstructionException_3, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_str, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pydecode/potentials.pyx":491
 * 
 * 
 * class HypergraphConstructionException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_HypergraphConstructionException, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HypergraphConstructionException, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":691
 * from libcpp cimport bool
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * from cython cimport view
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":958
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12ViterbiValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":957
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = ViterbiValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":958
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = ViterbiValue()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":957
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = ViterbiValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12ViterbiValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":963
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":963
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":968
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12ViterbiValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":967
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":968
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":967
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":972
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12ViterbiValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":971
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return ViterbiValue().init(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":972
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":971
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return ViterbiValue().init(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":976
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12ViterbiValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":975
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return ViterbiValue().init(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":976
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return ViterbiValue().init(Viterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":975
 *         return ViterbiValue().init(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return ViterbiValue().init(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_ViterbiValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_ViterbiValue);

  /* "pydecode/potentials.pyx":1073
 * 
 * 
 * class Viterbi:             # <<<<<<<<<<<<<<
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Viterbi, __pyx_n_s_Viterbi, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1074
 * 
 * class Viterbi:
 *     Chart = ViterbiChart             # <<<<<<<<<<<<<<
 *     Marginals = _ViterbiMarginals
 *     #Semi = _Viterbi
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1075
 * class Viterbi:
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Viterbi
 *     Potentials = ViterbiPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__ViterbiMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1077
 *     Marginals = _ViterbiMarginals
 *     #Semi = _Viterbi
 *     Potentials = ViterbiPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1080
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1079
 *     Potentials = ViterbiPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                ViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1079; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1088
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1087
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1100
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__47);

  /* "pydecode/potentials.pyx":1099
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1122
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1121
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           ViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1129
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1128
 *         return _ViterbiMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1073
 * 
 * 
 * class Viterbi:             # <<<<<<<<<<<<<<
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Viterbi, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1316
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15LogViterbiValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1315
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = LogViterbiValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1316
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = LogViterbiValue()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1315
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = LogViterbiValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1322
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15LogViterbiValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1321
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1322
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1321
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1326
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15LogViterbiValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1325
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1326
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1325
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1330
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15LogViterbiValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1329
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return LogViterbiValue().init(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1330
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1329
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return LogViterbiValue().init(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1334
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15LogViterbiValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1333
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return LogViterbiValue().init(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1334
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return LogViterbiValue().init(LogViterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1333
 *         return LogViterbiValue().init(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return LogViterbiValue().init(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_LogViterbiValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_LogViterbiValue);

  /* "pydecode/potentials.pyx":1431
 * 
 * 
 * class LogViterbi:             # <<<<<<<<<<<<<<
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_LogViterbi, __pyx_n_s_LogViterbi, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1432
 * 
 * class LogViterbi:
 *     Chart = LogViterbiChart             # <<<<<<<<<<<<<<
 *     Marginals = _LogViterbiMarginals
 *     #Semi = _LogViterbi
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1433
 * class LogViterbi:
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _LogViterbi
 *     Potentials = LogViterbiPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1435
 *     Marginals = _LogViterbiMarginals
 *     #Semi = _LogViterbi
 *     Potentials = LogViterbiPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1438
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1437
 *     Potentials = LogViterbiPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                LogViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1446
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1445
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1458
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__64);

  /* "pydecode/potentials.pyx":1457
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1480
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1479
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           LogViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1487
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1486
 *         return _LogViterbiMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1431
 * 
 * 
 * class LogViterbi:             # <<<<<<<<<<<<<<
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_LogViterbi, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LogViterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1674
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11InsideValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1673
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = InsideValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1674
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = InsideValue()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1673
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = InsideValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1680
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11InsideValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1679
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1680
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1679
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1684
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11InsideValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1683
 *         return _Inside_from_cpp(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1684
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1683
 *         return _Inside_from_cpp(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1688
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11InsideValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1687
 *         return _Inside_from_cpp(Inside_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return InsideValue().init(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1688
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1687
 *         return _Inside_from_cpp(Inside_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return InsideValue().init(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1692
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11InsideValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1691
 *         return InsideValue().init(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return InsideValue().init(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1692
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return InsideValue().init(Inside_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1691
 *         return InsideValue().init(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return InsideValue().init(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_InsideValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_InsideValue);

  /* "pydecode/potentials.pyx":1789
 * 
 * 
 * class Inside:             # <<<<<<<<<<<<<<
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Inside, __pyx_n_s_Inside, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1790
 * 
 * class Inside:
 *     Chart = InsideChart             # <<<<<<<<<<<<<<
 *     Marginals = _InsideMarginals
 *     #Semi = _Inside
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1791
 * class Inside:
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Inside
 *     Potentials = InsidePotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__InsideMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1793
 *     Marginals = _InsideMarginals
 *     #Semi = _Inside
 *     Potentials = InsidePotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1796
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1795
 *     Potentials = InsidePotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                InsidePotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1804
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1803
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1816
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__81);

  /* "pydecode/potentials.pyx":1815
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1838
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1837
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           InsidePotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1845
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1844
 *         return _InsideMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1789
 * 
 * 
 * class Inside:             # <<<<<<<<<<<<<<
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Inside, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2032
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11MinMaxValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2031
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = MinMaxValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2032
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = MinMaxValue()
 *         created.thisval = _MinMax_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2031
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = MinMaxValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11MinMaxValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2037
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinMax_from_cpp(MinMax_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2037
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinMax_from_cpp(MinMax_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2042
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11MinMaxValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2041
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinMax_from_cpp(MinMax_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2042
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2041
 *         return _MinMax_from_cpp(MinMax_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinMax_from_cpp(MinMax_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2046
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11MinMaxValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2045
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MinMaxValue().init(MinMax_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2046
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2045
 *         return _MinMax_from_cpp(MinMax_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MinMaxValue().init(MinMax_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2046; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2050
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11MinMaxValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2049
 *         return MinMaxValue().init(MinMax_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MinMaxValue().init(MinMax_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2050
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinMaxValue().init(MinMax_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2049
 *         return MinMaxValue().init(MinMax_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MinMaxValue().init(MinMax_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinMaxValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinMaxValue);

  /* "pydecode/potentials.pyx":2139
 * 
 * 
 * class MinMax:             # <<<<<<<<<<<<<<
 *     Chart = MinMaxChart
 *     Marginals = _MinMaxMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MinMax, __pyx_n_s_MinMax, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2140
 * 
 * class MinMax:
 *     Chart = MinMaxChart             # <<<<<<<<<<<<<<
 *     Marginals = _MinMaxMarginals
 *     #Semi = _MinMax
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2141
 * class MinMax:
 *     Chart = MinMaxChart
 *     Marginals = _MinMaxMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _MinMax
 *     Potentials = MinMaxPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinMaxMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2143
 *     Marginals = _MinMaxMarginals
 *     #Semi = _MinMax
 *     Potentials = MinMaxPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinMaxPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2146
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinMaxPotentials potentials):
 *         cdef MinMaxChart chart = MinMaxChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6MinMax_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinMax_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2145
 *     Potentials = MinMaxPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                MinMaxPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2154
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinMaxPotentials potentials,
 *                 MinMaxChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6MinMax_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinMax_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2153
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 MinMaxPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2166
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinMaxPotentials potentials):
 *         cdef const CMinMaxMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6MinMax_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinMax_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2165
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           MinMaxPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2173
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinMaxPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6MinMax_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinMax_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2172
 *         return _MinMaxMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          MinMaxPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2139
 * 
 * 
 * class MinMax:             # <<<<<<<<<<<<<<
 *     Chart = MinMaxChart
 *     Marginals = _MinMaxMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MinMax, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MinMax, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2342
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17SparseVectorValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2341
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = SparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2342
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = SparseVectorValue()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2341
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = SparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2348
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17SparseVectorValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2347
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2348
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2347
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2352
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17SparseVectorValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2351
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2352
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2351
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2356
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17SparseVectorValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2355
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return SparseVectorValue().init(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2356
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2355
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return SparseVectorValue().init(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2360
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17SparseVectorValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2359
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return SparseVectorValue().init(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2360
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return SparseVectorValue().init(SparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2359
 *         return SparseVectorValue().init(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return SparseVectorValue().init(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_SparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_SparseVectorValue);

  /* "pydecode/potentials.pyx":2433
 * 
 * 
 * class SparseVector:             # <<<<<<<<<<<<<<
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SparseVector, __pyx_n_s_SparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2434
 * 
 * class SparseVector:
 *     Chart = SparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _SparseVectorMarginals
 *     #Semi = _SparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2435
 * class SparseVector:
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _SparseVector
 *     Potentials = SparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2437
 *     Marginals = _SparseVectorMarginals
 *     #Semi = _SparseVector
 *     Potentials = SparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2440
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2439
 *     Potentials = SparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                SparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2448
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2447
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 SparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2460
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2459
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           SparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2467
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2466
 *         return _SparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          SparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2433
 * 
 * 
 * class SparseVector:             # <<<<<<<<<<<<<<
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2636
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2635
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = MinSparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2636
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MinSparseVectorValue()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2635
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = MinSparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2642
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2641
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2642
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2641
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2646
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2645
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2646
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2645
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2650
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2649
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2650
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2649
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2654
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MinSparseVectorValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2653
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2654
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2653
 *         return MinSparseVectorValue().init(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MinSparseVectorValue().init(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MinSparseVectorValue);

  /* "pydecode/potentials.pyx":2727
 * 
 * 
 * class MinSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MinSparseVector, __pyx_n_s_MinSparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2728
 * 
 * class MinSparseVector:
 *     Chart = MinSparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _MinSparseVectorMarginals
 *     #Semi = _MinSparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2729
 * class MinSparseVector:
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _MinSparseVector
 *     Potentials = MinSparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2731
 *     Marginals = _MinSparseVectorMarginals
 *     #Semi = _MinSparseVector
 *     Potentials = MinSparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2734
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2733
 *     Potentials = MinSparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                MinSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2742
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2741
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 MinSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2754
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_compute_marginal, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2753
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           MinSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2761
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2760
 *         return _MinSparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          MinSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2727
 * 
 * 
 * class MinSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MinSparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MinSparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2930
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2929
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = MaxSparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2930
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = MaxSparseVectorValue()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2929
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = MaxSparseVectorValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2936
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2935
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2936
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2935
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2940
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2939
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2940
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2939
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2939; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2940; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2944
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2943
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2944
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2943
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2948
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_20MaxSparseVectorValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2947
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":2948
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2947
 *         return MaxSparseVectorValue().init(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return MaxSparseVectorValue().init(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2947; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_MaxSparseVectorValue);

  /* "pydecode/potentials.pyx":3021
 * 
 * 
 * class MaxSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MaxSparseVector, __pyx_n_s_MaxSparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3022
 * 
 * class MaxSparseVector:
 *     Chart = MaxSparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _MaxSparseVectorMarginals
 *     #Semi = _MaxSparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3023
 * class MaxSparseVector:
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _MaxSparseVector
 *     Potentials = MaxSparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3023; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3025
 *     Marginals = _MaxSparseVectorMarginals
 *     #Semi = _MaxSparseVector
 *     Potentials = MaxSparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3028
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3027
 *     Potentials = MaxSparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                MaxSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3027; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3028; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3036
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3035
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 MaxSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3035; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3048
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_compute_marginal, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3047
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           MaxSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3055
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3054
 *         return _MaxSparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          MaxSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3021
 * 
 * 
 * class MaxSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MaxSparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MaxSparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3242
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13CountingValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3241
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(int val):
 *         created = CountingValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3242
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = CountingValue()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3241
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(int val):
 *         created = CountingValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3248
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13CountingValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3247
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3248
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3247
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3252
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13CountingValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3251
 *         return _Counting_from_cpp(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3252
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3251
 *         return _Counting_from_cpp(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3256
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13CountingValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3255
 *         return _Counting_from_cpp(Counting_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return CountingValue().init(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3256
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3255
 *         return _Counting_from_cpp(Counting_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return CountingValue().init(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3260
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13CountingValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3259
 *         return CountingValue().init(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return CountingValue().init(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3260
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return CountingValue().init(Counting_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3259
 *         return CountingValue().init(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return CountingValue().init(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_CountingValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_CountingValue);

  /* "pydecode/potentials.pyx":3357
 * 
 * 
 * class Counting:             # <<<<<<<<<<<<<<
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Counting, __pyx_n_s_Counting, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3358
 * 
 * class Counting:
 *     Chart = CountingChart             # <<<<<<<<<<<<<<
 *     Marginals = _CountingMarginals
 *     #Semi = _Counting
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3359
 * class Counting:
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Counting
 *     Potentials = CountingPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__CountingMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3361
 *     Marginals = _CountingMarginals
 *     #Semi = _Counting
 *     Potentials = CountingPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3364
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3363
 *     Potentials = CountingPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                CountingPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3372
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3371
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3384
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__154);

  /* "pydecode/potentials.pyx":3383
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3406
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3405
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           CountingPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3413
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3412
 *         return _CountingMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3357
 * 
 * 
 * class Counting:             # <<<<<<<<<<<<<<
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Counting, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Counting, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3583
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9BoolValue_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3582
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(bool val):
 *         created = BoolValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3583
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = BoolValue()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3582
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(bool val):
 *         created = BoolValue()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3589
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9BoolValue_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3588
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3589
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3588
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3593
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9BoolValue_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3592
 *         return _Bool_from_cpp(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3593
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3592
 *         return _Bool_from_cpp(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3597
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9BoolValue_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3596
 *         return _Bool_from_cpp(Bool_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return BoolValue().init(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3597
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3596
 *         return _Bool_from_cpp(Bool_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return BoolValue().init(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3601
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9BoolValue_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3600
 *         return BoolValue().init(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return BoolValue().init(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3601
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return BoolValue().init(Bool_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3600
 *         return BoolValue().init(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return BoolValue().init(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials_BoolValue->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials_BoolValue);

  /* "pydecode/potentials.pyx":3682
 * 
 * 
 * class Bool:             # <<<<<<<<<<<<<<
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Bool, __pyx_n_s_Bool, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":3683
 * 
 * class Bool:
 *     Chart = BoolChart             # <<<<<<<<<<<<<<
 *     Marginals = _BoolMarginals
 *     #Semi = _Bool
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3684
 * class Bool:
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Bool
 *     Potentials = BoolPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__BoolMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3686
 *     Marginals = _BoolMarginals
 *     #Semi = _Bool
 *     Potentials = BoolPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":3689
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3688
 *     Potentials = BoolPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                BoolPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3697
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__168)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3696
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3709
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__171);

  /* "pydecode/potentials.pyx":3708
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3731
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3730
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           BoolPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3738
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__175)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":3737
 *         return _BoolMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":3682
 * 
 * 
 * class Bool:             # <<<<<<<<<<<<<<
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Bool, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Bool, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3787
 * 
 * 
 * def inside(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the inside values for potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_1inside, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inside, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3812
 * 
 * 
 * def outside(Hypergraph graph, Potentials potentials, Chart inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute the outside values for potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_3outside, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_outside, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3812; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3841
 * 
 * 
 * def best_path(Hypergraph graph, Potentials potentials, Chart chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     Find the best path through a hypergraph for a given set of potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5best_path, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_best_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3870
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     return prune(graph, potentials, thres)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune_hypergraph, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3873
 *     return prune(graph, potentials, thres)
 * 
 * def prune(Hypergraph graph, Potentials potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     Prune hyperedges with low marginal score from the hypergraph.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9prune, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3897
 * 
 * 
 * def compute_marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     return marginals(graph, potentials)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11compute_marginals, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_marginals, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3900
 *     return marginals(graph, potentials)
 * 
 * def marginals(Hypergraph graph, Potentials potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     Compute marginals for hypergraph and potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13marginals, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_marginals, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3919
 *     return potentials.kind.compute_marginals(graph, potentials)
 * 
 * inside_values = inside             # <<<<<<<<<<<<<<
 * outside_values = outside
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inside_values, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3920
 * 
 * inside_values = inside
 * outside_values = outside             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_outside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_outside_values, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3923
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15make_pruning_projections, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_pruning_projections, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3935
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Project a graph based on a set of boolean potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17project, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_project, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3957
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_19binarize, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_binarize, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3974
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_21pairwise_dot, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pairwise_dot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":3999
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_23extend_hypergraph_by_count, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extend_hypergraph_by_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3999; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from libcpp.string cimport string
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":203
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":276
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__200, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":277
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__201, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":278
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__202, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":281
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__203, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":282
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject *)__pyx_MemviewEnum_type)), __pyx_tuple__204, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":496
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":953
 *             return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), __pyx_k_getbuffer_obj_view_flags); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pydecode.potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pydecode.potentials");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
    0,                                  /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;  /* not a 'break' in the loop */
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
static CYTHON_INLINE void __pyx_fatalerror(const char *fmt, ...) {
    va_list vargs;
    char msg[200];
    va_start(vargs, fmt);
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    Py_FatalError(msg);
    va_end(vargs);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return; /* allow uninitialized memoryview assignment */
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_COMPILING_IN_CPYTHON
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        length = strlen(cstring);
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_int(PyObject *obj) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS, 1,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

static PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if ((value == (int)-1) && PyErr_Occurred())
        return 0;
    *(int *) itemp = value;
    return 1;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice *mvs,
                             char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs->memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs->suboffsets[index] >= 0 || mvs->strides[index] != itemsize)
            return 0;
        itemsize *= mvs->shape[index];
    }
    return 1;
}

static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION == 0)
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to char");
                return (char) -1;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(char)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (char) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to char");
                return (char) -1;
            }
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(char) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(char, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(char)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(char) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(char) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(char, long, PyLong_AsLong)
            } else if (sizeof(char) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(char, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Generators always return to their most recent caller, not
         * necessarily their creator. */
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Don't keep the reference to f_back any longer than necessary.  It
         * may keep a chain of frames alive or it could create a reference
         * cycle. */
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();      /* ignore these errors */
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
            return;                     /* resurrected.  :( */
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    /* Undo the temporary resurrection; can't use DECREF here, it would
     * cause a recursive call.
     */
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0)
        return; /* this is the normal path out */
    /* close() resurrected it!  Make it look like the original Py_DECREF
     * never happened.
     */
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
     * we need to undo that. */
    _Py_DEC_REFTOTAL;
#endif
    /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
     * chain, so no more to do there.
     * If COUNT_ALLOCS, the original decref bumped tp_frees, and
     * _Py_NewReference bumped tp_allocs:  both of those need to be
     * undone.
     */
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running",
     T_BOOL,
     offsetof(__pyx_GeneratorObject, is_running),
     READONLY,
     NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {__Pyx_NAMESTR("send"), (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {__Pyx_NAMESTR("throw"), (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {__Pyx_NAMESTR("close"), (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("generator"),         /*tp_name*/
    sizeof(__pyx_GeneratorObject),      /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_Generator_dealloc,/*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    0,                                   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    0,                                  /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_Generator_traverse,   /*tp_traverse*/
    0,                                  /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_GeneratorObject, gi_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    (iternextfunc) __Pyx_Generator_Next, /*tp_iternext*/
    __pyx_Generator_methods,            /*tp_methods*/
    __pyx_Generator_memberlist,         /*tp_members*/
    0,                                  /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    0,                                  /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    0,                                  /*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_del*/
#else
    __Pyx_Generator_del,                /*tp_del*/
#endif
    0,                                  /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,                /*tp_finalize*/
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
