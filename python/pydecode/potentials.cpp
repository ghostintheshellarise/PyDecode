/* Generated by Cython 0.20.1 on Tue Apr  8 13:34:49 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pydecode__potentials
#define __PYX_HAVE_API__pydecode__potentials
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <list>
#include <utility>
#include <set>
#include <map>
#include "Hypergraph/Hypergraph.h"
#include "Hypergraph/Map.h"
#include "Hypergraph/SemiringAlgorithms.h"
#include "Hypergraph/Semirings.h"
#include "Hypergraph/Potentials.h"
#include "Hypergraph/Algorithms.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "potentials.pyx",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "hypergraph.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pydecode_10hypergraph_Labeling;
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges;
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes;
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph;
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder;
struct __pyx_obj_8pydecode_10hypergraph_Node;
struct __pyx_obj_8pydecode_10hypergraph_Edge;
struct __pyx_obj_8pydecode_10hypergraph_Path;
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap;
struct __pyx_obj_8pydecode_10potentials_BackPointers;
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_ViterbiChart;
struct __pyx_obj_8pydecode_10potentials__Viterbi;
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials;
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart;
struct __pyx_obj_8pydecode_10potentials__LogViterbi;
struct __pyx_obj_8pydecode_10potentials_InsidePotentials;
struct __pyx_obj_8pydecode_10potentials_InsideChart;
struct __pyx_obj_8pydecode_10potentials__Inside;
struct __pyx_obj_8pydecode_10potentials_BoolPotentials;
struct __pyx_obj_8pydecode_10potentials_BoolChart;
struct __pyx_obj_8pydecode_10potentials__Bool;
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart;
struct __pyx_obj_8pydecode_10potentials__SparseVector;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials__MinSparseVector;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials;
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart;
struct __pyx_obj_8pydecode_10potentials__MaxSparseVector;
struct __pyx_obj_8pydecode_10potentials_CountingPotentials;
struct __pyx_obj_8pydecode_10potentials_CountingChart;
struct __pyx_obj_8pydecode_10potentials__Counting;
struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals;
struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals;
struct __pyx_obj_8pydecode_10potentials__InsideMarginals;
struct __pyx_obj_8pydecode_10potentials__BoolMarginals;
struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals;
struct __pyx_obj_8pydecode_10potentials__CountingMarginals;

/* "hypergraph.pxd":36
 *         bool equal(const CHyperpath path)
 * 
 * cdef class Labeling:             # <<<<<<<<<<<<<<
 *     cdef edge_labels
 *     cdef node_labels
 */
struct __pyx_obj_8pydecode_10hypergraph_Labeling {
  PyObject_HEAD
  PyObject *edge_labels;
  PyObject *node_labels;
};


/* "hypergraph.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hyperedge const *> _edges;
};


/* "hypergraph.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hypernode const *> _nodes;
};


/* "hypergraph.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *labeling;
  PyObject *_cached_edges;
};


/* "hypergraph.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
  PyObject *edge_labels;
  PyObject *node_labels;
  PyObject *started;
};


/* "hypergraph.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */
struct __pyx_obj_8pydecode_10hypergraph_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtab;
  Hypernode const *nodeptr;
  Hypergraph *graphptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "hypergraph.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Edge {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtab;
  Hyperedge const *edgeptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "hypergraph.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtab;
  Hyperpath const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "hypergraph.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtab;
  HypergraphMap const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *range_graph;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *domain_graph;
};


/* "pydecode/potentials.pxd":23
 *         CHyperpath *construct_path()
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *      cdef const CBackPointers *thisptr
 *      cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials_BackPointers {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtab;
  BackPointers const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pxd":122
 * 
 * 
 * cdef class ViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphViterbiPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<ViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":131
 *               HypergraphMap projection)
 * 
 * cdef class ViterbiChart:             # <<<<<<<<<<<<<<
 *     cdef CViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_ViterbiChart {
  PyObject_HEAD
  Chart<ViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":135
 *     cdef kind
 * 
 * cdef class _Viterbi:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _Viterbi init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__Viterbi {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":230
 * 
 * 
 * cdef class LogViterbiPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphLogViterbiPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<LogViterbiPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":239
 *               HypergraphMap projection)
 * 
 * cdef class LogViterbiChart:             # <<<<<<<<<<<<<<
 *     cdef CLogViterbiChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_LogViterbiChart {
  PyObject_HEAD
  Chart<LogViterbiPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":243
 *     cdef kind
 * 
 * cdef class _LogViterbi:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _LogViterbi init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__LogViterbi {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":338
 * 
 * 
 * cdef class InsidePotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphInsidePotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_InsidePotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<InsidePotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":347
 *               HypergraphMap projection)
 * 
 * cdef class InsideChart:             # <<<<<<<<<<<<<<
 *     cdef CInsideChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_InsideChart {
  PyObject_HEAD
  Chart<InsidePotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":351
 *     cdef kind
 * 
 * cdef class _Inside:             # <<<<<<<<<<<<<<
 *     cdef double thisval
 *     cdef _Inside init(self, double val)
 */
struct __pyx_obj_8pydecode_10potentials__Inside {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__Inside *__pyx_vtab;
  double thisval;
};


/* "pydecode/potentials.pxd":446
 * 
 * 
 * cdef class BoolPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphBoolPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_BoolPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<BoolPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":455
 *               HypergraphMap projection)
 * 
 * cdef class BoolChart:             # <<<<<<<<<<<<<<
 *     cdef CBoolChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_BoolChart {
  PyObject_HEAD
  Chart<BoolPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":459
 *     cdef kind
 * 
 * cdef class _Bool:             # <<<<<<<<<<<<<<
 *     cdef bool thisval
 *     cdef _Bool init(self, bool val)
 */
struct __pyx_obj_8pydecode_10potentials__Bool {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__Bool *__pyx_vtab;
  bool thisval;
};


/* "pydecode/potentials.pxd":554
 * 
 * 
 * cdef class SparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<SparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":563
 *               HypergraphMap projection)
 * 
 * cdef class SparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_SparseVectorChart {
  PyObject_HEAD
  Chart<SparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":567
 *     cdef kind
 * 
 * cdef class _SparseVector:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _SparseVector init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__SparseVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":662
 * 
 * 
 * cdef class MinSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMinSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<MinSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":671
 *               HypergraphMap projection)
 * 
 * cdef class MinSparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CMinSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart {
  PyObject_HEAD
  Chart<MinSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":675
 *     cdef kind
 * 
 * cdef class _MinSparseVector:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__MinSparseVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":770
 * 
 * 
 * cdef class MaxSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphMaxSparseVectorPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<MaxSparseVectorPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":779
 *               HypergraphMap projection)
 * 
 * cdef class MaxSparseVectorChart:             # <<<<<<<<<<<<<<
 *     cdef CMaxSparseVectorChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart {
  PyObject_HEAD
  Chart<MaxSparseVectorPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":783
 *     cdef kind
 * 
 * cdef class _MaxSparseVector:             # <<<<<<<<<<<<<<
 *     cdef vector[pair[int, int]] thisval
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val)
 */
struct __pyx_obj_8pydecode_10potentials__MaxSparseVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *__pyx_vtab;
  std::vector<std::pair<int,int> > thisval;
};


/* "pydecode/potentials.pxd":878
 * 
 * 
 * cdef class CountingPotentials:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph hypergraph
 *     cdef CHypergraphCountingPotentials *thisptr
 */
struct __pyx_obj_8pydecode_10potentials_CountingPotentials {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *hypergraph;
  HypergraphPotentials<CountingPotential> *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *projection;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":887
 *               HypergraphMap projection)
 * 
 * cdef class CountingChart:             # <<<<<<<<<<<<<<
 *     cdef CCountingChart *chart
 *     cdef kind
 */
struct __pyx_obj_8pydecode_10potentials_CountingChart {
  PyObject_HEAD
  Chart<CountingPotential> *chart;
  PyObject *kind;
};


/* "pydecode/potentials.pxd":891
 *     cdef kind
 * 
 * cdef class _Counting:             # <<<<<<<<<<<<<<
 *     cdef int thisval
 *     cdef _Counting init(self, int val)
 */
struct __pyx_obj_8pydecode_10potentials__Counting {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__Counting *__pyx_vtab;
  int thisval;
};


/* "pydecode/potentials.pyx":239
 *         self.chart = NULL
 * 
 * cdef class _ViterbiMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *__pyx_vtab;
  Marginals<ViterbiPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":558
 *         self.chart = NULL
 * 
 * cdef class _LogViterbiMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CLogViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *__pyx_vtab;
  Marginals<LogViterbiPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":877
 *         self.chart = NULL
 * 
 * cdef class _InsideMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CInsideMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__InsideMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *__pyx_vtab;
  Marginals<InsidePotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":1196
 *         self.chart = NULL
 * 
 * cdef class _BoolMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CBoolMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__BoolMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *__pyx_vtab;
  Marginals<BoolPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":1515
 *         self.chart = NULL
 * 
 * cdef class _SparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *__pyx_vtab;
  Marginals<SparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":1804
 *         self.chart = NULL
 * 
 * cdef class _MinSparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CMinSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_vtab;
  Marginals<MinSparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2093
 *         self.chart = NULL
 * 
 * cdef class _MaxSparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CMaxSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_vtab;
  Marginals<MaxSparseVectorPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/potentials.pyx":2382
 *         self.chart = NULL
 * 
 * cdef class _CountingMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CCountingMarginals *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10potentials__CountingMarginals {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *__pyx_vtab;
  Marginals<CountingPotential> const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};



/* "hypergraph.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *, std::vector<Hyperedge const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtabptr_8pydecode_10hypergraph__LazyEdges;


/* "hypergraph.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *, std::vector<Hypernode const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtabptr_8pydecode_10hypergraph__LazyNodes;


/* "hypergraph.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10hypergraph_Labeling *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtabptr_8pydecode_10hypergraph_Hypergraph;


/* "hypergraph.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *(*init)(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder;


/* "hypergraph.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Node {
  struct __pyx_obj_8pydecode_10hypergraph_Node *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Node *, Hypernode const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtabptr_8pydecode_10hypergraph_Node;


/* "hypergraph.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtabptr_8pydecode_10hypergraph_Edge;


/* "hypergraph.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Path {
  struct __pyx_obj_8pydecode_10hypergraph_Path *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
  PyObject *(*equal)(struct __pyx_obj_8pydecode_10hypergraph_Path *, struct __pyx_obj_8pydecode_10hypergraph_Path *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtabptr_8pydecode_10hypergraph_Path;


/* "hypergraph.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *(*init)(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap;


/* "pydecode/potentials.pyx":2493
 * 
 * 
 * cdef class BackPointers:             # <<<<<<<<<<<<<<
 *     """
 *     The back pointers generated by the Viterbi algorithm.
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *(*init)(struct __pyx_obj_8pydecode_10potentials_BackPointers *, BackPointers const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *__pyx_vtabptr_8pydecode_10potentials_BackPointers;


/* "pydecode/potentials.pyx":24
 * 
 * 
 * cdef class ViterbiPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *, HypergraphPotentials<ViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials;


/* "pydecode/potentials.pyx":178
 * 
 * 
 * cdef class _Viterbi:             # <<<<<<<<<<<<<<
 *     cdef _Viterbi init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi {
  struct __pyx_obj_8pydecode_10potentials__Viterbi *(*init)(struct __pyx_obj_8pydecode_10potentials__Viterbi *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *__pyx_vtabptr_8pydecode_10potentials__Viterbi;


/* "pydecode/potentials.pyx":343
 * 
 * 
 * cdef class LogViterbiPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *, HypergraphPotentials<LogViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *__pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials;


/* "pydecode/potentials.pyx":497
 * 
 * 
 * cdef class _LogViterbi:             # <<<<<<<<<<<<<<
 *     cdef _LogViterbi init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi {
  struct __pyx_obj_8pydecode_10potentials__LogViterbi *(*init)(struct __pyx_obj_8pydecode_10potentials__LogViterbi *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *__pyx_vtabptr_8pydecode_10potentials__LogViterbi;


/* "pydecode/potentials.pyx":662
 * 
 * 
 * cdef class InsidePotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *, HypergraphPotentials<InsidePotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *__pyx_vtabptr_8pydecode_10potentials_InsidePotentials;


/* "pydecode/potentials.pyx":816
 * 
 * 
 * cdef class _Inside:             # <<<<<<<<<<<<<<
 *     cdef _Inside init(self, double val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__Inside {
  struct __pyx_obj_8pydecode_10potentials__Inside *(*init)(struct __pyx_obj_8pydecode_10potentials__Inside *, double);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Inside *__pyx_vtabptr_8pydecode_10potentials__Inside;


/* "pydecode/potentials.pyx":981
 * 
 * 
 * cdef class BoolPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *, HypergraphPotentials<BoolPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *__pyx_vtabptr_8pydecode_10potentials_BoolPotentials;


/* "pydecode/potentials.pyx":1135
 * 
 * 
 * cdef class _Bool:             # <<<<<<<<<<<<<<
 *     cdef _Bool init(self, bool val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__Bool {
  struct __pyx_obj_8pydecode_10potentials__Bool *(*init)(struct __pyx_obj_8pydecode_10potentials__Bool *, bool);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Bool *__pyx_vtabptr_8pydecode_10potentials__Bool;


/* "pydecode/potentials.pyx":1300
 * 
 * 
 * cdef class SparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *, HypergraphPotentials<SparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials;


/* "pydecode/potentials.pyx":1454
 * 
 * 
 * cdef class _SparseVector:             # <<<<<<<<<<<<<<
 *     cdef _SparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector {
  struct __pyx_obj_8pydecode_10potentials__SparseVector *(*init)(struct __pyx_obj_8pydecode_10potentials__SparseVector *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *__pyx_vtabptr_8pydecode_10potentials__SparseVector;


/* "pydecode/potentials.pyx":1589
 * 
 * 
 * cdef class MinSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *, HypergraphPotentials<MinSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials;


/* "pydecode/potentials.pyx":1743
 * 
 * 
 * cdef class _MinSparseVector:             # <<<<<<<<<<<<<<
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVector *(*init)(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *__pyx_vtabptr_8pydecode_10potentials__MinSparseVector;


/* "pydecode/potentials.pyx":1878
 * 
 * 
 * cdef class MaxSparseVectorPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *, HypergraphPotentials<MaxSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials;


/* "pydecode/potentials.pyx":2032
 * 
 * 
 * cdef class _MaxSparseVector:             # <<<<<<<<<<<<<<
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *(*init)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *, std::vector<std::pair<int,int> >);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *__pyx_vtabptr_8pydecode_10potentials__MaxSparseVector;


/* "pydecode/potentials.pyx":2167
 * 
 * 
 * cdef class CountingPotentials:             # <<<<<<<<<<<<<<
 *     r"""
 *     Potential vector :math:`\theta \in R^{|{\cal E}|}` associated
 */

struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *, HypergraphPotentials<CountingPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *__pyx_vtabptr_8pydecode_10potentials_CountingPotentials;


/* "pydecode/potentials.pyx":2321
 * 
 * 
 * cdef class _Counting:             # <<<<<<<<<<<<<<
 *     cdef _Counting init(self, int val):
 *         self.thisval = val
 */

struct __pyx_vtabstruct_8pydecode_10potentials__Counting {
  struct __pyx_obj_8pydecode_10potentials__Counting *(*init)(struct __pyx_obj_8pydecode_10potentials__Counting *, int);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Counting *__pyx_vtabptr_8pydecode_10potentials__Counting;


/* "pydecode/potentials.pyx":239
 *         self.chart = NULL
 * 
 * cdef class _ViterbiMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *, Marginals<ViterbiPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *__pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals;


/* "pydecode/potentials.pyx":558
 *         self.chart = NULL
 * 
 * cdef class _LogViterbiMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CLogViterbiMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *, Marginals<LogViterbiPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *__pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals;


/* "pydecode/potentials.pyx":877
 *         self.chart = NULL
 * 
 * cdef class _InsideMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CInsideMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *, Marginals<InsidePotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *__pyx_vtabptr_8pydecode_10potentials__InsideMarginals;


/* "pydecode/potentials.pyx":1196
 *         self.chart = NULL
 * 
 * cdef class _BoolMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CBoolMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *, Marginals<BoolPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *__pyx_vtabptr_8pydecode_10potentials__BoolMarginals;


/* "pydecode/potentials.pyx":1515
 *         self.chart = NULL
 * 
 * cdef class _SparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *, Marginals<SparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals;


/* "pydecode/potentials.pyx":1804
 *         self.chart = NULL
 * 
 * cdef class _MinSparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CMinSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *, Marginals<MinSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals;


/* "pydecode/potentials.pyx":2093
 *         self.chart = NULL
 * 
 * cdef class _MaxSparseVectorMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CMaxSparseVectorMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *, Marginals<MaxSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals;


/* "pydecode/potentials.pyx":2382
 *         self.chart = NULL
 * 
 * cdef class _CountingMarginals:             # <<<<<<<<<<<<<<
 *     cdef const CCountingMarginals *thisptr
 *     cdef Hypergraph graph
 */

struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *, Marginals<CountingPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *__pyx_vtabptr_8pydecode_10potentials__CountingMarginals;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values); /*proto*/
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index); /*proto*/

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name); /*proto*/

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

#include <new>

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'pydecode.wrap' */

/* Module declarations from 'pydecode.hypergraph' */
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Labeling = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyEdges = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyNodes = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Hypergraph = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_GraphBuilder = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Node = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Edge = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Path = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_HypergraphMap = 0;

/* Module declarations from 'pydecode.potentials' */
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BackPointers = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_ViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__Viterbi = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_LogViterbiChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LogViterbi = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsidePotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_InsideChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__Inside = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_BoolChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__Bool = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_SparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__SparseVector = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MinSparseVector = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MaxSparseVector = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingPotentials = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials_CountingChart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__Counting = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__ViterbiMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__InsideMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__BoolMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10potentials__CountingMarginals = 0;
static double __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Viterbi_from_cpp(double); /*proto*/
static double __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(double); /*proto*/
static double __pyx_f_8pydecode_10potentials__Inside_to_cpp(double); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Inside_from_cpp(double); /*proto*/
static bool __pyx_f_8pydecode_10potentials__Bool_to_cpp(bool); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Bool_from_cpp(bool); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__SparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(std::vector<std::pair<int,int> >); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(std::vector<std::pair<int,int> >); /*proto*/
static int __pyx_f_8pydecode_10potentials__Counting_to_cpp(int); /*proto*/
static PyObject *__pyx_f_8pydecode_10potentials__Counting_from_cpp(int); /*proto*/
static std::pair<int,int> __pyx_convert_pair_from_py_int____int(PyObject *); /*proto*/
static std::vector<std::pair<int,int> > __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_int____int(const std::pair<int,int> &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(const std::vector<std::pair<int,int> > &); /*proto*/
#define __Pyx_MODULE_NAME "pydecode.potentials"
int __pyx_module_is_main_pydecode__potentials = 0;

/* Implementation of 'pydecode.potentials' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static void __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12show(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_10__add__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_12__mul__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_5value___get__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12show(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_10__add__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_12__mul__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_5value___get__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_16InsidePotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_12show(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_22dot(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_from_value(double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_10__add__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_12__mul__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_5value___get__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_11InsideChart___init__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, double __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_14BoolPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_12show(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_from_value(bool __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_10__add__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_12__mul__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_5value___get__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_9BoolChart___init__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, bool __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static void __pyx_pf_8pydecode_10potentials_18CountingPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_12show(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_from_value(int __pyx_v_val); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_2zero_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_4one_raw(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_6zero(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_8one(); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_10__add__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_12__mul__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_5value___get__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_13CountingChart___init__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static void __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, int __pyx_v_semi); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_4best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_thres); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_8compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_10make_pruning_projections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_12project(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_14binarize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_16pairwise_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_vec, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights); /* proto */
static PyObject *__pyx_pf_8pydecode_10potentials_18extend_hypergraph_by_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, int __pyx_v_lower_limit, int __pyx_v_upper_limit, int __pyx_v_goal); /* proto */
static PyObject *__pyx_tp_new_8pydecode_10potentials_BackPointers(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__Viterbi(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbi(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_InsidePotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__Inside(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__Bool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingPotentials(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingChart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__Counting(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__ViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__InsideMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__BoolMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10potentials__CountingMarginals(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "\n";
static char __pyx_k_i[] = "i";
static char __pyx_k_bp[] = "bp";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_one[] = "one";
static char __pyx_k_val[] = "val";
static char __pyx_k_vec[] = "vec";
static char __pyx_k_Bool[] = "Bool";
static char __pyx_k_bias[] = "bias";
static char __pyx_k_filt[] = "filt";
static char __pyx_k_goal[] = "goal";
static char __pyx_k_join[] = "join";
static char __pyx_k_kind[] = "kind";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_path[] = "path";
static char __pyx_k_rvec[] = "rvec";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_zero[] = "zero";
static char __pyx_k_20s_s[] = "%20s : %s";
static char __pyx_k_Chart[] = "Chart";
static char __pyx_k_chart[] = "chart";
static char __pyx_k_edges[] = "edges";
static char __pyx_k_graph[] = "graph";
static char __pyx_k_label[] = "label";
static char __pyx_k_range[] = "range";
static char __pyx_k_thres[] = "thres";
static char __pyx_k_Inside[] = "Inside";
static char __pyx_k_filter[] = "filter";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_in_map[] = "in_map";
static char __pyx_k_in_vec[] = "in_vec";
static char __pyx_k_inside[] = "inside";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_Viterbi[] = "Viterbi";
static char __pyx_k_created[] = "created";
static char __pyx_k_one_raw[] = "one_raw";
static char __pyx_k_outside[] = "outside";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_project[] = "project";
static char __pyx_k_viterbi[] = "viterbi";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_Counting[] = "Counting";
static char __pyx_k_Passed_s[] = "Passed %s.";
static char __pyx_k_binarize[] = "binarize";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_zero_raw[] = "zero_raw";
static char __pyx_k_Marginals[] = "Marginals";
static char __pyx_k_best_path[] = "best_path";
static char __pyx_k_enumerate[] = "enumerate";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_marginals[] = "marginals";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_out_chart[] = "out_chart";
static char __pyx_k_threshold[] = "threshold";
static char __pyx_k_used_back[] = "used_back";
static char __pyx_k_LogViterbi[] = "LogViterbi";
static char __pyx_k_Potentials[] = "Potentials";
static char __pyx_k_from_value[] = "from_value";
static char __pyx_k_hypergraph[] = "hypergraph";
static char __pyx_k_potentials[] = "potentials";
static char __pyx_k_projection[] = "projection";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_used_chart[] = "used_chart";
static char __pyx_k_Bool_inside[] = "Bool.inside";
static char __pyx_k_lower_limit[] = "lower_limit";
static char __pyx_k_upper_limit[] = "upper_limit";
static char __pyx_k_Bool_outside[] = "Bool.outside";
static char __pyx_k_Bool_viterbi[] = "Bool.viterbi";
static char __pyx_k_SparseVector[] = "SparseVector";
static char __pyx_k_inside_chart[] = "inside_chart";
static char __pyx_k_pairwise_dot[] = "pairwise_dot";
static char __pyx_k_staticmethod[] = "staticmethod";
static char __pyx_k_Inside_inside[] = "Inside.inside";
static char __pyx_k_inside_values[] = "inside_values";
static char __pyx_k_py_hypergraph[] = "py_hypergraph";
static char __pyx_k_Inside_outside[] = "Inside.outside";
static char __pyx_k_Inside_viterbi[] = "Inside.viterbi";
static char __pyx_k_Viterbi_inside[] = "Viterbi.inside";
static char __pyx_k_hypergraph_map[] = "hypergraph_map";
static char __pyx_k_outside_values[] = "outside_values";
static char __pyx_k_Counting_inside[] = "Counting.inside";
static char __pyx_k_MaxSparseVector[] = "MaxSparseVector";
static char __pyx_k_MinSparseVector[] = "MinSparseVector";
static char __pyx_k_Viterbi_outside[] = "Viterbi.outside";
static char __pyx_k_Viterbi_viterbi[] = "Viterbi.viterbi";
static char __pyx_k_bool_potentials[] = "bool_potentials";
static char __pyx_k_Counting_outside[] = "Counting.outside";
static char __pyx_k_Counting_viterbi[] = "Counting.viterbi";
static char __pyx_k_prune_hypergraph[] = "prune_hypergraph";
static char __pyx_k_LogViterbi_inside[] = "LogViterbi.inside";
static char __pyx_k_compute_marginals[] = "compute_marginals";
static char __pyx_k_LogViterbi_outside[] = "LogViterbi.outside";
static char __pyx_k_LogViterbi_viterbi[] = "LogViterbi.viterbi";
static char __pyx_k_SparseVector_inside[] = "SparseVector.inside";
static char __pyx_k_pydecode_potentials[] = "pydecode.potentials";
static char __pyx_k_SparseVector_outside[] = "SparseVector.outside";
static char __pyx_k_Bool_prune_hypergraph[] = "Bool.prune_hypergraph";
static char __pyx_k_Bool_compute_marginals[] = "Bool.compute_marginals";
static char __pyx_k_MaxSparseVector_inside[] = "MaxSparseVector.inside";
static char __pyx_k_MinSparseVector_inside[] = "MinSparseVector.inside";
static char __pyx_k_Inside_prune_hypergraph[] = "Inside.prune_hypergraph";
static char __pyx_k_MaxSparseVector_outside[] = "MaxSparseVector.outside";
static char __pyx_k_MinSparseVector_outside[] = "MinSparseVector.outside";
static char __pyx_k_Inside_compute_marginals[] = "Inside.compute_marginals";
static char __pyx_k_Viterbi_prune_hypergraph[] = "Viterbi.prune_hypergraph";
static char __pyx_k_make_pruning_projections[] = "make_pruning_projections";
static char __pyx_k_Counting_prune_hypergraph[] = "Counting.prune_hypergraph";
static char __pyx_k_HypergraphAccessException[] = "HypergraphAccessException";
static char __pyx_k_Viterbi_compute_marginals[] = "Viterbi.compute_marginals";
static char __pyx_k_Counting_compute_marginals[] = "Counting.compute_marginals";
static char __pyx_k_extend_hypergraph_by_count[] = "extend_hypergraph_by_count";
static char __pyx_k_LogViterbi_prune_hypergraph[] = "LogViterbi.prune_hypergraph";
static char __pyx_k_LogViterbi_compute_marginals[] = "LogViterbi.compute_marginals";
static char __pyx_k_SparseVector_prune_hypergraph[] = "SparseVector.prune_hypergraph";
static char __pyx_k_SparseVector_compute_marginals[] = "SparseVector.compute_marginals";
static char __pyx_k_Chart_math_S_cal_V_associated_w[] = "\n    Chart :math:`S^{|{\\cal V}|}` associated with a hypergraph (V, E)\n    and semiring S.\n\n    Acts as a vector::\n       >> print chart[node]\n    ";
static char __pyx_k_Marginal_values_math_S_cal_E_ti[] = "\n    Marginal values :math:`S^{|{\\cal E} \\times {\\cal V}|}` associated\n    with a hypergraph ({\\cal V}, {\\cal E}) and semiring S.\n\n    Acts as a dictionary::\n       >> print marginals[edge]\n       >> print marginals[node]\n    ";
static char __pyx_k_home_srush_Projects_decoding_py[] = "/home/srush/Projects/decoding/python/pydecode/potentials.pyx";
static char __pyx_k_MaxSparseVector_compute_marginal[] = "MaxSparseVector.compute_marginals";
static char __pyx_k_MaxSparseVector_prune_hypergraph[] = "MaxSparseVector.prune_hypergraph";
static char __pyx_k_MinSparseVector_compute_marginal[] = "MinSparseVector.compute_marginals";
static char __pyx_k_MinSparseVector_prune_hypergraph[] = "MinSparseVector.prune_hypergraph";
static char __pyx_k_Only_nodes_and_edges_have_Bool_m[] = "Only nodes and edges have Bool marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Counti[] = "Only nodes and edges have Counting marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Inside[] = "Only nodes and edges have Inside marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_LogVit[] = "Only nodes and edges have LogViterbi marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_MaxSpa[] = "Only nodes and edges have MaxSparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_MinSpa[] = "Only nodes and edges have MinSparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Sparse[] = "Only nodes and edges have SparseVector marginal values.";
static char __pyx_k_Only_nodes_and_edges_have_Viterb[] = "Only nodes and edges have Viterbi marginal values.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_20s_s;
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_n_s_Bool_compute_marginals;
static PyObject *__pyx_n_s_Bool_inside;
static PyObject *__pyx_n_s_Bool_outside;
static PyObject *__pyx_n_s_Bool_prune_hypergraph;
static PyObject *__pyx_n_s_Bool_viterbi;
static PyObject *__pyx_n_s_Chart;
static PyObject *__pyx_kp_s_Chart_math_S_cal_V_associated_w;
static PyObject *__pyx_n_s_Counting;
static PyObject *__pyx_n_s_Counting_compute_marginals;
static PyObject *__pyx_n_s_Counting_inside;
static PyObject *__pyx_n_s_Counting_outside;
static PyObject *__pyx_n_s_Counting_prune_hypergraph;
static PyObject *__pyx_n_s_Counting_viterbi;
static PyObject *__pyx_n_s_HypergraphAccessException;
static PyObject *__pyx_n_s_Inside;
static PyObject *__pyx_n_s_Inside_compute_marginals;
static PyObject *__pyx_n_s_Inside_inside;
static PyObject *__pyx_n_s_Inside_outside;
static PyObject *__pyx_n_s_Inside_prune_hypergraph;
static PyObject *__pyx_n_s_Inside_viterbi;
static PyObject *__pyx_n_s_LogViterbi;
static PyObject *__pyx_n_s_LogViterbi_compute_marginals;
static PyObject *__pyx_n_s_LogViterbi_inside;
static PyObject *__pyx_n_s_LogViterbi_outside;
static PyObject *__pyx_n_s_LogViterbi_prune_hypergraph;
static PyObject *__pyx_n_s_LogViterbi_viterbi;
static PyObject *__pyx_kp_s_Marginal_values_math_S_cal_E_ti;
static PyObject *__pyx_n_s_Marginals;
static PyObject *__pyx_n_s_MaxSparseVector;
static PyObject *__pyx_n_s_MaxSparseVector_compute_marginal;
static PyObject *__pyx_n_s_MaxSparseVector_inside;
static PyObject *__pyx_n_s_MaxSparseVector_outside;
static PyObject *__pyx_n_s_MaxSparseVector_prune_hypergraph;
static PyObject *__pyx_n_s_MinSparseVector;
static PyObject *__pyx_n_s_MinSparseVector_compute_marginal;
static PyObject *__pyx_n_s_MinSparseVector_inside;
static PyObject *__pyx_n_s_MinSparseVector_outside;
static PyObject *__pyx_n_s_MinSparseVector_prune_hypergraph;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Bool_m;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Counti;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Inside;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_LogVit;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_MinSpa;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Sparse;
static PyObject *__pyx_kp_s_Only_nodes_and_edges_have_Viterb;
static PyObject *__pyx_kp_s_Passed_s;
static PyObject *__pyx_n_s_Potentials;
static PyObject *__pyx_n_s_SparseVector;
static PyObject *__pyx_n_s_SparseVector_compute_marginals;
static PyObject *__pyx_n_s_SparseVector_inside;
static PyObject *__pyx_n_s_SparseVector_outside;
static PyObject *__pyx_n_s_SparseVector_prune_hypergraph;
static PyObject *__pyx_n_s_Viterbi;
static PyObject *__pyx_n_s_Viterbi_compute_marginals;
static PyObject *__pyx_n_s_Viterbi_inside;
static PyObject *__pyx_n_s_Viterbi_outside;
static PyObject *__pyx_n_s_Viterbi_prune_hypergraph;
static PyObject *__pyx_n_s_Viterbi_viterbi;
static PyObject *__pyx_n_s_best_path;
static PyObject *__pyx_n_s_bias;
static PyObject *__pyx_n_s_binarize;
static PyObject *__pyx_n_s_bool_potentials;
static PyObject *__pyx_n_s_bp;
static PyObject *__pyx_n_s_chart;
static PyObject *__pyx_n_s_compute_marginals;
static PyObject *__pyx_n_s_created;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_edges;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_extend_hypergraph_by_count;
static PyObject *__pyx_n_s_filt;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_from_value;
static PyObject *__pyx_n_s_goal;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_kp_s_home_srush_Projects_decoding_py;
static PyObject *__pyx_n_s_hypergraph;
static PyObject *__pyx_n_s_hypergraph_map;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_map;
static PyObject *__pyx_n_s_in_vec;
static PyObject *__pyx_n_s_inside;
static PyObject *__pyx_n_s_inside_chart;
static PyObject *__pyx_n_s_inside_values;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_kind;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lower_limit;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_pruning_projections;
static PyObject *__pyx_n_s_marginals;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_one;
static PyObject *__pyx_n_s_one_raw;
static PyObject *__pyx_n_s_out_chart;
static PyObject *__pyx_n_s_outside;
static PyObject *__pyx_n_s_outside_values;
static PyObject *__pyx_n_s_pairwise_dot;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_potentials;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_project;
static PyObject *__pyx_n_s_projection;
static PyObject *__pyx_n_s_prune_hypergraph;
static PyObject *__pyx_n_s_py_hypergraph;
static PyObject *__pyx_n_s_pydecode_potentials;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rvec;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thres;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_upper_limit;
static PyObject *__pyx_n_s_used_back;
static PyObject *__pyx_n_s_used_chart;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_vec;
static PyObject *__pyx_n_s_viterbi;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_zero;
static PyObject *__pyx_n_s_zero_raw;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__132;
static PyObject *__pyx_codeobj__134;
static PyObject *__pyx_codeobj__136;
static PyObject *__pyx_codeobj__138;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__146;
static PyObject *__pyx_codeobj__148;

/* "pydecode/potentials.pyx":33
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17ViterbiPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":34
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":35
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":33
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":37
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":43
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":44
 *         """
 *         self.hypergraph = graph
 *         self.kind = Viterbi             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Viterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":45
 *         self.hypergraph = graph
 *         self.kind = Viterbi
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, ViterbiPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":37
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":47
 *         self.thisptr = NULL
 * 
 *     def times(self, ViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_4times[] = "ViterbiPotentials.times(self, ViterbiPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_other) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":49
 *     def times(self, ViterbiPotentials other):
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":50
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":47
 *         self.thisptr = NULL
 * 
 *     def times(self, ViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":52
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_6clone[] = "ViterbiPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":53
 * 
 *     def clone(self):
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":54
 *     def clone(self):
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":52
 *         return ViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":56
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_8project[] = "ViterbiPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":58
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":59
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return ViterbiPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":56
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":61
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_10up_project[] = "ViterbiPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<ViterbiPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":63
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return ViterbiPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":65
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 *                                                   projection.thisptr)
 *         return ViterbiPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":61
 *         return ViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphViterbiPotentials *ptr = \
 *             cmake_projected_potentials_Viterbi(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":67
 *         return ViterbiPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_12show[] = "ViterbiPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_12show(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":68
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":69
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":68
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":67
 *         return ViterbiPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":72
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":73
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":72
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":76
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":77
 *     property bias:
 *         def __get__(self):
 *             return _Viterbi_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":76
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":106
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_14from_potentials[] = "ViterbiPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":108
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":110
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Viterbi_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":111
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _Viterbi_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":116
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Viterbi_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":114
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Viterbi_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":113
 *             potentials[i] = _Viterbi_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":118
 *                                         _Viterbi_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":106
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":120
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_16from_vector[] = "ViterbiPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  std::vector<double> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":122
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Viterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":123
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = Viterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Viterbi_to_cpp(bias)
 */
    __pyx_v_my_bias = ViterbiPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":125
 *             my_bias = Viterbi_one()
 *         else:
 *             my_bias = _Viterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] potentials = \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":128
 * 
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":130
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Viterbi_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":131
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _Viterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":134
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<ViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":133
 *             potentials[i] = _Viterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":136
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":120
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":138
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_18from_map[] = "ViterbiPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<double> __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<ViterbiPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":140
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Viterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":141
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = Viterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Viterbi_to_cpp(bias)
 */
    __pyx_v_my_bias = ViterbiPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":143
 *             my_bias = Viterbi_one()
 *         else:
 *             my_bias = _Viterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":147
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<double>(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":149
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Viterbi_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":150
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Viterbi_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":151
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Viterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":154
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<ViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":153
 *             potentials[j] = _Viterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Viterbi(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":157
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":138
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":159
 *         return self
 * 
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_17ViterbiPotentials_init(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, HypergraphPotentials<ViterbiPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":161
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":162
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":163
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":159
 *         return self
 * 
 *     cdef init(self, CHypergraphViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":165
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":166
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":165
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":168
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17ViterbiPotentials_22dot[] = "ViterbiPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17ViterbiPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":175
 *         """
 * 
 *         return _Viterbi_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":168
 *         return _Viterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":179
 * 
 * cdef class _Viterbi:
 *     cdef _Viterbi init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_f_8pydecode_10potentials_8_Viterbi_init(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":180
 * cdef class _Viterbi:
 *     cdef _Viterbi init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":181
 *     cdef _Viterbi init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":179
 * 
 * cdef class _Viterbi:
 *     cdef _Viterbi init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":184
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8_Viterbi_from_value[] = "_Viterbi.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8_Viterbi_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":185
 *     @staticmethod
 *     def from_value(double val):
 *         created = _Viterbi()             # <<<<<<<<<<<<<<
 *         created.thisval = _Viterbi_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Viterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":186
 *     def from_value(double val):
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":187
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":184
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":190
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8_Viterbi_2zero_raw[] = "_Viterbi.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8_Viterbi_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":191
 *     @staticmethod
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(ViterbiPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":190
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":194
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8_Viterbi_4one_raw[] = "_Viterbi.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8_Viterbi_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":195
 *     @staticmethod
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(ViterbiPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":194
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":198
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8_Viterbi_6zero[] = "_Viterbi.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8_Viterbi_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":199
 *     @staticmethod
 *     def zero():
 *         return _Viterbi().init(Viterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Viterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *)((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1), ViterbiPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":198
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":202
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8_Viterbi_8one[] = "_Viterbi.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8_Viterbi_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":203
 *     @staticmethod
 *     def one():
 *         return _Viterbi().init(Viterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_Viterbi self, _Viterbi other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Viterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *)((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1), ViterbiPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":202
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":205
 *         return _Viterbi().init(Viterbi_one())
 * 
 *     def __add__(_Viterbi self, _Viterbi other):             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Viterbi, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Viterbi, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_10__add__(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_10__add__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":206
 * 
 *     def __add__(_Viterbi self, _Viterbi other):
 *         return _Viterbi().init(Viterbi_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Viterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":207
 *     def __add__(_Viterbi self, _Viterbi other):
 *         return _Viterbi().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_Viterbi self, _Viterbi other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *)((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1), ViterbiPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":205
 *         return _Viterbi().init(Viterbi_one())
 * 
 *     def __add__(_Viterbi self, _Viterbi other):             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":209
 *                                                   other.thisval))
 * 
 *     def __mul__(_Viterbi self, _Viterbi other):             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Viterbi, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Viterbi, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_12__mul__(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_12__mul__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":210
 * 
 *     def __mul__(_Viterbi self, _Viterbi other):
 *         return _Viterbi().init(Viterbi_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Viterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":211
 *     def __mul__(_Viterbi self, _Viterbi other):
 *         return _Viterbi().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi *)((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_t_1), ViterbiPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":209
 *                                                   other.thisval))
 * 
 *     def __mul__(_Viterbi self, _Viterbi other):             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":214
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_8_Viterbi_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_8_Viterbi_5value___get__(((struct __pyx_obj_8pydecode_10potentials__Viterbi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8_Viterbi_5value___get__(struct __pyx_obj_8pydecode_10potentials__Viterbi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":215
 *     property value:
 *         def __get__(self):
 *             return _Viterbi_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _Viterbi_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":214
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":217
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 * cdef double _Viterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__Viterbi_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Viterbi_to_cpp", 0);

  /* "pydecode/potentials.pyx":218
 * 
 * cdef double _Viterbi_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":217
 *             return _Viterbi_from_cpp(self.thisval)
 * 
 * cdef double _Viterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":221
 * 
 * 
 * cdef _Viterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Viterbi_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Viterbi_from_cpp", 0);

  /* "pydecode/potentials.pyx":222
 * 
 * cdef _Viterbi_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class ViterbiChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":221
 * 
 * 
 * cdef _Viterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Viterbi_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":226
 * cdef class ViterbiChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_12ViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":227
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Viterbi             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Viterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":228
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Viterbi
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CViterbiChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":229
 *         self.kind = Viterbi
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":230
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<ViterbiPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":226
 * cdef class ViterbiChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Viterbi
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":232
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12ViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":233
 * 
 *     def __getitem__(self, Node node):
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":232
 *             self.chart = new CViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.ViterbiChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":235
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_12ViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":236
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":237
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _ViterbiMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":235
 *         return _Viterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":243
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":244
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":243
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":246
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":247
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":246
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":249
 *         del self.thisptr
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_17_ViterbiMarginals_init(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, Marginals<ViterbiPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":250
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":251
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":252
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":249
 *         del self.thisptr
 * 
 *     cdef init(self, const CViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":254
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":255
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":256
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":257
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _Viterbi_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":258
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":259
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _Viterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":260
 *         elif isinstance(obj, Node):
 *             return _Viterbi_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Viterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":262
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":264
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":263
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Viterbi marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Viterb, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":262
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Viterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":254
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Viterbi_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":268
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_6threshold[] = "_ViterbiMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17_ViterbiMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":272
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":273
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":268
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._ViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":284
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_inside[] = "Viterbi.inside(Hypergraph graph, ViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<ViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":286
 *     def inside(Hypergraph graph,
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Viterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":287
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 *         chart.chart = inside_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":289
 *         chart.chart = inside_Viterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":284
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":292
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_2outside[] = "Viterbi.outside(Hypergraph graph, ViterbiPotentials potentials, ViterbiChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_ViterbiChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<ViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":295
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 *         cdef ViterbiChart out_chart = ViterbiChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Viterbi(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":296
 *                 ViterbiChart inside_chart):
 *         cdef ViterbiChart out_chart = ViterbiChart()
 *         out_chart.chart = outside_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":299
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":292
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":304
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_4viterbi[] = "Viterbi.viterbi(Hypergraph graph, ViterbiPotentials potentials, ViterbiChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":306
 *     def viterbi(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_ViterbiChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":304
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_ViterbiChart *__pyx_v_chart) {
  Chart<ViterbiPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<ViterbiPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":309
 *         cdef CViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":310
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":311
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":313
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Viterbi(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<ViterbiPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":314
 *         else:
 *             used_chart = new CViterbiChart(graph.thisptr)
 *         viterbi_Viterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<ViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":318
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":319
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":320
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":321
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":304
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":326
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_6compute_marginals[] = "Viterbi.compute_marginals(Hypergraph graph, ViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials) {
  Marginals<ViterbiPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":329
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 *             Viterbi_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _ViterbiMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<ViterbiPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":330
 *         cdef const CViterbiMarginals *marginals = \
 *             Viterbi_compute(graph.thisptr, potentials.thisptr)
 *         return _ViterbiMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__ViterbiMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals *)((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":326
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":333
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7Viterbi_8prune_hypergraph[] = "Viterbi.prune_hypergraph(Hypergraph graph, ViterbiPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7Viterbi_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7Viterbi_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_7Viterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_ViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7Viterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":336
 *                          ViterbiPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":337
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":338
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":333
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Viterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":352
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":353
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":354
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":352
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":356
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":362
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":363
 *         """
 *         self.hypergraph = graph
 *         self.kind = LogViterbi             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LogViterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":364
 *         self.hypergraph = graph
 *         self.kind = LogViterbi
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, LogViterbiPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":356
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":366
 *         self.thisptr = NULL
 * 
 *     def times(self, LogViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_4times[] = "LogViterbiPotentials.times(self, LogViterbiPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4times(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_other) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":368
 *     def times(self, LogViterbiPotentials other):
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":369
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":366
 *         self.thisptr = NULL
 * 
 *     def times(self, LogViterbiPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":371
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_6clone[] = "LogViterbiPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":372
 * 
 *     def clone(self):
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":373
 *     def clone(self):
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":371
 *         return LogViterbiPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":375
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_8project[] = "LogViterbiPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_8project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":377
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":378
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return LogViterbiPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":375
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":380
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_10up_project[] = "LogViterbiPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":382
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return LogViterbiPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":384
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 *                                                   projection.thisptr)
 *         return LogViterbiPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":380
 *         return LogViterbiPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphLogViterbiPotentials *ptr = \
 *             cmake_projected_potentials_LogViterbi(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":386
 *         return LogViterbiPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_12show[] = "LogViterbiPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_12show(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":387
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":388
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":387
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":386
 *         return LogViterbiPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":391
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":392
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":391
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":395
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":396
 *     property bias:
 *         def __get__(self):
 *             return _LogViterbi_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":395
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":425
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_14from_potentials[] = "LogViterbiPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":427
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":429
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _LogViterbi_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":430
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _LogViterbi_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":435
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _LogViterbi_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":433
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _LogViterbi_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":432
 *             potentials[i] = _LogViterbi_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":437
 *                                         _LogViterbi_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":425
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":439
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_16from_vector[] = "LogViterbiPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  std::vector<double> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":441
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = LogViterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":442
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = LogViterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _LogViterbi_to_cpp(bias)
 */
    __pyx_v_my_bias = LogViterbiPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":444
 *             my_bias = LogViterbi_one()
 *         else:
 *             my_bias = _LogViterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] potentials = \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":447
 * 
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":449
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _LogViterbi_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":450
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _LogViterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":453
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":452
 *             potentials[i] = _LogViterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":455
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":439
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":457
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_18from_map[] = "LogViterbiPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<double> __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<LogViterbiPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":459
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = LogViterbi_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":460
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = LogViterbi_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _LogViterbi_to_cpp(bias)
 */
    __pyx_v_my_bias = LogViterbiPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":462
 *             my_bias = LogViterbi_one()
 *         else:
 *             my_bias = _LogViterbi_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":466
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<double>(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":468
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _LogViterbi_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":469
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _LogViterbi_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":470
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _LogViterbi_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":473
 * 
 *         self.thisptr =  \
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<LogViterbiPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":472
 *             potentials[j] = _LogViterbi_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_LogViterbi(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":476
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":457
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":478
 *         return self
 * 
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_20LogViterbiPotentials_init(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, HypergraphPotentials<LogViterbiPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":480
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":481
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":482
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":478
 *         return self
 * 
 *     cdef init(self, CHypergraphLogViterbiPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":484
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":485
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":484
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":487
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_22dot[] = "LogViterbiPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20LogViterbiPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":494
 *         """
 * 
 *         return _LogViterbi_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":487
 *         return _LogViterbi_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":498
 * 
 * cdef class _LogViterbi:
 *     cdef _LogViterbi init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_f_8pydecode_10potentials_11_LogViterbi_init(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":499
 * cdef class _LogViterbi:
 *     cdef _LogViterbi init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":500
 *     cdef _LogViterbi init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":498
 * 
 * cdef class _LogViterbi:
 *     cdef _LogViterbi init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":503
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11_LogViterbi_from_value[] = "_LogViterbi.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11_LogViterbi_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":504
 *     @staticmethod
 *     def from_value(double val):
 *         created = _LogViterbi()             # <<<<<<<<<<<<<<
 *         created.thisval = _LogViterbi_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 504; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":505
 *     def from_value(double val):
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":506
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":503
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":509
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11_LogViterbi_2zero_raw[] = "_LogViterbi.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11_LogViterbi_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":510
 *     @staticmethod
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(LogViterbiPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":509
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":513
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11_LogViterbi_4one_raw[] = "_LogViterbi.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11_LogViterbi_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":514
 *     @staticmethod
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(LogViterbiPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":513
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":517
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11_LogViterbi_6zero[] = "_LogViterbi.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11_LogViterbi_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":518
 *     @staticmethod
 *     def zero():
 *         return _LogViterbi().init(LogViterbi_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *)((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1), LogViterbiPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":517
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":521
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_11_LogViterbi_8one[] = "_LogViterbi.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11_LogViterbi_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":522
 *     @staticmethod
 *     def one():
 *         return _LogViterbi().init(LogViterbi_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_LogViterbi self, _LogViterbi other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *)((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1), LogViterbiPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":521
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":524
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 *     def __add__(_LogViterbi self, _LogViterbi other):             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__LogViterbi, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__LogViterbi, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_10__add__(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_10__add__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":525
 * 
 *     def __add__(_LogViterbi self, _LogViterbi other):
 *         return _LogViterbi().init(LogViterbi_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":526
 *     def __add__(_LogViterbi self, _LogViterbi other):
 *         return _LogViterbi().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_LogViterbi self, _LogViterbi other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *)((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1), LogViterbiPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":524
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 *     def __add__(_LogViterbi self, _LogViterbi other):             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":528
 *                                                   other.thisval))
 * 
 *     def __mul__(_LogViterbi self, _LogViterbi other):             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__LogViterbi, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__LogViterbi, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_12__mul__(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_12__mul__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":529
 * 
 *     def __mul__(_LogViterbi self, _LogViterbi other):
 *         return _LogViterbi().init(LogViterbi_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbi)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":530
 *     def __mul__(_LogViterbi self, _LogViterbi other):
 *         return _LogViterbi().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi *)((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_t_1), LogViterbiPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":528
 *                                                   other.thisval))
 * 
 *     def __mul__(_LogViterbi self, _LogViterbi other):             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":533
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11_LogViterbi_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_11_LogViterbi_5value___get__(((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11_LogViterbi_5value___get__(struct __pyx_obj_8pydecode_10potentials__LogViterbi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":534
 *     property value:
 *         def __get__(self):
 *             return _LogViterbi_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _LogViterbi_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":533
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":536
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 * cdef double _LogViterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__LogViterbi_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_LogViterbi_to_cpp", 0);

  /* "pydecode/potentials.pyx":537
 * 
 * cdef double _LogViterbi_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":536
 *             return _LogViterbi_from_cpp(self.thisval)
 * 
 * cdef double _LogViterbi_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":540
 * 
 * 
 * cdef _LogViterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_LogViterbi_from_cpp", 0);

  /* "pydecode/potentials.pyx":541
 * 
 * cdef _LogViterbi_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class LogViterbiChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":540
 * 
 * 
 * cdef _LogViterbi_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbi_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":545
 * cdef class LogViterbiChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_15LogViterbiChart___init__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":546
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = LogViterbi             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LogViterbi); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":547
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = LogViterbi
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":548
 *         self.kind = LogViterbi
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":549
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CLogViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<LogViterbiPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":545
 * cdef class LogViterbiChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = LogViterbi
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":551
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15LogViterbiChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":552
 * 
 *     def __getitem__(self, Node node):
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":551
 *             self.chart = new CLogViterbiChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbiChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":554
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_15LogViterbiChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":555
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":556
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _LogViterbiMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":554
 *         return _LogViterbi_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":562
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals___init__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":563
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":562
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":565
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":566
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":565
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":568
 *         del self.thisptr
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_20_LogViterbiMarginals_init(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, Marginals<LogViterbiPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":569
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":570
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":571
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":568
 *         del self.thisptr
 * 
 *     cdef init(self, const CLogViterbiMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":573
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":574
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":575
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":576
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _LogViterbi_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":577
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":578
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _LogViterbi_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":579
 *         elif isinstance(obj, Node):
 *             return _LogViterbi_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__LogViterbi_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":581
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":583
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":582
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have LogViterbi marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_LogVit, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":581
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have LogViterbi marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":573
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _LogViterbi_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":587
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_6threshold[] = "_LogViterbiMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20_LogViterbiMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":591
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":592
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":587
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._LogViterbiMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":603
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_inside[] = "LogViterbi.inside(Hypergraph graph, LogViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<LogViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":605
 *     def inside(Hypergraph graph,
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_LogViterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":606
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 *         chart.chart = inside_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":608
 *         chart.chart = inside_LogViterbi(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":603
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":611
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_2outside[] = "LogViterbi.outside(Hypergraph graph, LogViterbiPotentials potentials, LogViterbiChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_LogViterbiChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<LogViterbiPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":614
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 *         cdef LogViterbiChart out_chart = LogViterbiChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_LogViterbi(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":615
 *                 LogViterbiChart inside_chart):
 *         cdef LogViterbiChart out_chart = LogViterbiChart()
 *         out_chart.chart = outside_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":618
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":611
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":623
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_4viterbi[] = "LogViterbi.viterbi(Hypergraph graph, LogViterbiPotentials potentials, LogViterbiChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":625
 *     def viterbi(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CLogViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_LogViterbiChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":623
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *__pyx_v_chart) {
  Chart<LogViterbiPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<LogViterbiPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":628
 *         cdef CLogViterbiChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":629
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":630
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":632
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_LogViterbi(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<LogViterbiPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":633
 *         else:
 *             used_chart = new CLogViterbiChart(graph.thisptr)
 *         viterbi_LogViterbi(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<LogViterbiPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":637
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":638
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":639
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":640
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":623
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":645
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_6compute_marginals[] = "LogViterbi.compute_marginals(Hypergraph graph, LogViterbiPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials) {
  Marginals<LogViterbiPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":648
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 *             LogViterbi_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _LogViterbiMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<LogViterbiPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":649
 *         cdef const CLogViterbiMarginals *marginals = \
 *             LogViterbi_compute(graph.thisptr, potentials.thisptr)
 *         return _LogViterbiMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals *)((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":645
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":652
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10LogViterbi_8prune_hypergraph[] = "LogViterbi.prune_hypergraph(Hypergraph graph, LogViterbiPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_10LogViterbi_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10LogViterbi_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_10LogViterbi_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10LogViterbi_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":655
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":656
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":657
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":652
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.LogViterbi.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":671
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16InsidePotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16InsidePotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16InsidePotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16InsidePotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":672
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":673
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":671
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":675
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16InsidePotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16InsidePotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16InsidePotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":681
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":682
 *         """
 *         self.hypergraph = graph
 *         self.kind = Inside             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":683
 *         self.hypergraph = graph
 *         self.kind = Inside
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, InsidePotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":675
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":685
 *         self.thisptr = NULL
 * 
 *     def times(self, InsidePotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_4times[] = "InsidePotentials.times(self, InsidePotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4times(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_other) {
  HypergraphPotentials<InsidePotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":687
 *     def times(self, InsidePotentials other):
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":688
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":685
 *         self.thisptr = NULL
 * 
 *     def times(self, InsidePotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":690
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_6clone[] = "InsidePotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_6clone(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":691
 * 
 *     def clone(self):
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":692
 *     def clone(self):
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":690
 *         return InsidePotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return InsidePotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":694
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_8project[] = "InsidePotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_8project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<InsidePotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":696
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":697
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return InsidePotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":694
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":699
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_10up_project[] = "InsidePotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<InsidePotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<InsidePotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":701
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return InsidePotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<InsidePotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":703
 *             cmake_projected_potentials_Inside(self.thisptr,
 *                                                   projection.thisptr)
 *         return InsidePotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials *)((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":699
 *         return InsidePotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphInsidePotentials *ptr = \
 *             cmake_projected_potentials_Inside(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":705
 *         return InsidePotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_12show[] = "InsidePotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_12show(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_12show(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":706
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":707
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":706
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":705
 *         return InsidePotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":710
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":711
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":710
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":714
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":715
 *     property bias:
 *         def __get__(self):
 *             return _Inside_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":714
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":744
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_14from_potentials[] = "InsidePotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<InsidePotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":746
 *     def from_potentials(self, other_potentials):
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":748
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Inside_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":749
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _Inside_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":754
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Inside_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":752
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Inside_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<InsidePotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":751
 *             potentials[i] = _Inside_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":756
 *                                         _Inside_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":744
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":758
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_16from_vector[] = "InsidePotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  std::vector<double> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<InsidePotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":760
 *     def from_vector(self, in_vec, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Inside_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":761
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = Inside_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Inside_to_cpp(bias)
 */
    __pyx_v_my_bias = InsidePotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":763
 *             my_bias = Inside_one()
 *         else:
 *             my_bias = _Inside_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] potentials = \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":766
 * 
 *         cdef vector[double] potentials = \
 *             vector[double](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<double>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":768
 *             vector[double](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Inside_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":769
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _Inside_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":772
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<InsidePotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":771
 *             potentials[i] = _Inside_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":774
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":758
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":776
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_18from_map[] = "InsidePotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  double __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<double> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<double> __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<InsidePotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":778
 *     def from_map(self, in_map, bias=None):
 *         cdef double my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Inside_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":779
 *         cdef double my_bias
 *         if bias is None:
 *             my_bias = Inside_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Inside_to_cpp(bias)
 */
    __pyx_v_my_bias = InsidePotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":781
 *             my_bias = Inside_one()
 *         else:
 *             my_bias = _Inside_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_bias); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":785
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[double] potentials = \
 *             vector[double](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<double>(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":787
 *             vector[double](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Inside_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":788
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Inside_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":789
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Inside_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":792
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Inside(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<InsidePotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":791
 *             potentials[j] = _Inside_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Inside(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":795
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphInsidePotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":776
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef double my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":797
 *         return self
 * 
 *     cdef init(self, CHypergraphInsidePotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_16InsidePotentials_init(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, HypergraphPotentials<InsidePotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":799
 *     cdef init(self, CHypergraphInsidePotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":800
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":801
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":797
 *         return self
 * 
 *     cdef init(self, CHypergraphInsidePotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":803
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":804
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":803
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":806
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16InsidePotentials_22dot[] = "InsidePotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_16InsidePotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16InsidePotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16InsidePotentials_22dot(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":813
 *         """
 * 
 *         return _Inside_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":806
 *         return _Inside_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.InsidePotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":817
 * 
 * cdef class _Inside:
 *     cdef _Inside init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_f_8pydecode_10potentials_7_Inside_init(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self, double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":818
 * cdef class _Inside:
 *     cdef _Inside init(self, double val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":819
 *     cdef _Inside init(self, double val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":817
 * 
 * cdef class _Inside:
 *     cdef _Inside init(self, double val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":822
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7_Inside_from_value[] = "_Inside.from_value(double val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7_Inside_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._Inside.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_from_value(double __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":823
 *     @staticmethod
 *     def from_value(double val):
 *         created = _Inside()             # <<<<<<<<<<<<<<
 *         created.thisval = _Inside_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Inside)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":824
 *     def from_value(double val):
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Inside_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":825
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":822
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":828
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7_Inside_2zero_raw[] = "_Inside.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7_Inside_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":829
 *     @staticmethod
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(InsidePotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":828
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":832
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7_Inside_4one_raw[] = "_Inside.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7_Inside_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":833
 *     @staticmethod
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(InsidePotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":832
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":836
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7_Inside_6zero[] = "_Inside.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7_Inside_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":837
 *     @staticmethod
 *     def zero():
 *         return _Inside().init(Inside_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Inside)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Inside *)((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1), InsidePotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":836
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Inside.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":840
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_7_Inside_8one[] = "_Inside.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7_Inside_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":841
 *     @staticmethod
 *     def one():
 *         return _Inside().init(Inside_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_Inside self, _Inside other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Inside)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Inside *)((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1), InsidePotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":840
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Inside.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":843
 *         return _Inside().init(Inside_one())
 * 
 *     def __add__(_Inside self, _Inside other):             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Inside, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Inside, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_10__add__(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_10__add__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":844
 * 
 *     def __add__(_Inside self, _Inside other):
 *         return _Inside().init(Inside_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Inside)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":845
 *     def __add__(_Inside self, _Inside other):
 *         return _Inside().init(Inside_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_Inside self, _Inside other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Inside *)((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1), InsidePotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":843
 *         return _Inside().init(Inside_one())
 * 
 *     def __add__(_Inside self, _Inside other):             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Inside.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":847
 *                                                   other.thisval))
 * 
 *     def __mul__(_Inside self, _Inside other):             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Inside, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Inside, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_12__mul__(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_12__mul__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":848
 * 
 *     def __mul__(_Inside self, _Inside other):
 *         return _Inside().init(Inside_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Inside)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":849
 *     def __mul__(_Inside self, _Inside other):
 *         return _Inside().init(Inside_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Inside *)((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_t_1), InsidePotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":847
 *                                                   other.thisval))
 * 
 *     def __mul__(_Inside self, _Inside other):             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Inside.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":852
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_7_Inside_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_7_Inside_5value___get__(((struct __pyx_obj_8pydecode_10potentials__Inside *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_7_Inside_5value___get__(struct __pyx_obj_8pydecode_10potentials__Inside *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":853
 *     property value:
 *         def __get__(self):
 *             return _Inside_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef double _Inside_to_cpp(double val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":852
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":855
 *             return _Inside_from_cpp(self.thisval)
 * 
 * cdef double _Inside_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static double __pyx_f_8pydecode_10potentials__Inside_to_cpp(double __pyx_v_val) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Inside_to_cpp", 0);

  /* "pydecode/potentials.pyx":856
 * 
 * cdef double _Inside_to_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":855
 *             return _Inside_from_cpp(self.thisval)
 * 
 * cdef double _Inside_to_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":859
 * 
 * 
 * cdef _Inside_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Inside_from_cpp(double __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Inside_from_cpp", 0);

  /* "pydecode/potentials.pyx":860
 * 
 * cdef _Inside_from_cpp(double val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class InsideChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":859
 * 
 * 
 * cdef _Inside_from_cpp(double val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Inside_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":864
 * cdef class InsideChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 864; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideChart___init__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_11InsideChart___init__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":865
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Inside             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":866
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Inside
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CInsideChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":867
 *         self.kind = Inside
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":868
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CInsideChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<InsidePotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":864
 * cdef class InsideChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Inside
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":870
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_11InsideChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":871
 * 
 *     def __getitem__(self, Node node):
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":870
 *             self.chart = new CInsideChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.InsideChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":873
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_11InsideChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":874
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":875
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _InsideMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":873
 *         return _Inside_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":881
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_16_InsideMarginals___init__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":882
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":881
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":884
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_16_InsideMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":885
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":884
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":887
 *         del self.thisptr
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_16_InsideMarginals_init(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, Marginals<InsidePotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":888
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":889
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":890
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":887
 *         del self.thisptr
 * 
 *     cdef init(self, const CInsideMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":892
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":893
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":894
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":895
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _Inside_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":896
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":897
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _Inside_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":898
 *         elif isinstance(obj, Node):
 *             return _Inside_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Inside_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":900
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":902
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":901
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Inside marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Inside, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":900
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Inside marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":892
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Inside_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":906
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_InsideMarginals_6threshold[] = "_InsideMarginals.threshold(self, double semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  double __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __pyx_PyFloat_AsDouble(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_InsideMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_v_self), ((double)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_InsideMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *__pyx_v_self, double __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":910
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":911
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":906
 * 
 * 
 *     def threshold(self, double semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._InsideMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":922
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_inside[] = "Inside.inside(Hypergraph graph, InsidePotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<InsidePotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":924
 *     def inside(Hypergraph graph,
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Inside(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":925
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 *         chart.chart = inside_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":927
 *         chart.chart = inside_Inside(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":922
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Inside.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":930
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_2outside[] = "Inside.outside(Hypergraph graph, InsidePotentials potentials, InsideChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_InsideChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<InsidePotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":933
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 *         cdef InsideChart out_chart = InsideChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Inside(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":934
 *                 InsideChart inside_chart):
 *         cdef InsideChart out_chart = InsideChart()
 *         out_chart.chart = outside_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":937
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":930
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Inside.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":942
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_4viterbi[] = "Inside.viterbi(Hypergraph graph, InsidePotentials potentials, InsideChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":944
 *     def viterbi(Hypergraph graph,
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CInsideChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_InsideChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_InsideChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":942
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_InsideChart *__pyx_v_chart) {
  Chart<InsidePotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<InsidePotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":947
 *         cdef CInsideChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":948
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":949
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":951
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Inside(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<InsidePotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":952
 *         else:
 *             used_chart = new CInsideChart(graph.thisptr)
 *         viterbi_Inside(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<InsidePotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":956
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":957
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":958
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":959
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":942
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Inside.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_6compute_marginals[] = "Inside.compute_marginals(Hypergraph graph, InsidePotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials) {
  Marginals<InsidePotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":967
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 *             Inside_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _InsideMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<InsidePotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":968
 *         cdef const CInsideMarginals *marginals = \
 *             Inside_compute(graph.thisptr, potentials.thisptr)
 *         return _InsideMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__InsideMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals *)((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Inside.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":971
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6Inside_8prune_hypergraph[] = "Inside.prune_hypergraph(Hypergraph graph, InsidePotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_6Inside_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6Inside_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_6Inside_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Inside.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_InsidePotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 972; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6Inside_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_InsidePotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":974
 *                          InsidePotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":975
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":976
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":971
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Inside.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":990
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_14BoolPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_14BoolPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_14BoolPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_14BoolPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":991
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":992
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":990
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":994
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_14BoolPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_14BoolPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_14BoolPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1000
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1001
 *         """
 *         self.hypergraph = graph
 *         self.kind = Bool             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1002
 *         self.hypergraph = graph
 *         self.kind = Bool
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, BoolPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":994
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1004
 *         self.thisptr = NULL
 * 
 *     def times(self, BoolPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_4times[] = "BoolPotentials.times(self, BoolPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4times(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_other) {
  HypergraphPotentials<BoolPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1006
 *     def times(self, BoolPotentials other):
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1007
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1004
 *         self.thisptr = NULL
 * 
 *     def times(self, BoolPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1009
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_6clone[] = "BoolPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1010
 * 
 *     def clone(self):
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1011
 *     def clone(self):
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1010; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1009
 *         return BoolPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return BoolPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1013
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_8project[] = "BoolPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_8project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<BoolPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1015
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1016
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return BoolPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1013
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1018
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_10up_project[] = "BoolPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<BoolPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<BoolPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1020
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return BoolPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<BoolPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1022
 *             cmake_projected_potentials_Bool(self.thisptr,
 *                                                   projection.thisptr)
 *         return BoolPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1018
 *         return BoolPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphBoolPotentials *ptr = \
 *             cmake_projected_potentials_Bool(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1024
 *         return BoolPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_12show[] = "BoolPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1024; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_12show(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":1025
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1026
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":1025
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1024
 *         return BoolPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1029
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1030
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1029
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1033
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1034
 *     property bias:
 *         def __get__(self):
 *             return _Bool_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1034; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1033
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1063
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[bool] potentials = \
 *             vector[bool](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_14from_potentials[] = "BoolPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<bool> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<bool> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  bool __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<BoolPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1065
 *     def from_potentials(self, other_potentials):
 *         cdef vector[bool] potentials = \
 *             vector[bool](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<bool>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1067
 *             vector[bool](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Bool_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1068
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _Bool_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1073
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Bool_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1071
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Bool_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<BoolPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1070
 *             potentials[i] = _Bool_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1075
 *                                         _Bool_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1063
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[bool] potentials = \
 *             vector[bool](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1077
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_16from_vector[] = "BoolPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  bool __pyx_v_my_bias;
  std::vector<bool> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  std::vector<bool> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<BoolPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1079
 *     def from_vector(self, in_vec, bias=None):
 *         cdef bool my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Bool_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1080
 *         cdef bool my_bias
 *         if bias is None:
 *             my_bias = Bool_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Bool_to_cpp(bias)
 */
    __pyx_v_my_bias = BoolPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1082
 *             my_bias = Bool_one()
 *         else:
 *             my_bias = _Bool_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[bool] potentials = \
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_bias); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1085
 * 
 *         cdef vector[bool] potentials = \
 *             vector[bool](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<bool>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":1087
 *             vector[bool](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Bool_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1088
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _Bool_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1091
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<BoolPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1090
 *             potentials[i] = _Bool_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":1093
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1077
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1095
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_18from_map[] = "BoolPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  bool __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<bool> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<bool> __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<BoolPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1097
 *     def from_map(self, in_map, bias=None):
 *         cdef bool my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Bool_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1098
 *         cdef bool my_bias
 *         if bias is None:
 *             my_bias = Bool_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Bool_to_cpp(bias)
 */
    __pyx_v_my_bias = BoolPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1100
 *             my_bias = Bool_one()
 *         else:
 *             my_bias = _Bool_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_bias); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1104
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[bool] potentials = \
 *             vector[bool](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<bool>(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1106
 *             vector[bool](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Bool_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":1107
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Bool_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":1108
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Bool_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_v); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":1111
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Bool(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<BoolPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1110
 *             potentials[j] = _Bool_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Bool(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":1114
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphBoolPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1095
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef bool my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1116
 *         return self
 * 
 *     cdef init(self, CHypergraphBoolPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_14BoolPotentials_init(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, HypergraphPotentials<BoolPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1118
 *     cdef init(self, CHypergraphBoolPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1119
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":1120
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1116
 *         return self
 * 
 *     cdef init(self, CHypergraphBoolPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1122
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1123
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1122
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1125
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14BoolPotentials_22dot[] = "BoolPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14BoolPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":1132
 *         """
 * 
 *         return _Bool_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1125
 *         return _Bool_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.BoolPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1136
 * 
 * cdef class _Bool:
 *     cdef _Bool init(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_f_8pydecode_10potentials_5_Bool_init(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self, bool __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1137
 * cdef class _Bool:
 *     cdef _Bool init(self, bool val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":1138
 *     cdef _Bool init(self, bool val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1136
 * 
 * cdef class _Bool:
 *     cdef _Bool init(self, bool val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1141
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_5_Bool_from_value[] = "_Bool.from_value(bool val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5_Bool_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_val == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._Bool.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_from_value(bool __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":1142
 *     @staticmethod
 *     def from_value(bool val):
 *         created = _Bool()             # <<<<<<<<<<<<<<
 *         created.thisval = _Bool_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Bool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1143
 *     def from_value(bool val):
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Bool_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":1144
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1141
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1147
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_5_Bool_2zero_raw[] = "_Bool.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5_Bool_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":1148
 *     @staticmethod
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(BoolPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1147
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1151
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_5_Bool_4one_raw[] = "_Bool.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5_Bool_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":1152
 *     @staticmethod
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(BoolPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1151
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1155
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_5_Bool_6zero[] = "_Bool.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5_Bool_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":1156
 *     @staticmethod
 *     def zero():
 *         return _Bool().init(Bool_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Bool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Bool *)((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1), BoolPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1155
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Bool.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1159
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_5_Bool_8one[] = "_Bool.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5_Bool_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":1160
 *     @staticmethod
 *     def one():
 *         return _Bool().init(Bool_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_Bool self, _Bool other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Bool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Bool *)((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1), BoolPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1159
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Bool.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1162
 *         return _Bool().init(Bool_one())
 * 
 *     def __add__(_Bool self, _Bool other):             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Bool, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Bool, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_10__add__(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_10__add__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":1163
 * 
 *     def __add__(_Bool self, _Bool other):
 *         return _Bool().init(Bool_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Bool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1164
 *     def __add__(_Bool self, _Bool other):
 *         return _Bool().init(Bool_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_Bool self, _Bool other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Bool *)((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1), BoolPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1162
 *         return _Bool().init(Bool_one())
 * 
 *     def __add__(_Bool self, _Bool other):             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Bool.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1166
 *                                                   other.thisval))
 * 
 *     def __mul__(_Bool self, _Bool other):             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Bool, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Bool, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_12__mul__(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_12__mul__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":1167
 * 
 *     def __mul__(_Bool self, _Bool other):
 *         return _Bool().init(Bool_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Bool)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1168
 *     def __mul__(_Bool self, _Bool other):
 *         return _Bool().init(Bool_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Bool *)((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_t_1), BoolPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1166
 *                                                   other.thisval))
 * 
 *     def __mul__(_Bool self, _Bool other):             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Bool.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1171
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_5_Bool_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_5_Bool_5value___get__(((struct __pyx_obj_8pydecode_10potentials__Bool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_5_Bool_5value___get__(struct __pyx_obj_8pydecode_10potentials__Bool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1172
 *     property value:
 *         def __get__(self):
 *             return _Bool_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef bool _Bool_to_cpp(bool val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1171
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1174
 *             return _Bool_from_cpp(self.thisval)
 * 
 * cdef bool _Bool_to_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static bool __pyx_f_8pydecode_10potentials__Bool_to_cpp(bool __pyx_v_val) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Bool_to_cpp", 0);

  /* "pydecode/potentials.pyx":1175
 * 
 * cdef bool _Bool_to_cpp(bool val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1174
 *             return _Bool_from_cpp(self.thisval)
 * 
 * cdef bool _Bool_to_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1178
 * 
 * 
 * cdef _Bool_from_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Bool_from_cpp(bool __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Bool_from_cpp", 0);

  /* "pydecode/potentials.pyx":1179
 * 
 * cdef _Bool_from_cpp(bool val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class BoolChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1178
 * 
 * 
 * cdef _Bool_from_cpp(bool val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Bool_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1183
 * cdef class BoolChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolChart___init__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_9BoolChart___init__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1184
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Bool             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1185
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Bool
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CBoolChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1186
 *         self.kind = Bool
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1187
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CBoolChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<BoolPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1183
 * cdef class BoolChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Bool
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1189
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9BoolChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1190
 * 
 *     def __getitem__(self, Node node):
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1189
 *             self.chart = new CBoolChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.BoolChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1192
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_9BoolChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1193
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1194
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _BoolMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1192
 *         return _Bool_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1200
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_14_BoolMarginals___init__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1201
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1200
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1203
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_14_BoolMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1204
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1203
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1206
 *         del self.thisptr
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_14_BoolMarginals_init(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, Marginals<BoolPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1207
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1208
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1209
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1206
 *         del self.thisptr
 * 
 *     cdef init(self, const CBoolMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1211
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1212
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1213
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1214
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _Bool_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1215
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1216
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _Bool_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1217
 *         elif isinstance(obj, Node):
 *             return _Bool_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Bool_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1219
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1221
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1220
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Bool marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Bool_m, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1219
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Bool marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1211
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Bool_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1225
 * 
 * 
 *     def threshold(self, bool semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14_BoolMarginals_6threshold[] = "_BoolMarginals.threshold(self, bool semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  bool __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __Pyx_PyObject_IsTrue(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_v_self), ((bool)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14_BoolMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *__pyx_v_self, bool __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":1229
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1230
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1225
 * 
 * 
 *     def threshold(self, bool semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._BoolMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1241
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_inside[] = "Bool.inside(Hypergraph graph, BoolPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<BoolPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1243
 *     def inside(Hypergraph graph,
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Bool(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1244
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 *         chart.chart = inside_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1246
 *         chart.chart = inside_Bool(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1241
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Bool.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1249
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_2outside[] = "Bool.outside(Hypergraph graph, BoolPotentials potentials, BoolChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_BoolChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<BoolPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1252
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 *         cdef BoolChart out_chart = BoolChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Bool(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1253
 *                 BoolChart inside_chart):
 *         cdef BoolChart out_chart = BoolChart()
 *         out_chart.chart = outside_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1256
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1249
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Bool.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1261
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_4viterbi[] = "Bool.viterbi(Hypergraph graph, BoolPotentials potentials, BoolChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":1263
 *     def viterbi(Hypergraph graph,
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CBoolChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_BoolChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_BoolChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":1261
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_BoolChart *__pyx_v_chart) {
  Chart<BoolPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<BoolPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":1266
 *         cdef CBoolChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":1267
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1268
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1270
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Bool(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<BoolPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1271
 *         else:
 *             used_chart = new CBoolChart(graph.thisptr)
 *         viterbi_Bool(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<BoolPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1275
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1276
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1277
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":1278
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1261
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Bool.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1283
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_6compute_marginals[] = "Bool.compute_marginals(Hypergraph graph, BoolPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials) {
  Marginals<BoolPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1286
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 *             Bool_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _BoolMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<BoolPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1287
 *         cdef const CBoolMarginals *marginals = \
 *             Bool_compute(graph.thisptr, potentials.thisptr)
 *         return _BoolMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__BoolMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals *)((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1283
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Bool.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1290
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4Bool_8prune_hypergraph[] = "Bool.prune_hypergraph(Hypergraph graph, BoolPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_4Bool_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4Bool_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_4Bool_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Bool.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4Bool_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1293
 *                          BoolPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1294
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1295
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1290
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Bool.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1309
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1310
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1311
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1309
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1313
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1319
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1320
 *         """
 *         self.hypergraph = graph
 *         self.kind = SparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1321
 *         self.hypergraph = graph
 *         self.kind = SparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, SparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1313
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1323
 *         self.thisptr = NULL
 * 
 *     def times(self, SparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_4times[] = "SparseVectorPotentials.times(self, SparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1325
 *     def times(self, SparseVectorPotentials other):
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1326
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1323
 *         self.thisptr = NULL
 * 
 *     def times(self, SparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1328
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_6clone[] = "SparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1329
 * 
 *     def clone(self):
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1330
 *     def clone(self):
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1328
 *         return SparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1332
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_8project[] = "SparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1334
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1335
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return SparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1332
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1337
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_10up_project[] = "SparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1339
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return SparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1341
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return SparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1337
 *         return SparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_SparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1343
 *         return SparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_12show[] = "SparseVectorPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":1344
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1345
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":1344
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1343
 *         return SparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1348
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1349
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1348
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1352
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1353
 *     property bias:
 *         def __get__(self):
 *             return _SparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1352
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1382
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_14from_potentials[] = "SparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1384
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1386
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _SparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1387
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _SparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1392
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _SparseVector_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1390
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _SparseVector_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1389
 *             potentials[i] = _SparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1394
 *                                         _SparseVector_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1382
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1396
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_16from_vector[] = "SparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1396; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1398
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = SparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1399
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = SparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _SparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = SparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1401
 *             my_bias = SparseVector_one()
 *         else:
 *             my_bias = _SparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1404
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":1406
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _SparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1407
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _SparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1410
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1409
 *             potentials[i] = _SparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":1412
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1396
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1414
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_18from_map[] = "SparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<SparseVectorPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1416
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = SparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1417
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = SparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _SparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = SparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1419
 *             my_bias = SparseVector_one()
 *         else:
 *             my_bias = _SparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1423
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1425
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _SparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":1426
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _SparseVector_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":1427
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _SparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":1430
 * 
 *         self.thisptr =  \
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<SparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1429
 *             potentials[j] = _SparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_SparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":1433
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1414
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1435
 *         return self
 * 
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_22SparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, HypergraphPotentials<SparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1437
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1438
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":1439
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1435
 *         return self
 * 
 *     cdef init(self, CHypergraphSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1441
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1442
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1441
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1444
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_22dot[] = "SparseVectorPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22SparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":1451
 *         """
 * 
 *         return _SparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1444
 *         return _SparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1455
 * 
 * cdef class _SparseVector:
 *     cdef _SparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_f_8pydecode_10potentials_13_SparseVector_init(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1456
 * cdef class _SparseVector:
 *     cdef _SparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":1457
 *     cdef _SparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1455
 * 
 * cdef class _SparseVector:
 *     cdef _SparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1460
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13_SparseVector_from_value[] = "_SparseVector.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13_SparseVector_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":1461
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = _SparseVector()             # <<<<<<<<<<<<<<
 *         created.thisval = _SparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1462
 *     def from_value(vector[pair[int, int]] val):
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":1463
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1460
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1466
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13_SparseVector_2zero_raw[] = "_SparseVector.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13_SparseVector_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":1467
 *     @staticmethod
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(SparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1466
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1470
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13_SparseVector_4one_raw[] = "_SparseVector.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13_SparseVector_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":1471
 *     @staticmethod
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(SparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1470
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1474
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13_SparseVector_6zero[] = "_SparseVector.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13_SparseVector_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":1475
 *     @staticmethod
 *     def zero():
 *         return _SparseVector().init(SparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *)((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1), SparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1474
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1478
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_13_SparseVector_8one[] = "_SparseVector.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13_SparseVector_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":1479
 *     @staticmethod
 *     def one():
 *         return _SparseVector().init(SparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_SparseVector self, _SparseVector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *)((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1), SparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1478
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1481
 *         return _SparseVector().init(SparseVector_one())
 * 
 *     def __add__(_SparseVector self, _SparseVector other):             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__SparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__SparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_10__add__(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":1482
 * 
 *     def __add__(_SparseVector self, _SparseVector other):
 *         return _SparseVector().init(SparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1483
 *     def __add__(_SparseVector self, _SparseVector other):
 *         return _SparseVector().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_SparseVector self, _SparseVector other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *)((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1), SparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1481
 *         return _SparseVector().init(SparseVector_one())
 * 
 *     def __add__(_SparseVector self, _SparseVector other):             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1485
 *                                                   other.thisval))
 * 
 *     def __mul__(_SparseVector self, _SparseVector other):             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__SparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__SparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_12__mul__(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":1486
 * 
 *     def __mul__(_SparseVector self, _SparseVector other):
 *         return _SparseVector().init(SparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1487
 *     def __mul__(_SparseVector self, _SparseVector other):
 *         return _SparseVector().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector *)((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_t_1), SparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1485
 *                                                   other.thisval))
 * 
 *     def __mul__(_SparseVector self, _SparseVector other):             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1490
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13_SparseVector_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_13_SparseVector_5value___get__(((struct __pyx_obj_8pydecode_10potentials__SparseVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13_SparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__SparseVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1491
 *     property value:
 *         def __get__(self):
 *             return _SparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1490
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1493
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__SparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_SparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":1494
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1493
 *             return _SparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _SparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1497
 * 
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__SparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_SparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":1498
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class SparseVectorChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1497
 * 
 * 
 * cdef _SparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._SparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1502
 * cdef class SparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_17SparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1503
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = SparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1504
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = SparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1505
 *         self.kind = SparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1506
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<SparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1502
 * cdef class SparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = SparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1508
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_17SparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1509
 * 
 *     def __getitem__(self, Node node):
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1508
 *             self.chart = new CSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1511
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_17SparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1512
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1513
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _SparseVectorMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1511
 *         return _SparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1519
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1520
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1519
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1522
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1523
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1522
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1525
 *         del self.thisptr
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_22_SparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, Marginals<SparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1526
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1527
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1528
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1525
 *         del self.thisptr
 * 
 *     cdef init(self, const CSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1530
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_22_SparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1531
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1532
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1533
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _SparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1534
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1535
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _SparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1536
 *         elif isinstance(obj, Node):
 *             return _SparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__SparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1538
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1540
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1539
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have SparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Sparse, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1538
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have SparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1530
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _SparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._SparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1552
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_inside[] = "SparseVector.inside(Hypergraph graph, SparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<SparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1554
 *     def inside(Hypergraph graph,
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_SparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1555
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 *         chart.chart = inside_SparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<SparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1557
 *         chart.chart = inside_SparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1552
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1560
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_2outside[] = "SparseVector.outside(Hypergraph graph, SparseVectorPotentials potentials, SparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_SparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<SparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1563
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 *         cdef SparseVectorChart out_chart = SparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_SparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1564
 *                 SparseVectorChart inside_chart):
 *         cdef SparseVectorChart out_chart = SparseVectorChart()
 *         out_chart.chart = outside_SparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<SparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1567
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1560
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1572
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_4compute_marginals[] = "SparseVector.compute_marginals(Hypergraph graph, SparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials) {
  Marginals<SparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1575
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 *             SparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _SparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<SparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1576
 *         cdef const CSparseVectorMarginals *marginals = \
 *             SparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _SparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1572
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1579
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12SparseVector_6prune_hypergraph[] = "SparseVector.prune_hypergraph(Hypergraph graph, SparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_12SparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12SparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_12SparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12SparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1582
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1583
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1584
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1579
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.SparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1598
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1599
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1600
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1598
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1602
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1608
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1609
 *         """
 *         self.hypergraph = graph
 *         self.kind = MinSparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1610
 *         self.hypergraph = graph
 *         self.kind = MinSparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, MinSparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1602
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1612
 *         self.thisptr = NULL
 * 
 *     def times(self, MinSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_4times[] = "MinSparseVectorPotentials.times(self, MinSparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1614
 *     def times(self, MinSparseVectorPotentials other):
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1615
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1612
 *         self.thisptr = NULL
 * 
 *     def times(self, MinSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1617
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_6clone[] = "MinSparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1618
 * 
 *     def clone(self):
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1619
 *     def clone(self):
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1617
 *         return MinSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1621
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_8project[] = "MinSparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1623
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1624
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return MinSparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1621
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1626
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project[] = "MinSparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1628
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1630
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1626
 *         return MinSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMinSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MinSparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1632
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_12show[] = "MinSparseVectorPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":1633
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1634
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":1633
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1632
 *         return MinSparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1637
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1638
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1637
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1641
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1642
 *     property bias:
 *         def __get__(self):
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1641
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1671
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_14from_potentials[] = "MinSparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1673
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1675
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _MinSparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1676
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _MinSparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1681
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _MinSparseVector_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1679
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _MinSparseVector_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1678
 *             potentials[i] = _MinSparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1683
 *                                         _MinSparseVector_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1671
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1685
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_16from_vector[] = "MinSparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1687
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = MinSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1688
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = MinSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _MinSparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = MinSparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1690
 *             my_bias = MinSparseVector_one()
 *         else:
 *             my_bias = _MinSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1693
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":1695
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _MinSparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1696
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _MinSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1699
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1698
 *             potentials[i] = _MinSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":1701
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1685
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1703
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_18from_map[] = "MinSparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<MinSparseVectorPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1705
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = MinSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1706
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = MinSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _MinSparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = MinSparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1708
 *             my_bias = MinSparseVector_one()
 *         else:
 *             my_bias = _MinSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1708; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1712
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":1714
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":1715
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":1716
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _MinSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":1719
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<MinSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1718
 *             potentials[j] = _MinSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MinSparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":1722
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1703
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1724
 *         return self
 * 
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_25MinSparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, HypergraphPotentials<MinSparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1726
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1727
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":1728
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1724
 *         return self
 * 
 *     cdef init(self, CHypergraphMinSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1730
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1731
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1730
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1733
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_22dot[] = "MinSparseVectorPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MinSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":1740
 *         """
 * 
 *         return _MinSparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1733
 *         return _MinSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1744
 * 
 * cdef class _MinSparseVector:
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_f_8pydecode_10potentials_16_MinSparseVector_init(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1745
 * cdef class _MinSparseVector:
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":1746
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1744
 * 
 * cdef class _MinSparseVector:
 *     cdef _MinSparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1749
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinSparseVector_from_value[] = "_MinSparseVector.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MinSparseVector_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":1750
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MinSparseVector()             # <<<<<<<<<<<<<<
 *         created.thisval = _MinSparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1751
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":1752
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1749
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1755
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinSparseVector_2zero_raw[] = "_MinSparseVector.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MinSparseVector_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":1756
 *     @staticmethod
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(MinSparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1755
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1759
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinSparseVector_4one_raw[] = "_MinSparseVector.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MinSparseVector_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":1760
 *     @staticmethod
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(MinSparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1759
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1763
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinSparseVector_6zero[] = "_MinSparseVector.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MinSparseVector_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":1764
 *     @staticmethod
 *     def zero():
 *         return _MinSparseVector().init(MinSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1), MinSparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1763
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1767
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MinSparseVector_8one[] = "_MinSparseVector.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MinSparseVector_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":1768
 *     @staticmethod
 *     def one():
 *         return _MinSparseVector().init(MinSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_MinSparseVector self, _MinSparseVector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1), MinSparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1767
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1770
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 *     def __add__(_MinSparseVector self, _MinSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__MinSparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__MinSparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_10__add__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":1771
 * 
 *     def __add__(_MinSparseVector self, _MinSparseVector other):
 *         return _MinSparseVector().init(MinSparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1772
 *     def __add__(_MinSparseVector self, _MinSparseVector other):
 *         return _MinSparseVector().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_MinSparseVector self, _MinSparseVector other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1), MinSparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1770
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 *     def __add__(_MinSparseVector self, _MinSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1774
 *                                                   other.thisval))
 * 
 *     def __mul__(_MinSparseVector self, _MinSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__MinSparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__MinSparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_12__mul__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":1775
 * 
 *     def __mul__(_MinSparseVector self, _MinSparseVector other):
 *         return _MinSparseVector().init(MinSparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1776
 *     def __mul__(_MinSparseVector self, _MinSparseVector other):
 *         return _MinSparseVector().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_t_1), MinSparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1774
 *                                                   other.thisval))
 * 
 *     def __mul__(_MinSparseVector self, _MinSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1779
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MinSparseVector_5value___get__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MinSparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1780
 *     property value:
 *         def __get__(self):
 *             return _MinSparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1779
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1782
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MinSparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_MinSparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":1783
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1782
 *             return _MinSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MinSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1786
 * 
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MinSparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":1787
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class MinSparseVectorChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1786
 * 
 * 
 * cdef _MinSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1791
 * cdef class MinSparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1792
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinSparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MinSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1793
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MinSparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1794
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":1795
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<MinSparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1791
 * cdef class MinSparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MinSparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1797
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1798
 * 
 *     def __getitem__(self, Node node):
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1797
 *             self.chart = new CMinSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1800
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20MinSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1801
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":1802
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _MinSparseVectorMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":1800
 *         return _MinSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1808
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":1809
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1808
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1811
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1812
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1811
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1814
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_25_MinSparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, Marginals<MinSparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":1815
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":1816
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1817
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1814
 *         del self.thisptr
 * 
 *     cdef init(self, const CMinSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1819
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25_MinSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":1820
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1821
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1822
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _MinSparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":1823
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":1824
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _MinSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":1825
 *         elif isinstance(obj, Node):
 *             return _MinSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MinSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1827
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1829
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":1828
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have MinSparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_MinSpa, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1827
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MinSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1819
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MinSparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._MinSparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1841
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_inside[] = "MinSparseVector.inside(Hypergraph graph, MinSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":1843
 *     def inside(Hypergraph graph,
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_MinSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1844
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 *         chart.chart = inside_MinSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<MinSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1846
 *         chart.chart = inside_MinSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1841
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1849
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_2outside[] = "MinSparseVector.outside(Hypergraph graph, MinSparseVectorPotentials potentials, MinSparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1850; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_MinSparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1851; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MinSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":1852
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 *         cdef MinSparseVectorChart out_chart = MinSparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_MinSparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1853
 *                 MinSparseVectorChart inside_chart):
 *         cdef MinSparseVectorChart out_chart = MinSparseVectorChart()
 *         out_chart.chart = outside_MinSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<MinSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":1856
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1849
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1861
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_4compute_marginals[] = "MinSparseVector.compute_marginals(Hypergraph graph, MinSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials) {
  Marginals<MinSparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":1864
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 *             MinSparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _MinSparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<MinSparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":1865
 *         cdef const CMinSparseVectorMarginals *marginals = \
 *             MinSparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _MinSparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1861
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1868
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph[] = "MinSparseVector.prune_hypergraph(Hypergraph graph, MinSparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MinSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":1871
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1871; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":1872
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1873
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1873; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1868
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MinSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1887
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":1888
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":1889
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1887
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":1891
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":1897
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":1898
 *         """
 *         self.hypergraph = graph
 *         self.kind = MaxSparseVector             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MaxSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1899
 *         self.hypergraph = graph
 *         self.kind = MaxSparseVector
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, MaxSparseVectorPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":1891
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1901
 *         self.thisptr = NULL
 * 
 *     def times(self, MaxSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_4times[] = "MaxSparseVectorPotentials.times(self, MaxSparseVectorPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1901; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4times(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_other) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":1903
 *     def times(self, MaxSparseVectorPotentials other):
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":1904
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1904; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1901
 *         self.thisptr = NULL
 * 
 *     def times(self, MaxSparseVectorPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1906
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone[] = "MaxSparseVectorPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":1907
 * 
 *     def clone(self):
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1908
 *     def clone(self):
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1906
 *         return MaxSparseVectorPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1910
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_8project[] = "MaxSparseVectorPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_8project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":1912
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":1913
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1910
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1915
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project[] = "MaxSparseVectorPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":1917
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":1919
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 *                                                   projection.thisptr)
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials *)((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1915
 *         return MaxSparseVectorPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphMaxSparseVectorPotentials *ptr = \
 *             cmake_projected_potentials_MaxSparseVector(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1921
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_12show[] = "MaxSparseVectorPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_12show(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":1922
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1923
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":1922
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1921
 *         return MaxSparseVectorPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1926
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1927
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1926
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1930
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":1931
 *     property bias:
 *         def __get__(self):
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1930
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1960
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_potentials[] = "MaxSparseVectorPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  std::vector<std::pair<int,int> > __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":1962
 *     def from_potentials(self, other_potentials):
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":1964
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _MaxSparseVector_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":1965
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _MaxSparseVector_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1970
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _MaxSparseVector_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1968
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _MaxSparseVector_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1968; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1967
 *             potentials[i] = _MaxSparseVector_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":1972
 *                                         _MaxSparseVector_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1960
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1974
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_vector[] = "MaxSparseVectorPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":1976
 *     def from_vector(self, in_vec, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = MaxSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1977
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = MaxSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _MaxSparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = MaxSparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1979
 *             my_bias = MaxSparseVector_one()
 *         else:
 *             my_bias = _MaxSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":1982
 * 
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<std::vector<std::pair<int,int> > >(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":1984
 *             vector[vector[pair[int, int]]](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _MaxSparseVector_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1984; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":1985
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _MaxSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":1988
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":1987
 *             potentials[i] = _MaxSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":1990
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1974
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":1992
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_18from_map[] = "MaxSparseVectorPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1992; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1992; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  std::vector<std::pair<int,int> > __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<std::vector<std::pair<int,int> > > __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::vector<std::pair<int,int> > __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<std::vector<std::pair<int,int> > > __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_t_13;
  size_t __pyx_t_14;
  HypergraphPotentials<MaxSparseVectorPotential> *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":1994
 *     def from_map(self, in_map, bias=None):
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = MaxSparseVector_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":1995
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 *             my_bias = MaxSparseVector_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _MaxSparseVector_to_cpp(bias)
 */
    __pyx_v_my_bias = MaxSparseVectorPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":1997
 *             my_bias = MaxSparseVector_one()
 *         else:
 *             my_bias = _MaxSparseVector_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_bias); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2001
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[vector[pair[int, int]]] potentials = \
 *             vector[vector[pair[int, int]]](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<std::vector<std::pair<int,int> > >(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2001; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":2003
 *             vector[vector[pair[int, int]]](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_10 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_10;
  __pyx_t_10 = 0;
  while (1) {
    __pyx_t_12 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_10, &__pyx_t_11, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_12 == 0)) break;
    if (unlikely(__pyx_t_12 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "pydecode/potentials.pyx":2004
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 * 
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2004; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_13]) = __pyx_t_12;

    /* "pydecode/potentials.pyx":2005
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _MaxSparseVector_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2005; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_14]) = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":2008
 * 
 *         self.thisptr =  \
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_15 = HypergraphSparsePotentials<MaxSparseVectorPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2007
 *             potentials[j] = _MaxSparseVector_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_MaxSparseVector(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_15;

  /* "pydecode/potentials.pyx":2011
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":1992
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef vector[pair[int, int]] my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2013
 *         return self
 * 
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_25MaxSparseVectorPotentials_init(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, HypergraphPotentials<MaxSparseVectorPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2015
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2016
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2017
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2013
 *         return self
 * 
 *     cdef init(self, CHypergraphMaxSparseVectorPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2019
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2020
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2019
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2022
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot[] = "MaxSparseVectorPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<int,int> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2029
 *         """
 * 
 *         return _MaxSparseVector_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2022
 *         return _MaxSparseVector_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2033
 * 
 * cdef class _MaxSparseVector:
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_f_8pydecode_10potentials_16_MaxSparseVector_init(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self, std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2034
 * cdef class _MaxSparseVector:
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2035
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2033
 * 
 * cdef class _MaxSparseVector:
 *     cdef _MaxSparseVector init(self, vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MaxSparseVector_from_value[] = "_MaxSparseVector.from_value(vector[pair[int,int]] val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<std::pair<int,int> > __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_from_value(std::vector<std::pair<int,int> > __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2039
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MaxSparseVector()             # <<<<<<<<<<<<<<
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2040
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2041
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2044
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MaxSparseVector_2zero_raw[] = "_MaxSparseVector.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2045
 *     @staticmethod
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(MaxSparseVectorPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2044
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2048
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MaxSparseVector_4one_raw[] = "_MaxSparseVector.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2049
 *     @staticmethod
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(MaxSparseVectorPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2048
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2052
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MaxSparseVector_6zero[] = "_MaxSparseVector.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2053
 *     @staticmethod
 *     def zero():
 *         return _MaxSparseVector().init(MaxSparseVector_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1), MaxSparseVectorPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2052
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2056
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16_MaxSparseVector_8one[] = "_MaxSparseVector.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2057
 *     @staticmethod
 *     def one():
 *         return _MaxSparseVector().init(MaxSparseVector_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_MaxSparseVector self, _MaxSparseVector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1), MaxSparseVectorPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2056
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2059
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 *     def __add__(_MaxSparseVector self, _MaxSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__MaxSparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__MaxSparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_10__add__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_10__add__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2060
 * 
 *     def __add__(_MaxSparseVector self, _MaxSparseVector other):
 *         return _MaxSparseVector().init(MaxSparseVector_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2061
 *     def __add__(_MaxSparseVector self, _MaxSparseVector other):
 *         return _MaxSparseVector().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_MaxSparseVector self, _MaxSparseVector other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1), MaxSparseVectorPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2059
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 *     def __add__(_MaxSparseVector self, _MaxSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2063
 *                                                   other.thisval))
 * 
 *     def __mul__(_MaxSparseVector self, _MaxSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__MaxSparseVector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__MaxSparseVector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_12__mul__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_12__mul__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2064
 * 
 *     def __mul__(_MaxSparseVector self, _MaxSparseVector other):
 *         return _MaxSparseVector().init(MaxSparseVector_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVector)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2065
 *     def __mul__(_MaxSparseVector self, _MaxSparseVector other):
 *         return _MaxSparseVector().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_t_1), MaxSparseVectorPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2063
 *                                                   other.thisval))
 * 
 *     def __mul__(_MaxSparseVector self, _MaxSparseVector other):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2068
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_16_MaxSparseVector_5value___get__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16_MaxSparseVector_5value___get__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2069
 *     property value:
 *         def __get__(self):
 *             return _MaxSparseVector_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2069; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2068
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2071
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static std::vector<std::pair<int,int> > __pyx_f_8pydecode_10potentials__MaxSparseVector_to_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_MaxSparseVector_to_cpp", 0);

  /* "pydecode/potentials.pyx":2072
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2071
 *             return _MaxSparseVector_from_cpp(self.thisval)
 * 
 * cdef vector[pair[int, int]] _MaxSparseVector_to_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2075
 * 
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(std::vector<std::pair<int,int> > __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_MaxSparseVector_from_cpp", 0);

  /* "pydecode/potentials.pyx":2076
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class MaxSparseVectorChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2076; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2075
 * 
 * 
 * cdef _MaxSparseVector_from_cpp(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVector_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2080
 * cdef class MaxSparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart___init__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2081
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MaxSparseVector             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MaxSparseVector); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2081; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2082
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = MaxSparseVector
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2083
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2084
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<MaxSparseVectorPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2080
 * cdef class MaxSparseVectorChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = MaxSparseVector
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2086
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2086; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2087
 * 
 *     def __getitem__(self, Node node):
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2086
 *             self.chart = new CMaxSparseVectorChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVectorChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2089
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_20MaxSparseVectorChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2090
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2091
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _MaxSparseVectorMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2089
 *         return _MaxSparseVector_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2097
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals___init__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2098
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2097
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2100
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2101
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2100
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2103
 *         del self.thisptr
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_25_MaxSparseVectorMarginals_init(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, Marginals<MaxSparseVectorPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2104
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2105
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2106
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2103
 *         del self.thisptr
 * 
 *     cdef init(self, const CMaxSparseVectorMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2108
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_25_MaxSparseVectorMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2109
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2110
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2111
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _MaxSparseVector_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2112
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2113
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _MaxSparseVector_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2114
 *         elif isinstance(obj, Node):
 *             return _MaxSparseVector_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__MaxSparseVector_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2116
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2118
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":2117
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have MaxSparseVector marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2116
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have MaxSparseVector marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2108
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _MaxSparseVector_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._MaxSparseVectorMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2130
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_inside[] = "MaxSparseVector.inside(Hypergraph graph, MaxSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MaxSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2132
 *     def inside(Hypergraph graph,
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2133
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<MaxSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2135
 *         chart.chart = inside_MaxSparseVector(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2130
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2138
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_2outside[] = "MaxSparseVector.outside(Hypergraph graph, MaxSparseVectorPotentials potentials, MaxSparseVectorChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<MaxSparseVectorPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2141
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 *         cdef MaxSparseVectorChart out_chart = MaxSparseVectorChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_MaxSparseVector(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2142
 *                 MaxSparseVectorChart inside_chart):
 *         cdef MaxSparseVectorChart out_chart = MaxSparseVectorChart()
 *         out_chart.chart = outside_MaxSparseVector(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<MaxSparseVectorPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2145
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2138
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2150
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_4compute_marginals[] = "MaxSparseVector.compute_marginals(Hypergraph graph, MaxSparseVectorPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_5compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_4compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_5compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_4compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials) {
  Marginals<MaxSparseVectorPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2153
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 *             MaxSparseVector_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _MaxSparseVectorMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<MaxSparseVectorPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":2154
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 *             MaxSparseVector_compute(graph.thisptr, potentials.thisptr)
 *         return _MaxSparseVectorMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals *)((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2150
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2157
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph[] = "MaxSparseVector.prune_hypergraph(Hypergraph graph, MaxSparseVectorPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_15MaxSparseVector_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2160
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2161
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2162
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2157
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.MaxSparseVector.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2176
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_18CountingPotentials_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_18CountingPotentials_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_18CountingPotentials___dealloc__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_18CountingPotentials___dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2177
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2178
 *     def __dealloc__(self):
 *         del self.thisptr
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2176
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         self.thisptr = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2180
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_18CountingPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_18CountingPotentials_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2180; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__cinit__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_18CountingPotentials_2__cinit__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/potentials.pyx":2186
 *         :param hypergraph: The underlying hypergraph.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.thisptr = NULL
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2187
 *         """
 *         self.hypergraph = graph
 *         self.kind = Counting             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Counting); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2188
 *         self.hypergraph = graph
 *         self.kind = Counting
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def times(self, CountingPotentials other):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2180
 *         self.thisptr = NULL
 * 
 *     def __cinit__(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         """
 *         Build the potential vector for a hypergraph.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2190
 *         self.thisptr = NULL
 * 
 *     def times(self, CountingPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_4times[] = "CountingPotentials.times(self, CountingPotentials other)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("times (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4times(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_other) {
  HypergraphPotentials<CountingPotential> *__pyx_v_new_potentials;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("times", 0);

  /* "pydecode/potentials.pyx":2192
 *     def times(self, CountingPotentials other):
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 */
  __pyx_v_new_potentials = __pyx_v_self->thisptr->times((*__pyx_v_other->thisptr));

  /* "pydecode/potentials.pyx":2193
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)             # <<<<<<<<<<<<<<
 * 
 *     def clone(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_new_potentials, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2190
 *         self.thisptr = NULL
 * 
 *     def times(self, CountingPotentials other):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *new_potentials = \
 *             self.thisptr.times(deref(other.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.times", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2195
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_6clone[] = "CountingPotentials.clone(self)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_6clone(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "pydecode/potentials.pyx":2196
 * 
 *     def clone(self):
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),             # <<<<<<<<<<<<<<
 *                                                           None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->hypergraph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2197
 *     def clone(self):
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)             # <<<<<<<<<<<<<<
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_self->thisptr->clone(), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2195
 *         return CountingPotentials(self.hypergraph).init(new_potentials, None)
 * 
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return CountingPotentials(self.hypergraph).init(self.thisptr.clone(),
 *                                                           None)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2199
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_8project[] = "CountingPotentials.project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_8project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<CountingPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":2201
 *     def project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))             # <<<<<<<<<<<<<<
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 */
  __pyx_v_ptr = __pyx_v_self->thisptr->project_potentials((*__pyx_v_projection->thisptr));

  /* "pydecode/potentials.pyx":2202
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 *         return CountingPotentials(graph).init(ptr, None)             # <<<<<<<<<<<<<<
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_2), __pyx_v_ptr, ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2199
 *                                                           None)
 * 
 *     def project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             self.thisptr.project_potentials(deref(projection.thisptr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2204
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_10up_project[] = "CountingPotentials.up_project(self, Hypergraph graph, HypergraphMap projection)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("up_project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_projection,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_projection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "up_project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("up_project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_projection), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "projection", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_graph, __pyx_v_projection);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_10up_project(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  HypergraphPotentials<CountingPotential> *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphPotentials<CountingPotential> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("up_project", 0);

  /* "pydecode/potentials.pyx":2206
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,             # <<<<<<<<<<<<<<
 *                                                   projection.thisptr)
 *         return CountingPotentials(graph).init(ptr, projection)
 */
  try {
    __pyx_t_1 = HypergraphMappedPotentials<CountingPotential>::make_potentials(__pyx_v_self->thisptr, __pyx_v_projection->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_ptr = __pyx_t_1;

  /* "pydecode/potentials.pyx":2208
 *             cmake_projected_potentials_Counting(self.thisptr,
 *                                                   projection.thisptr)
 *         return CountingPotentials(graph).init(ptr, projection)             # <<<<<<<<<<<<<<
 * 
 *     def show(self, Hypergraph graph):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials *)((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_t_3), __pyx_v_ptr, __pyx_v_projection); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2204
 *         return CountingPotentials(graph).init(ptr, None)
 * 
 *     def up_project(self, Hypergraph graph, HypergraphMap projection):             # <<<<<<<<<<<<<<
 *         cdef CHypergraphCountingPotentials *ptr = \
 *             cmake_projected_potentials_Counting(self.thisptr,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.up_project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2210
 *         return CountingPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_12show[] = "CountingPotentials.show(self, Hypergraph graph)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_13show(PyObject *__pyx_v_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_12show(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_12show(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show", 0);

  /* "pydecode/potentials.pyx":2211
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2212
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_graph), __pyx_n_s_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pydecode/potentials.pyx":2211
 * 
 *     def show(self, Hypergraph graph):
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])             # <<<<<<<<<<<<<<
 *                           for edge in graph.edges])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s_label); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_edge); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_20s_s, __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2210
 *         return CountingPotentials(graph).init(ptr, projection)
 * 
 *     def show(self, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         return "\n".join(["%20s : %s" % (edge.label, self[edge])
 *                           for edge in graph.edges])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.show", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2215
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_4kind___get__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4kind___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2216
 *     property kind:
 *         def __get__(self):
 *             return self.kind             # <<<<<<<<<<<<<<
 * 
 *     property bias:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kind);
  __pyx_r = __pyx_v_self->kind;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2215
 * 
 *     property kind:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.kind
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2219
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisptr.bias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_4bias___get__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2220
 *     property bias:
 *         def __get__(self):
 *             return _Counting_from_cpp(self.thisptr.bias())             # <<<<<<<<<<<<<<
 * 
 *     # def build(self, fn, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->bias()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2219
 * 
 *     property bias:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisptr.bias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.bias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2249
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[int] potentials = \
 *             vector[int](self.hypergraph.thisptr.edges().size())
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_14from_potentials[] = "CountingPotentials.from_potentials(self, other_potentials)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_potentials(PyObject *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_potentials(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((PyObject *)__pyx_v_other_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_14from_potentials(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_other_potentials) {
  std::vector<int> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  size_t __pyx_t_8;
  HypergraphPotentials<CountingPotential> *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_potentials", 0);

  /* "pydecode/potentials.pyx":2251
 *     def from_potentials(self, other_potentials):
 *         cdef vector[int] potentials = \
 *             vector[int](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 */
  try {
    __pyx_t_1 = std::vector<int>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_1;

  /* "pydecode/potentials.pyx":2253
 *             vector[int](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Counting_to_cpp(other_potentials[edge])
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->hypergraph), __pyx_n_s_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2254
 * 
 *         for i, edge in enumerate(self.hypergraph.edges):
 *             potentials[i] = _Counting_to_cpp(other_potentials[edge])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_other_potentials, __pyx_v_edge); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_8]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2259
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials,
 *                                         _Counting_to_cpp(other_potentials.bias))             # <<<<<<<<<<<<<<
 * 
 *         return self
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_other_potentials, __pyx_n_s_bias); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2257
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials,
 *                                         _Counting_to_cpp(other_potentials.bias))
 */
  try {
    __pyx_t_9 = HypergraphVectorPotentials<CountingPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2256
 *             potentials[i] = _Counting_to_cpp(other_potentials[edge])
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_9;

  /* "pydecode/potentials.pyx":2261
 *                                         _Counting_to_cpp(other_potentials.bias))
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_vector(self, in_vec, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2249
 *     #     return self
 * 
 *     def from_potentials(self, other_potentials):             # <<<<<<<<<<<<<<
 *         cdef vector[int] potentials = \
 *             vector[int](self.hypergraph.thisptr.edges().size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2263
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_16from_vector[] = "CountingPotentials.from_vector(self, in_vec, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_vec = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_vec,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_vec)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_vector") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_vec = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_vector", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_vector(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_in_vec, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_16from_vector(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_vec, PyObject *__pyx_v_bias) {
  int __pyx_v_my_bias;
  std::vector<int> __pyx_v_potentials;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::vector<int> __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  HypergraphPotentials<CountingPotential> *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_vector", 0);

  /* "pydecode/potentials.pyx":2265
 *     def from_vector(self, in_vec, bias=None):
 *         cdef int my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Counting_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2266
 *         cdef int my_bias
 *         if bias is None:
 *             my_bias = Counting_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Counting_to_cpp(bias)
 */
    __pyx_v_my_bias = CountingPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2268
 *             my_bias = Counting_one()
 *         else:
 *             my_bias = _Counting_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int] potentials = \
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_bias); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2271
 * 
 *         cdef vector[int] potentials = \
 *             vector[int](self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 * 
 *         for i, v in enumerate(in_vec):
 */
  try {
    __pyx_t_4 = std::vector<int>(__pyx_v_self->hypergraph->thisptr->edges().size());
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_4;

  /* "pydecode/potentials.pyx":2273
 *             vector[int](self.hypergraph.thisptr.edges().size())
 * 
 *         for i, v in enumerate(in_vec):             # <<<<<<<<<<<<<<
 *             potentials[i] = _Counting_to_cpp(v)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_5 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_in_vec) || PyTuple_CheckExact(__pyx_v_in_vec)) {
    __pyx_t_6 = __pyx_v_in_vec; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_in_vec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_6)) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_6);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "pydecode/potentials.pyx":2274
 * 
 *         for i, v in enumerate(in_vec):
 *             potentials[i] = _Counting_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_v); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_10]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":2277
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         potentials, my_bias)
 *         return self
 */
  try {
    __pyx_t_11 = HypergraphVectorPotentials<CountingPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2276
 *             potentials[i] = _Counting_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 */
  __pyx_v_self->thisptr = __pyx_t_11;

  /* "pydecode/potentials.pyx":2279
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def from_map(self, in_map, bias=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2263
 *         return self
 * 
 *     def from_vector(self, in_vec, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2281
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias
 *         if bias is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_18from_map[] = "CountingPotentials.from_map(self, in_map, bias=None)";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_19from_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_map = 0;
  PyObject *__pyx_v_bias = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_map,&__pyx_n_s_bias,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_map)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bias);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_map") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_map = values[0];
    __pyx_v_bias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_map", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_18from_map(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), __pyx_v_in_map, __pyx_v_bias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_18from_map(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, PyObject *__pyx_v_in_map, PyObject *__pyx_v_bias) {
  int __pyx_v_my_bias;
  std::map<int,int> __pyx_v_map_potentials;
  std::vector<int> __pyx_v_potentials;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  std::vector<int> __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  size_t __pyx_t_13;
  HypergraphPotentials<CountingPotential> *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_map", 0);

  /* "pydecode/potentials.pyx":2283
 *     def from_map(self, in_map, bias=None):
 *         cdef int my_bias
 *         if bias is None:             # <<<<<<<<<<<<<<
 *             my_bias = Counting_one()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_bias == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2284
 *         cdef int my_bias
 *         if bias is None:
 *             my_bias = Counting_one()             # <<<<<<<<<<<<<<
 *         else:
 *             my_bias = _Counting_to_cpp(bias)
 */
    __pyx_v_my_bias = CountingPotential::one();
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2286
 *             my_bias = Counting_one()
 *         else:
 *             my_bias = _Counting_to_cpp(bias)             # <<<<<<<<<<<<<<
 * 
 *         cdef c_map.map[int, int] map_potentials
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_bias); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_my_bias = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_3);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2290
 *         cdef c_map.map[int, int] map_potentials
 *         cdef vector[int] potentials = \
 *             vector[int](len(in_map))             # <<<<<<<<<<<<<<
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_in_map); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = std::vector<int>(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_potentials = __pyx_t_5;

  /* "pydecode/potentials.pyx":2292
 *             vector[int](len(in_map))
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):             # <<<<<<<<<<<<<<
 *             map_potentials[key] = j
 *             potentials[j] = _Counting_to_cpp(v)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_in_map == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_in_map, 0, __pyx_n_s_iteritems, (&__pyx_t_8), (&__pyx_t_3)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_7);
  __pyx_t_7 = __pyx_t_9;
  __pyx_t_9 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_8, &__pyx_t_4, &__pyx_t_9, &__pyx_t_10, NULL, __pyx_t_3);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_10);
    __pyx_t_10 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
    __pyx_t_10 = PyNumber_Add(__pyx_t_6, __pyx_int_1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "pydecode/potentials.pyx":2293
 * 
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j             # <<<<<<<<<<<<<<
 *             potentials[j] = _Counting_to_cpp(v)
 * 
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_map_potentials[__pyx_t_12]) = __pyx_t_11;

    /* "pydecode/potentials.pyx":2294
 *         for j, (key, v) in enumerate(in_map.iteritems()):
 *             map_potentials[key] = j
 *             potentials[j] = _Counting_to_cpp(v)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr =  \
 */
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_v); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = __Pyx_PyInt_As_size_t(__pyx_v_j); if (unlikely((__pyx_t_13 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_potentials[__pyx_t_13]) = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_t_11);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pydecode/potentials.pyx":2297
 * 
 *         self.thisptr =  \
 *             cmake_potentials_Counting(self.hypergraph.thisptr,             # <<<<<<<<<<<<<<
 *                                         map_potentials,
 *                                         potentials, my_bias)
 */
  try {
    __pyx_t_14 = HypergraphSparsePotentials<CountingPotential>::make_potentials(__pyx_v_self->hypergraph->thisptr, __pyx_v_map_potentials, __pyx_v_potentials, __pyx_v_my_bias);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2296
 *             potentials[j] = _Counting_to_cpp(v)
 * 
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *             cmake_potentials_Counting(self.hypergraph.thisptr,
 *                                         map_potentials,
 */
  __pyx_v_self->thisptr = __pyx_t_14;

  /* "pydecode/potentials.pyx":2300
 *                                         map_potentials,
 *                                         potentials, my_bias)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, CHypergraphCountingPotentials *ptr,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2281
 *         return self
 * 
 *     def from_map(self, in_map, bias=None):             # <<<<<<<<<<<<<<
 *         cdef int my_bias
 *         if bias is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.from_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2302
 *         return self
 * 
 *     cdef init(self, CHypergraphCountingPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

static PyObject *__pyx_f_8pydecode_10potentials_18CountingPotentials_init(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, HypergraphPotentials<CountingPotential> *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_projection) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2304
 *     cdef init(self, CHypergraphCountingPotentials *ptr,
 *               HypergraphMap projection):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.projection = projection
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2305
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 *         self.projection = projection             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_projection));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_projection));
  __Pyx_GOTREF(__pyx_v_self->projection);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->projection));
  __pyx_v_self->projection = __pyx_v_projection;

  /* "pydecode/potentials.pyx":2306
 *         self.thisptr = ptr
 *         self.projection = projection
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Edge edge not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2302
 *         return self
 * 
 *     cdef init(self, CHypergraphCountingPotentials *ptr,             # <<<<<<<<<<<<<<
 *               HypergraphMap projection):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2308
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 0, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_20__getitem__(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_20__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2309
 * 
 *     def __getitem__(self, Edge edge not None):
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2308
 *         return self
 * 
 *     def __getitem__(self, Edge edge not None):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2311
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18CountingPotentials_22dot[] = "CountingPotentials.dot(self, Path path)\n\n        dot(path)\n\n        Take the dot product with `path` :math:`\\theta^{\\top} y`.\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_18CountingPotentials_23dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_10hypergraph_Path, 0, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18CountingPotentials_22dot(((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18CountingPotentials_22dot(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/potentials.pyx":2318
 *         """
 * 
 *         return _Counting_from_cpp(self.thisptr.dot(deref(path.thisptr)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2311
 *         return _Counting_from_cpp(self.thisptr.score(edge.edgeptr))
 * 
 *     def dot(self, Path path not None):             # <<<<<<<<<<<<<<
 *         r"""
 *         dot(path)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.CountingPotentials.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2322
 * 
 * cdef class _Counting:
 *     cdef _Counting init(self, int val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

static struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_f_8pydecode_10potentials_9_Counting_init(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self, int __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2323
 * cdef class _Counting:
 *     cdef _Counting init(self, int val):
 *         self.thisval = val             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->thisval = __pyx_v_val;

  /* "pydecode/potentials.pyx":2324
 *     cdef _Counting init(self, int val):
 *         self.thisval = val
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2322
 * 
 * cdef class _Counting:
 *     cdef _Counting init(self, int val):             # <<<<<<<<<<<<<<
 *         self.thisval = val
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2327
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9_Counting_from_value[] = "_Counting.from_value(int val)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9_Counting_1from_value = {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_from_value)};
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_1from_value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_val;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_val = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_val == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_value", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._Counting.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_from_value(__pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_from_value(int __pyx_v_val) {
  struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_created = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_value", 0);

  /* "pydecode/potentials.pyx":2328
 *     @staticmethod
 *     def from_value(int val):
 *         created = _Counting()             # <<<<<<<<<<<<<<
 *         created.thisval = _Counting_to_cpp(val)
 *         return created
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Counting)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_created = ((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2329
 *     def from_value(int val):
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)             # <<<<<<<<<<<<<<
 *         return created
 * 
 */
  __pyx_v_created->thisval = __pyx_f_8pydecode_10potentials__Counting_to_cpp(__pyx_v_val);

  /* "pydecode/potentials.pyx":2330
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 *         return created             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_created));
  __pyx_r = ((PyObject *)__pyx_v_created);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2327
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting.from_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_created);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2333
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9_Counting_2zero_raw[] = "_Counting.zero_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9_Counting_3zero_raw = {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_2zero_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_3zero_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_2zero_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_2zero_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero_raw", 0);

  /* "pydecode/potentials.pyx":2334
 *     @staticmethod
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(CountingPotential::zero()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2333
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting.zero_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2337
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9_Counting_4one_raw[] = "_Counting.one_raw()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9_Counting_5one_raw = {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_4one_raw)};
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_5one_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_raw (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one_raw", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one_raw", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_4one_raw();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_4one_raw() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_raw", 0);

  /* "pydecode/potentials.pyx":2338
 *     @staticmethod
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(CountingPotential::one()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2337
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting.one_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2341
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_zero())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9_Counting_6zero[] = "_Counting.zero()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9_Counting_7zero = {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_6zero)};
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_7zero(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("zero", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "zero", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_6zero();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_6zero() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zero", 0);

  /* "pydecode/potentials.pyx":2342
 *     @staticmethod
 *     def zero():
 *         return _Counting().init(Counting_zero())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Counting)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Counting *)((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1), CountingPotential::zero())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2341
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_zero())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Counting.zero", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2345
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_one())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_9_Counting_8one[] = "_Counting.one()";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9_Counting_9one = {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_8one)};
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_9one(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("one", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "one", 0))) return NULL;
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_8one();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_8one() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one", 0);

  /* "pydecode/potentials.pyx":2346
 *     @staticmethod
 *     def one():
 *         return _Counting().init(Counting_one())             # <<<<<<<<<<<<<<
 * 
 *     def __add__(_Counting self, _Counting other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Counting)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Counting *)((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1), CountingPotential::one())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2345
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_one())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Counting.one", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2348
 *         return _Counting().init(Counting_one())
 * 
 *     def __add__(_Counting self, _Counting other):             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_add(self.thisval,
 *                                                   other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_11__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Counting, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Counting, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_10__add__(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_10__add__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "pydecode/potentials.pyx":2349
 * 
 *     def __add__(_Counting self, _Counting other):
 *         return _Counting().init(Counting_add(self.thisval,             # <<<<<<<<<<<<<<
 *                                                   other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Counting)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2350
 *     def __add__(_Counting self, _Counting other):
 *         return _Counting().init(Counting_add(self.thisval,
 *                                                   other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(_Counting self, _Counting other):
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Counting *)((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1), CountingPotential::add(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2348
 *         return _Counting().init(Counting_one())
 * 
 *     def __add__(_Counting self, _Counting other):             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_add(self.thisval,
 *                                                   other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Counting.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2352
 *                                                   other.thisval))
 * 
 *     def __mul__(_Counting self, _Counting other):             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_times(self.thisval,
 *                                                     other.thisval))
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_13__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10potentials__Counting, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10potentials__Counting, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_12__mul__(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_12__mul__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self, struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "pydecode/potentials.pyx":2353
 * 
 *     def __mul__(_Counting self, _Counting other):
 *         return _Counting().init(Counting_times(self.thisval,             # <<<<<<<<<<<<<<
 *                                                     other.thisval))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__Counting)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2354
 *     def __mul__(_Counting self, _Counting other):
 *         return _Counting().init(Counting_times(self.thisval,
 *                                                     other.thisval))             # <<<<<<<<<<<<<<
 * 
 *     property value:
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials__Counting *)((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_t_1), CountingPotential::times(__pyx_v_self->thisval, __pyx_v_other->thisval))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2352
 *                                                   other.thisval))
 * 
 *     def __mul__(_Counting self, _Counting other):             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_times(self.thisval,
 *                                                     other.thisval))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._Counting.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2357
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisval)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_9_Counting_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_9_Counting_5value___get__(((struct __pyx_obj_8pydecode_10potentials__Counting *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_9_Counting_5value___get__(struct __pyx_obj_8pydecode_10potentials__Counting *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2358
 *     property value:
 *         def __get__(self):
 *             return _Counting_from_cpp(self.thisval)             # <<<<<<<<<<<<<<
 * 
 * cdef int _Counting_to_cpp(int val):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisval); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2357
 * 
 *     property value:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(self.thisval)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2360
 *             return _Counting_from_cpp(self.thisval)
 * 
 * cdef int _Counting_to_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static int __pyx_f_8pydecode_10potentials__Counting_to_cpp(int __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_Counting_to_cpp", 0);

  /* "pydecode/potentials.pyx":2361
 * 
 * cdef int _Counting_to_cpp(int val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_val;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2360
 *             return _Counting_from_cpp(self.thisval)
 * 
 * cdef int _Counting_to_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2364
 * 
 * 
 * cdef _Counting_from_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

static PyObject *__pyx_f_8pydecode_10potentials__Counting_from_cpp(int __pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Counting_from_cpp", 0);

  /* "pydecode/potentials.pyx":2365
 * 
 * cdef _Counting_from_cpp(int val):
 *     return val             # <<<<<<<<<<<<<<
 * 
 * cdef class CountingChart:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2364
 * 
 * 
 * cdef _Counting_from_cpp(int val):             # <<<<<<<<<<<<<<
 *     return val
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials._Counting_from_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2369
 * cdef class CountingChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.chart = NULL
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingChart___init__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self), __pyx_v_graph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_13CountingChart___init__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2370
 * 
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Counting             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 *         if graph is not None:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Counting); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->kind);
  __Pyx_DECREF(__pyx_v_self->kind);
  __pyx_v_self->kind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2371
 *     def __init__(self, Hypergraph graph=None):
 *         self.kind = Counting
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 *         if graph is not None:
 *             self.chart = new CCountingChart(graph.thisptr)
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2372
 *         self.kind = Counting
 *         self.chart = NULL
 *         if graph is not None:             # <<<<<<<<<<<<<<
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_graph) != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pydecode/potentials.pyx":2373
 *         self.chart = NULL
 *         if graph is not None:
 *             self.chart = new CCountingChart(graph.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
    __pyx_v_self->chart = new Chart<CountingPotential>(__pyx_v_graph->thisptr);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2369
 * cdef class CountingChart:
 * 
 *     def __init__(self, Hypergraph graph=None):             # <<<<<<<<<<<<<<
 *         self.kind = Counting
 *         self.chart = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2375
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_13CountingChart_2__getitem__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2376
 * 
 *     def __getitem__(self, Node node):
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->chart->get(__pyx_v_node->nodeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2375
 *             self.chart = new CCountingChart(graph.thisptr)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.CountingChart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2378
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_13CountingChart_4__dealloc__(struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2379
 * 
 *     def __dealloc__(self):
 *         del self.chart             # <<<<<<<<<<<<<<
 *         self.chart = NULL
 * 
 */
  delete __pyx_v_self->chart;

  /* "pydecode/potentials.pyx":2380
 *     def __dealloc__(self):
 *         del self.chart
 *         self.chart = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef class _CountingMarginals:
 */
  __pyx_v_self->chart = NULL;

  /* "pydecode/potentials.pyx":2378
 *         return _Counting_from_cpp(self.chart.get(node.nodeptr))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.chart
 *         self.chart = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2386
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pydecode_10potentials_18_CountingMarginals___init__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/potentials.pyx":2387
 * 
 *     def __init__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/potentials.pyx":2386
 *     cdef Hypergraph graph
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2389
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pydecode_10potentials_18_CountingMarginals_2__dealloc__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/potentials.pyx":2390
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 */
  delete __pyx_v_self->thisptr;

  /* "pydecode/potentials.pyx":2389
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/potentials.pyx":2392
 *         del self.thisptr
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

static PyObject *__pyx_f_8pydecode_10potentials_18_CountingMarginals_init(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, Marginals<CountingPotential> const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2393
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2394
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2395
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2392
 *         del self.thisptr
 * 
 *     cdef init(self, const CCountingMarginals *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = graph
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2397
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self), ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_4__getitem__(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2398
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2399
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2400
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(obj, Node):
 *             return _Counting_from_cpp(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pydecode/potentials.pyx":2401
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2402
 *                 self.thisptr.marginal((<Edge>obj).edgeptr))
 *         elif isinstance(obj, Node):
 *             return _Counting_from_cpp(             # <<<<<<<<<<<<<<
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pydecode/potentials.pyx":2403
 *         elif isinstance(obj, Node):
 *             return _Counting_from_cpp(
 *                 self.thisptr.marginal((<Node>obj).nodeptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 */
    __pyx_t_3 = __pyx_f_8pydecode_10potentials__Counting_from_cpp(__pyx_v_self->thisptr->marginal(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2405
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_hypergraph); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_HypergraphAccessException); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2407
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Passed_s, __pyx_v_obj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "pydecode/potentials.pyx":2406
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(
 *                 "Only nodes and edges have Counting marginal values." +             # <<<<<<<<<<<<<<
 *                 "Passed %s." % obj)
 * 
 */
    __pyx_t_5 = PyNumber_Add(__pyx_kp_s_Only_nodes_and_edges_have_Counti, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/potentials.pyx":2405
 *                 self.thisptr.marginal((<Node>obj).nodeptr))
 *         else:
 *             raise py_hypergraph.HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                 "Only nodes and edges have Counting marginal values." +
 *                 "Passed %s." % obj)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2397
 *         return self
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             return _Counting_from_cpp(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2411
 * 
 * 
 *     def threshold(self, int semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18_CountingMarginals_6threshold[] = "_CountingMarginals.threshold(self, int semi)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7threshold(PyObject *__pyx_v_self, PyObject *__pyx_arg_semi) {
  int __pyx_v_semi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("threshold (wrapper)", 0);
  assert(__pyx_arg_semi); {
    __pyx_v_semi = __Pyx_PyInt_As_int(__pyx_arg_semi); if (unlikely((__pyx_v_semi == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10potentials_18_CountingMarginals_6threshold(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_v_self), ((int)__pyx_v_semi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18_CountingMarginals_6threshold(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *__pyx_v_self, int __pyx_v_semi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("threshold", 0);

  /* "pydecode/potentials.pyx":2415
 *         TODO: fill in
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),             # <<<<<<<<<<<<<<
 *                                                None)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2416
 *         """
 *         return BoolPotentials(self.graph).init(self.thisptr.threshold(semi),
 *                                                None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials *)((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)__pyx_t_2), __pyx_v_self->thisptr->threshold(__pyx_v_semi), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2411
 * 
 * 
 *     def threshold(self, int semi):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials._CountingMarginals.threshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2427
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_inside[] = "Counting.inside(Hypergraph graph, CountingPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<CountingPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2429
 *     def inside(Hypergraph graph,
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()             # <<<<<<<<<<<<<<
 *         chart.chart = inside_Counting(graph.thisptr,
 *                                         deref(potentials.thisptr))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2430
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 *         chart.chart = inside_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                         deref(potentials.thisptr))
 *         return chart
 */
  try {
    __pyx_t_2 = general_inside<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2432
 *         chart.chart = inside_Counting(graph.thisptr,
 *                                         deref(potentials.thisptr))
 *         return chart             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_v_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2427
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Counting.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2435
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_2outside[] = "Counting.outside(Hypergraph graph, CountingPotentials potentials, CountingChart inside_chart)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_10potentials_CountingChart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Chart<CountingPotential> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2438
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 *         cdef CountingChart out_chart = CountingChart()             # <<<<<<<<<<<<<<
 *         out_chart.chart = outside_Counting(graph.thisptr,
 *                                              deref(potentials.thisptr),
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2439
 *                 CountingChart inside_chart):
 *         cdef CountingChart out_chart = CountingChart()
 *         out_chart.chart = outside_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 */
  try {
    __pyx_t_2 = general_outside<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), (*__pyx_v_inside_chart->chart));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_out_chart->chart = __pyx_t_2;

  /* "pydecode/potentials.pyx":2442
 *                                              deref(potentials.thisptr),
 *                                              deref(inside_chart.chart))
 *         return out_chart             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2435
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.potentials.Counting.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2447
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_4viterbi[] = "Counting.viterbi(Hypergraph graph, CountingPotentials potentials, CountingChart chart=None)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_5viterbi = {__Pyx_NAMESTR("viterbi"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_5viterbi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_4viterbi)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_5viterbi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("viterbi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/potentials.pyx":2449
 *     def viterbi(Hypergraph graph,
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):             # <<<<<<<<<<<<<<
 *         cdef CCountingChart *used_chart
 *         cdef CBackPointers *used_back = \
 */
    values[2] = (PyObject *)((struct __pyx_obj_8pydecode_10potentials_CountingChart *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "viterbi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_chart = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("viterbi", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_chart), __pyx_ptype_8pydecode_10potentials_CountingChart, 1, "chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_4viterbi(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* "pydecode/potentials.pyx":2447
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_4viterbi(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, struct __pyx_obj_8pydecode_10potentials_CountingChart *__pyx_v_chart) {
  Chart<CountingPotential> *__pyx_v_used_chart;
  BackPointers *__pyx_v_used_back;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Chart<CountingPotential> *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("viterbi", 0);

  /* "pydecode/potentials.pyx":2452
 *         cdef CCountingChart *used_chart
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)             # <<<<<<<<<<<<<<
 *         if chart is not None:
 *             used_chart = chart.chart
 */
  __pyx_v_used_back = new BackPointers(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":2453
 *         cdef CBackPointers *used_back = \
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:             # <<<<<<<<<<<<<<
 *             used_chart = chart.chart
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_chart) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/potentials.pyx":2454
 *             new CBackPointers(graph.thisptr)
 *         if chart is not None:
 *             used_chart = chart.chart             # <<<<<<<<<<<<<<
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)
 */
    __pyx_t_3 = __pyx_v_chart->chart;
    __pyx_v_used_chart = __pyx_t_3;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/potentials.pyx":2456
 *             used_chart = chart.chart
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)             # <<<<<<<<<<<<<<
 *         viterbi_Counting(graph.thisptr,
 *                            deref(potentials.thisptr),
 */
    __pyx_v_used_chart = new Chart<CountingPotential>(__pyx_v_graph->thisptr);
  }
  __pyx_L3:;

  /* "pydecode/potentials.pyx":2457
 *         else:
 *             used_chart = new CCountingChart(graph.thisptr)
 *         viterbi_Counting(graph.thisptr,             # <<<<<<<<<<<<<<
 *                            deref(potentials.thisptr),
 *                            used_chart,
 */
  try {
    general_viterbi<CountingPotential>(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_used_chart, __pyx_v_used_back);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/potentials.pyx":2461
 *                            used_chart,
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)             # <<<<<<<<<<<<<<
 *         if chart is None:
 *             del used_chart
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BackPointers)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers *)((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_4), __pyx_v_used_back, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_bp = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pydecode/potentials.pyx":2462
 *                            used_back)
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:             # <<<<<<<<<<<<<<
 *             del used_chart
 *         return bp
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_chart) == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pydecode/potentials.pyx":2463
 *         bp = BackPointers().init(used_back, graph)
 *         if chart is None:
 *             del used_chart             # <<<<<<<<<<<<<<
 *         return bp
 * 
 */
    delete __pyx_v_used_chart;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/potentials.pyx":2464
 *         if chart is None:
 *             del used_chart
 *         return bp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_bp));
  __pyx_r = ((PyObject *)__pyx_v_bp);
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2447
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.Counting.viterbi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2469
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_6compute_marginals[] = "Counting.compute_marginals(Hypergraph graph, CountingPotentials potentials)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_7compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_6compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_7compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_6compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials) {
  Marginals<CountingPotential> const *__pyx_v_marginals;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2472
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 *             Counting_compute(graph.thisptr, potentials.thisptr)             # <<<<<<<<<<<<<<
 *         return _CountingMarginals().init(marginals, graph)
 * 
 */
  __pyx_v_marginals = Marginals<CountingPotential>::compute(__pyx_v_graph->thisptr, __pyx_v_potentials->thisptr);

  /* "pydecode/potentials.pyx":2473
 *         cdef const CCountingMarginals *marginals = \
 *             Counting_compute(graph.thisptr, potentials.thisptr)
 *         return _CountingMarginals().init(marginals, graph)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__CountingMarginals)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals *)((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)__pyx_t_1), __pyx_v_marginals, __pyx_v_graph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2469
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.Counting.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2476
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8Counting_8prune_hypergraph[] = "Counting.prune_hypergraph(Hypergraph graph, CountingPotentials potentials, threshold)";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_8Counting_9prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8Counting_8prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_8Counting_9prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_threshold = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_threshold,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_threshold = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.Counting.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8Counting_8prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_marginals = NULL;
  PyObject *__pyx_v_bool_potentials = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2479
 *                          CountingPotentials potentials,
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_potentials));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_potentials));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_potentials));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_marginals = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2480
 *                          threshold):
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)             # <<<<<<<<<<<<<<
 *         return make_pruning_projections(graph, bool_potentials)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_marginals, __pyx_n_s_threshold); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_threshold);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_threshold);
  __Pyx_GIVEREF(__pyx_v_threshold);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bool_potentials = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2481
 *         marginals = compute_marginals(graph, potentials)
 *         bool_potentials = marginals.threshold(threshold)
 *         return make_pruning_projections(graph, bool_potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_bool_potentials);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_bool_potentials);
  __Pyx_GIVEREF(__pyx_v_bool_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2476
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.Counting.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_marginals);
  __Pyx_XDECREF(__pyx_v_bool_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2509
 *     """
 * 
 *     cdef BackPointers init(self, CBackPointers *ptr,             # <<<<<<<<<<<<<<
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 */

static struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_f_8pydecode_10potentials_12BackPointers_init(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, BackPointers *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/potentials.pyx":2511
 *     cdef BackPointers init(self, CBackPointers *ptr,
 *                            Hypergraph graph):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/potentials.pyx":2512
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/potentials.pyx":2513
 *         self.thisptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     property path:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2509
 *     """
 * 
 *     cdef BackPointers init(self, CBackPointers *ptr,             # <<<<<<<<<<<<<<
 *                            Hypergraph graph):
 *         self.thisptr = ptr
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2516
 * 
 *     property path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers_4path___get__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self) {
  Hyperpath *__pyx_v_path;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/potentials.pyx":2517
 *     property path:
 *         def __get__(self):
 *             cdef CHyperpath *path = self.thisptr.construct_path()             # <<<<<<<<<<<<<<
 *             return Path().init(path, self.graph)
 * 
 */
  __pyx_v_path = __pyx_v_self->thisptr->construct_path();

  /* "pydecode/potentials.pyx":2518
 *         def __get__(self):
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, Node node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Path)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *)((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_t_1), __pyx_v_path, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2516
 * 
 *     property path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CHyperpath *path = self.thisptr.construct_path()
 *             return Path().init(path, self.graph)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BackPointers.path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2520
 *             return Path().init(path, self.graph)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_10hypergraph_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(((struct __pyx_obj_8pydecode_10potentials_BackPointers *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12BackPointers___getitem__(struct __pyx_obj_8pydecode_10potentials_BackPointers *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/potentials.pyx":2521
 * 
 *     def __getitem__(self, Node node):
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     # def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *)((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_1), __pyx_v_self->thisptr->get(__pyx_v_node->nodeptr), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2520
 *             return Path().init(path, self.graph)
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         return Edge().init(self.thisptr.get(node.nodeptr), self.graph)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.BackPointers.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2528
 * 
 * 
 * def inside(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     inside(Hypergraph graph, Potentials potentials):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_inside[] = "inside(Hypergraph graph, potentials)\n\n    inside(Hypergraph graph, Potentials potentials):\n\n    Compute inside chart values for the given potentials.\n\n    Parameters\n    ----------\n\n    graph : :py:class:`Hypergraph`\n      The hypergraph :math:`({\\cal V}, {\\cal E})` to search.\n\n    potentials : :py:class:`Potentials`\n      The potentials :math:`\\theta` to use for inside computations.\n\n    Returns\n    -------\n\n    chart : :py:class:`Chart`\n       The inside chart. Type depends on potentials type, i.e.\n       for inside potentials this will be the probability paths\n       reaching this node.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_1inside = {__Pyx_NAMESTR("inside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_1inside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_inside)};
static PyObject *__pyx_pw_8pydecode_10potentials_1inside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "inside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_inside(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_inside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inside", 0);

  /* "pydecode/potentials.pyx":2551
 *        reaching this node.
 *     """
 *     return potentials.kind.inside(graph, potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_inside); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_potentials);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_potentials);
  __Pyx_GIVEREF(__pyx_v_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2528
 * 
 * 
 * def inside(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     inside(Hypergraph graph, Potentials potentials):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2554
 * 
 * 
 * def outside(Hypergraph graph, potentials, inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     outside(Hypergraph graph, Potentials potentials, Chart inside_chart)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_2outside[] = "outside(Hypergraph graph, potentials, inside_chart)\n\n    outside(Hypergraph graph, Potentials potentials, Chart inside_chart)\n\n    Compute the outside scores for the hypergraph.\n\n    Parameters\n    -----------\n\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials :math:`\\theta` to use for outside computations.\n\n    inside_chart : :py:class:`Chart`\n       The associated inside chart. Compute by calling\n       :py:function:`inside`.  Must be the same type as potentials.\n\n    Returns\n    ---------\n\n    chart : :py:class:`Chart`\n       The outside chart. Type depends on potentials type, i.e. for\n       inside potentials this will be the probability paths reaching\n       this node.\n\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_3outside = {__Pyx_NAMESTR("outside"), (PyCFunction)__pyx_pw_8pydecode_10potentials_3outside, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_2outside)};
static PyObject *__pyx_pw_8pydecode_10potentials_3outside(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_potentials = 0;
  PyObject *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = values[1];
    __pyx_v_inside_chart = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_2outside(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_inside_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_2outside(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_inside_chart) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside", 0);

  /* "pydecode/potentials.pyx":2582
 * 
 *     """
 *     return potentials.kind.outside(graph, potentials, inside_chart)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_outside); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_potentials);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_potentials);
  __Pyx_GIVEREF(__pyx_v_potentials);
  __Pyx_INCREF(__pyx_v_inside_chart);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_inside_chart);
  __Pyx_GIVEREF(__pyx_v_inside_chart);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2554
 * 
 * 
 * def outside(Hypergraph graph, potentials, inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     outside(Hypergraph graph, Potentials potentials, Chart inside_chart)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2585
 * 
 * 
 * def best_path(Hypergraph graph, potentials, chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     best_path(Hypergraph graph, Potentials potentials):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_5best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_4best_path[] = "best_path(Hypergraph graph, potentials, chart=None)\n\n    best_path(Hypergraph graph, Potentials potentials):\n\n    Find the highest-scoring path\n    :math:`\\arg \\max_{y \\in {\\cal X}} \\theta^{\\top} x`\n    in the hypergraph.\n\n    Parameters\n    ----------\n\n    graph : :py:class:`Hypergraph`\n      The hypergraph :math:`({\\cal V}, {\\cal E})` to search.\n\n    potentials : :py:class:`Potentials`\n      The potentials :math:`\\theta` of the hypergraph.\n\n    Returns\n    -------\n    path : :py:class:`Path`\n      The best path :math:`\\arg \\max_{y \\in {\\cal X}} \\theta^{\\top} x`.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_5best_path = {__Pyx_NAMESTR("best_path"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5best_path, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_4best_path)};
static PyObject *__pyx_pw_8pydecode_10potentials_5best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_potentials = 0;
  PyObject *__pyx_v_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("best_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_chart,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("best_path", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chart);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "best_path") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = values[1];
    __pyx_v_chart = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("best_path", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_4best_path(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_chart);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_4best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_chart) {
  PyObject *__pyx_v_bp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("best_path", 0);

  /* "pydecode/potentials.pyx":2607
 *       The best path :math:`\arg \max_{y \in {\cal X}} \theta^{\top} x`.
 *     """
 *     bp = potentials.kind.viterbi(graph, potentials, chart)             # <<<<<<<<<<<<<<
 *     return bp.path
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_viterbi); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_potentials);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_potentials);
  __Pyx_GIVEREF(__pyx_v_potentials);
  __Pyx_INCREF(__pyx_v_chart);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_chart);
  __Pyx_GIVEREF(__pyx_v_chart);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_bp = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pydecode/potentials.pyx":2608
 *     """
 *     bp = potentials.kind.viterbi(graph, potentials, chart)
 *     return bp.path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_bp, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2585
 * 
 * 
 * def best_path(Hypergraph graph, potentials, chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     best_path(Hypergraph graph, Potentials potentials):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2611
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     prune_hypergraph(Hypergraph graph, potentials, thres)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_6prune_hypergraph[] = "prune_hypergraph(Hypergraph graph, potentials, thres)\n\n    prune_hypergraph(Hypergraph graph, potentials, thres)\n\n    Prune hyperedges with low max-marginal score from the hypergraph.\n\n    Parameters\n    -----------\n\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials of the hypergraph.\n\n    Returns\n    --------\n    (hypergraph, potentials) : :py:class:`Hypergraph`, :py:class:`Potentials`\n       The new hypergraphs and potentials.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_7prune_hypergraph = {__Pyx_NAMESTR("prune_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7prune_hypergraph, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_6prune_hypergraph)};
static PyObject *__pyx_pw_8pydecode_10potentials_7prune_hypergraph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_potentials = 0;
  PyObject *__pyx_v_thres = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prune_hypergraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_thres,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_thres)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prune_hypergraph") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = values[1];
    __pyx_v_thres = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prune_hypergraph", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_6prune_hypergraph(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_thres);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_6prune_hypergraph(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials, PyObject *__pyx_v_thres) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prune_hypergraph", 0);

  /* "pydecode/potentials.pyx":2631
 *        The new hypergraphs and potentials.
 *     """
 *     return potentials.kind.prune_hypergraph(graph, potentials, thres)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_prune_hypergraph); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_potentials);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_potentials);
  __Pyx_GIVEREF(__pyx_v_potentials);
  __Pyx_INCREF(__pyx_v_thres);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_thres);
  __Pyx_GIVEREF(__pyx_v_thres);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2611
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     prune_hypergraph(Hypergraph graph, potentials, thres)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.prune_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2634
 * 
 * 
 * def compute_marginals(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     compute_marginals(Hypergraph graph, Potentials potentials):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_9compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_8compute_marginals[] = "compute_marginals(Hypergraph graph, potentials)\n\n    compute_marginals(Hypergraph graph, Potentials potentials):\n\n    Compute marginals for hypergraph and potentials.\n\n    Parameters\n    -----------\n    graph : :py:class:`Hypergraph`\n       The hypergraph to search.\n\n    potentials : :py:class:`Potentials`\n       The potentials of the hypergraph.\n\n    Returns\n    --------\n    marginals : :py:class:`Marginals`\n       The node and edge marginals associated with these potentials.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_9compute_marginals = {__Pyx_NAMESTR("compute_marginals"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9compute_marginals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8compute_marginals)};
static PyObject *__pyx_pw_8pydecode_10potentials_9compute_marginals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_potentials = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_marginals (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_marginals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_marginals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_8compute_marginals(__pyx_self, __pyx_v_graph, __pyx_v_potentials);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_8compute_marginals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_marginals", 0);

  /* "pydecode/potentials.pyx":2653
 *        The node and edge marginals associated with these potentials.
 *     """
 *     return potentials.kind.compute_marginals(graph, potentials)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_potentials, __pyx_n_s_kind); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_compute_marginals); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(__pyx_v_potentials);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_potentials);
  __Pyx_GIVEREF(__pyx_v_potentials);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2634
 * 
 * 
 * def compute_marginals(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     compute_marginals(Hypergraph graph, Potentials potentials):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.compute_marginals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2682
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_11make_pruning_projections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_10make_pruning_projections[] = "make_pruning_projections(Hypergraph graph, BoolPotentials filt)\n\n    DEPRECATED\n\n    Use project.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_11make_pruning_projections = {__Pyx_NAMESTR("make_pruning_projections"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11make_pruning_projections, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_10make_pruning_projections)};
static PyObject *__pyx_pw_8pydecode_10potentials_11make_pruning_projections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_pruning_projections (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_filt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("make_pruning_projections", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "make_pruning_projections") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_filt = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_pruning_projections", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.make_pruning_projections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filt), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "filt", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_10make_pruning_projections(__pyx_self, __pyx_v_graph, __pyx_v_filt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_10make_pruning_projections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filt) {
  HypergraphMap const *__pyx_v_projection;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_pruning_projections", 0);

  /* "pydecode/potentials.pyx":2689
 *     """
 *     cdef const CHypergraphMap *projection = \
 *         cproject_hypergraph(graph.thisptr,             # <<<<<<<<<<<<<<
 *                             deref(filt.thisptr))
 *     return HypergraphMap().init(projection, graph, None)
 */
  __pyx_v_projection = project_hypergraph(__pyx_v_graph->thisptr, (*__pyx_v_filt->thisptr));

  /* "pydecode/potentials.pyx":2691
 *         cproject_hypergraph(graph.thisptr,
 *                             deref(filt.thisptr))
 *     return HypergraphMap().init(projection, graph, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *)((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1), __pyx_v_projection, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2682
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.make_pruning_projections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2694
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Prune a graph based on a set of boolean potentials.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_13project(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_12project[] = "project(Hypergraph graph, BoolPotentials filter)\n\n    Prune a graph based on a set of boolean potentials.\n    Edges with value 0 are pruned, edges with value\n    1 are pruned if they are no longer in a path.\n\n    Parameters\n    -----------\n    graph : Hypergraph\n\n    filter : BoolPotentials\n        The pruning filter to use.\n\n    Returns\n    --------\n    map : HypergraphMap\n        A map from the original graph to the new graph produced.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_13project = {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_12project)};
static PyObject *__pyx_pw_8pydecode_10potentials_13project(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_filter,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_filter = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filter), __pyx_ptype_8pydecode_10potentials_BoolPotentials, 1, "filter", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_12project(__pyx_self, __pyx_v_graph, __pyx_v_filter);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_12project(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_BoolPotentials *__pyx_v_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project", 0);

  /* "pydecode/potentials.pyx":2712
 *         A map from the original graph to the new graph produced.
 *     """
 *     return make_pruning_projections(graph, filter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_make_pruning_projections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_filter));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_filter));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_filter));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2694
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Prune a graph based on a set of boolean potentials.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.potentials.project", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2716
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_15binarize(PyObject *__pyx_self, PyObject *__pyx_v_graph); /*proto*/
static char __pyx_doc_8pydecode_10potentials_14binarize[] = "binarize(Hypergraph graph)\n\n    Binarize a hypergraph by making all k-ary edges right branching.\n\n    Parameters\n    ----------\n    graph : Hypergraph\n\n    Returns\n    --------\n    map : HypergraphMap\n        A map from the original graph to the binary branching graph.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_15binarize = {__Pyx_NAMESTR("binarize"), (PyCFunction)__pyx_pw_8pydecode_10potentials_15binarize, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14binarize)};
static PyObject *__pyx_pw_8pydecode_10potentials_15binarize(PyObject *__pyx_self, PyObject *__pyx_v_graph) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("binarize (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_14binarize(__pyx_self, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_14binarize(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  HypergraphMap *__pyx_v_hypergraph_map;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("binarize", 0);

  /* "pydecode/potentials.pyx":2729
 *         A map from the original graph to the binary branching graph.
 *     """
 *     cdef CHypergraphMap *hypergraph_map = cbinarize(graph.thisptr)             # <<<<<<<<<<<<<<
 *     return HypergraphMap().init(hypergraph_map, graph, None)
 * 
 */
  __pyx_v_hypergraph_map = binarize(__pyx_v_graph->thisptr);

  /* "pydecode/potentials.pyx":2730
 *     """
 *     cdef CHypergraphMap *hypergraph_map = cbinarize(graph.thisptr)
 *     return HypergraphMap().init(hypergraph_map, graph, None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *)((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1), __pyx_v_hypergraph_map, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2716
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.binarize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2733
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_17pairwise_dot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_16pairwise_dot[] = "pairwise_dot(SparseVectorPotentials potentials, vec, LogViterbiPotentials weights)\n\n    DEPRECATED.\n\n    1) Take the dot produce of each element of potentials and vector.\n    2) Add this value to each element of weights.\n\n    Parameters\n    -----------\n    potentials: SparseVectorPotentials\n        A vector associated with each edge.\n\n    vec: list-like\n        A float vector\n\n    weights: LogViterbiPotentials\n        A mutable set of potentials.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_17pairwise_dot = {__Pyx_NAMESTR("pairwise_dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17pairwise_dot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16pairwise_dot)};
static PyObject *__pyx_pw_8pydecode_10potentials_17pairwise_dot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials = 0;
  PyObject *__pyx_v_vec = 0;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pairwise_dot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_potentials,&__pyx_n_s_vec,&__pyx_n_s_weights,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pairwise_dot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)values[0]);
    __pyx_v_vec = values[1];
    __pyx_v_weights = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pairwise_dot", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.pairwise_dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_16pairwise_dot(__pyx_self, __pyx_v_potentials, __pyx_v_vec, __pyx_v_weights);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_16pairwise_dot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *__pyx_v_potentials, PyObject *__pyx_v_vec, struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *__pyx_v_weights) {
  std::vector<double> __pyx_v_rvec;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pairwise_dot", 0);

  /* "pydecode/potentials.pyx":2753
 *         A mutable set of potentials.
 *     """
 *     cdef vector[double] rvec = vector[double]()             # <<<<<<<<<<<<<<
 *     for i in vec:
 *         rvec.push_back(<double>i)
 */
  try {
    __pyx_t_1 = std::vector<double>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rvec = __pyx_t_1;

  /* "pydecode/potentials.pyx":2754
 *     """
 *     cdef vector[double] rvec = vector[double]()
 *     for i in vec:             # <<<<<<<<<<<<<<
 *         rvec.push_back(<double>i)
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 */
  if (PyList_CheckExact(__pyx_v_vec) || PyTuple_CheckExact(__pyx_v_vec)) {
    __pyx_t_2 = __pyx_v_vec; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_vec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pydecode/potentials.pyx":2755
 *     cdef vector[double] rvec = vector[double]()
 *     for i in vec:
 *         rvec.push_back(<double>i)             # <<<<<<<<<<<<<<
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 */
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_i); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_rvec.push_back(((double)__pyx_t_6));
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2756
 *     for i in vec:
 *         rvec.push_back(<double>i)
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)             # <<<<<<<<<<<<<<
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,
 */
  pairwise_dot((*__pyx_v_potentials->thisptr), __pyx_v_rvec, __pyx_v_weights->thisptr);

  /* "pydecode/potentials.pyx":2733
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.potentials.pairwise_dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/potentials.pyx":2758
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10potentials_19extend_hypergraph_by_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10potentials_18extend_hypergraph_by_count[] = "extend_hypergraph_by_count(Hypergraph graph, CountingPotentials potentials, int lower_limit, int upper_limit, int goal)\n\n    DEPRECATED\n    ";
static PyMethodDef __pyx_mdef_8pydecode_10potentials_19extend_hypergraph_by_count = {__Pyx_NAMESTR("extend_hypergraph_by_count"), (PyCFunction)__pyx_pw_8pydecode_10potentials_19extend_hypergraph_by_count, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18extend_hypergraph_by_count)};
static PyObject *__pyx_pw_8pydecode_10potentials_19extend_hypergraph_by_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials = 0;
  int __pyx_v_lower_limit;
  int __pyx_v_upper_limit;
  int __pyx_v_goal;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend_hypergraph_by_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_potentials,&__pyx_n_s_lower_limit,&__pyx_n_s_upper_limit,&__pyx_n_s_goal,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lower_limit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper_limit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_goal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "extend_hypergraph_by_count") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_potentials = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)values[1]);
    __pyx_v_lower_limit = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_lower_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2760; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_upper_limit = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_upper_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_goal = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_goal == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2762; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("extend_hypergraph_by_count", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.potentials.extend_hypergraph_by_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_potentials), __pyx_ptype_8pydecode_10potentials_CountingPotentials, 1, "potentials", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10potentials_18extend_hypergraph_by_count(__pyx_self, __pyx_v_graph, __pyx_v_potentials, __pyx_v_lower_limit, __pyx_v_upper_limit, __pyx_v_goal);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10potentials_18extend_hypergraph_by_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_10potentials_CountingPotentials *__pyx_v_potentials, int __pyx_v_lower_limit, int __pyx_v_upper_limit, int __pyx_v_goal) {
  HypergraphMap *__pyx_v_projection;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extend_hypergraph_by_count", 0);

  /* "pydecode/potentials.pyx":2768
 * 
 *     cdef CHypergraphMap *projection = \
 *         cextend_hypergraph_by_count(graph.thisptr,             # <<<<<<<<<<<<<<
 *                                     deref(potentials.thisptr),
 *                                     lower_limit,
 */
  __pyx_v_projection = extend_hypergraph_by_count(__pyx_v_graph->thisptr, (*__pyx_v_potentials->thisptr), __pyx_v_lower_limit, __pyx_v_upper_limit, __pyx_v_goal);

  /* "pydecode/potentials.pyx":2774
 *                                     goal)
 * 
 *     return HypergraphMap().init(projection, None, graph)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *)((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1), __pyx_v_projection, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None), __pyx_v_graph)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pydecode/potentials.pyx":2758
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.potentials.extend_hypergraph_by_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":163
 * 
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

static std::pair<int,int> __pyx_convert_pair_from_py_int____int(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<int,int> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_int____int", 0);

  /* "pair.from_py":164
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":165
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_x); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_y); if (unlikely(__pyx_t_6 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = std::pair<int,int>(__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  /* "pair.from_py":163
 * 
 * @cname("__pyx_convert_pair_from_py_int____int")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_int____int(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<int,int> > __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(PyObject *__pyx_v_o) {
  std::vector<std::pair<int,int> > __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<int,int> > __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<int,int> __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_", 0);

  /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":49
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_int____int(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_int_2c_int_3e_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

static PyObject *__pyx_convert_pair_to_py_int____int(const std::pair<int,int> &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_int____int", 0);

  /* "pair.to_py":181
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):
 *     return X_to_py(p.first), Y_to_py(p.second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":180
 * 
 * @cname("__pyx_convert_pair_to_py_int____int")
 * cdef object __pyx_convert_pair_to_py_int____int(pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_int____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(const std::vector<std::pair<int,int> > &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_int____int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pydecode_10potentials_BackPointers __pyx_vtable_8pydecode_10potentials_BackPointers;

static PyObject *__pyx_tp_new_8pydecode_10potentials_BackPointers(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BackPointers *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_BackPointers;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BackPointers(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BackPointers(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BackPointers(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BackPointers *p = (struct __pyx_obj_8pydecode_10potentials_BackPointers *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BackPointers(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_12BackPointers_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_12BackPointers_4path_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BackPointers[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_BackPointers[] = {
  {(char *)"path", __pyx_getprop_8pydecode_10potentials_12BackPointers_path, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BackPointers = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BackPointers, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BackPointers = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_12BackPointers_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BackPointers = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BackPointers"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BackPointers), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BackPointers, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BackPointers, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BackPointers, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    The back pointers generated by the Viterbi algorithm.\n\n    Acts as a map::\n       >> print bp[node]\n\n    Gives the best back edge for node.\n\n    Attributes\n    -----------\n\n    path: Hyperpath\n       The best hyperpath from the root.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BackPointers, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BackPointers, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BackPointers, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_BackPointers, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BackPointers, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_ViterbiPotentials __pyx_vtable_8pydecode_10potentials_ViterbiPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_ViterbiPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_ViterbiPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_ViterbiPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_ViterbiPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_ViterbiPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17ViterbiPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17ViterbiPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_ViterbiPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_17ViterbiPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ViterbiPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_ViterbiPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ViterbiPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17ViterbiPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_ViterbiPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.ViterbiPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_ViterbiPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ViterbiPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ViterbiPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_ViterbiPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_ViterbiPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_ViterbiPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_ViterbiPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_ViterbiPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_ViterbiChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_ViterbiChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_12ViterbiChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_ViterbiChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_ViterbiChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_ViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_ViterbiChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_ViterbiChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_ViterbiChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_ViterbiChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_ViterbiChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ViterbiChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_12ViterbiChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_ViterbiChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.ViterbiChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_ViterbiChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_ViterbiChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_ViterbiChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ViterbiChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("ViterbiChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_ViterbiChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_ViterbiChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_ViterbiChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_12ViterbiChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_ViterbiChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Viterbi __pyx_vtable_8pydecode_10potentials__Viterbi;

static PyObject *__pyx_tp_new_8pydecode_10potentials__Viterbi(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__Viterbi *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__Viterbi *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__Viterbi;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__Viterbi(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_8_Viterbi_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_8_Viterbi_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__Viterbi[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_8_Viterbi_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_8_Viterbi_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__Viterbi[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_8_Viterbi_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__Viterbi = {
  __pyx_pw_8pydecode_10potentials_8_Viterbi_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_8_Viterbi_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__Viterbi = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._Viterbi"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__Viterbi), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__Viterbi, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__Viterbi, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__Viterbi, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__Viterbi, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__Viterbi, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_LogViterbiPotentials __pyx_vtable_8pydecode_10potentials_LogViterbiPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_LogViterbiPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_LogViterbiPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_LogViterbiPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_LogViterbiPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20LogViterbiPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_LogViterbiPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_20LogViterbiPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogViterbiPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_LogViterbiPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogViterbiPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20LogViterbiPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_LogViterbiPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.LogViterbiPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogViterbiPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogViterbiPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_LogViterbiPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_LogViterbiPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_LogViterbiPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_LogViterbiPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_LogViterbiPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_LogViterbiChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_15LogViterbiChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_LogViterbiChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_LogViterbiChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *p = (struct __pyx_obj_8pydecode_10potentials_LogViterbiChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_LogViterbiChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_LogViterbiChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogViterbiChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_LogViterbiChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogViterbiChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_15LogViterbiChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_LogViterbiChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.LogViterbiChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_LogViterbiChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_LogViterbiChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogViterbiChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogViterbiChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("LogViterbiChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_LogViterbiChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_LogViterbiChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_LogViterbiChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_15LogViterbiChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_LogViterbiChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbi __pyx_vtable_8pydecode_10potentials__LogViterbi;

static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbi(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbi *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__LogViterbi *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__LogViterbi;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__LogViterbi(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_11_LogViterbi_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_11_LogViterbi_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__LogViterbi[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_11_LogViterbi_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_11_LogViterbi_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__LogViterbi[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_11_LogViterbi_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__LogViterbi = {
  __pyx_pw_8pydecode_10potentials_11_LogViterbi_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_11_LogViterbi_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__LogViterbi = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._LogViterbi"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__LogViterbi), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__LogViterbi, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__LogViterbi, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__LogViterbi, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__LogViterbi, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__LogViterbi, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_InsidePotentials __pyx_vtable_8pydecode_10potentials_InsidePotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_InsidePotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_InsidePotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_16InsidePotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_InsidePotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16InsidePotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_InsidePotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_InsidePotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_InsidePotentials *p = (struct __pyx_obj_8pydecode_10potentials_InsidePotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_InsidePotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16InsidePotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16InsidePotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16InsidePotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16InsidePotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_InsidePotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16InsidePotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16InsidePotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_InsidePotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_16InsidePotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_16InsidePotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_InsidePotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_InsidePotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InsidePotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16InsidePotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_InsidePotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.InsidePotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_InsidePotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_InsidePotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_InsidePotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InsidePotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_InsidePotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_InsidePotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_InsidePotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_InsidePotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_InsidePotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_InsideChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_InsideChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_InsideChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_11InsideChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_InsideChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_InsideChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_InsideChart *p = (struct __pyx_obj_8pydecode_10potentials_InsideChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_InsideChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_InsideChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_InsideChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_InsideChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_InsideChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_11InsideChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_InsideChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.InsideChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_InsideChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_InsideChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_InsideChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_InsideChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("InsideChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_InsideChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_InsideChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_InsideChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_11InsideChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_InsideChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Inside __pyx_vtable_8pydecode_10potentials__Inside;

static PyObject *__pyx_tp_new_8pydecode_10potentials__Inside(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__Inside *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__Inside *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__Inside;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__Inside(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_7_Inside_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_7_Inside_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__Inside[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_7_Inside_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_7_Inside_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__Inside[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_7_Inside_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__Inside = {
  __pyx_pw_8pydecode_10potentials_7_Inside_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_7_Inside_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__Inside = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._Inside"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__Inside), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__Inside, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__Inside, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__Inside, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__Inside, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__Inside, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_BoolPotentials __pyx_vtable_8pydecode_10potentials_BoolPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_BoolPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_14BoolPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BoolPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_14BoolPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BoolPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BoolPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BoolPotentials *p = (struct __pyx_obj_8pydecode_10potentials_BoolPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BoolPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_14BoolPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_14BoolPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_14BoolPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_14BoolPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BoolPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14BoolPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14BoolPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_BoolPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_14BoolPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_14BoolPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BoolPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BoolPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BoolPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_14BoolPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BoolPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BoolPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BoolPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BoolPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BoolPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BoolPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BoolPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BoolPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BoolPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_BoolPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BoolPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_BoolChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_BoolChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_BoolChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_9BoolChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_BoolChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_BoolChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_BoolChart *p = (struct __pyx_obj_8pydecode_10potentials_BoolChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_BoolChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_BoolChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BoolChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_BoolChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BoolChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_9BoolChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_BoolChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.BoolChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_BoolChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_BoolChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BoolChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BoolChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("BoolChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_BoolChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_BoolChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_BoolChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_9BoolChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_BoolChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Bool __pyx_vtable_8pydecode_10potentials__Bool;

static PyObject *__pyx_tp_new_8pydecode_10potentials__Bool(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__Bool *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__Bool *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__Bool;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__Bool(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_5_Bool_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_5_Bool_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__Bool[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_5_Bool_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_5_Bool_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__Bool[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_5_Bool_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__Bool = {
  __pyx_pw_8pydecode_10potentials_5_Bool_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_5_Bool_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__Bool = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._Bool"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__Bool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__Bool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__Bool, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__Bool, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__Bool, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__Bool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_SparseVectorPotentials __pyx_vtable_8pydecode_10potentials_SparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_SparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_SparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_SparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_SparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_22SparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_SparseVectorPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_22SparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_SparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_22SparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_SparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.SparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_SparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_SparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_SparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_SparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_SparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_SparseVectorChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17SparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_SparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_SparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_SparseVectorChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_SparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_SparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_SparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17SparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_SparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.SparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_SparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_SparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("SparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_SparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_SparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_SparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_17SparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_SparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVector __pyx_vtable_8pydecode_10potentials__SparseVector;

static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__SparseVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__SparseVector *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__SparseVector;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__SparseVector(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__SparseVector *p = (struct __pyx_obj_8pydecode_10potentials__SparseVector *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  p->thisval.std::vector<std::pair<int,int> >::~vector();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_13_SparseVector_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_13_SparseVector_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__SparseVector[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_13_SparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_13_SparseVector_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__SparseVector[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_13_SparseVector_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__SparseVector = {
  __pyx_pw_8pydecode_10potentials_13_SparseVector_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_13_SparseVector_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__SparseVector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._SparseVector"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__SparseVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__SparseVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__SparseVector, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__SparseVector, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__SparseVector, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__SparseVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MinSparseVectorPotentials __pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinSparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinSparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MinSparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MinSparseVectorPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_25MinSparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinSparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinSparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinSparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25MinSparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinSparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinSparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinSparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinSparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinSparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MinSparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MinSparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MinSparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MinSparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MinSparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MinSparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MinSparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MinSparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MinSparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MinSparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MinSparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MinSparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MinSparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MinSparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20MinSparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MinSparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVector __pyx_vtable_8pydecode_10potentials__MinSparseVector;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MinSparseVector;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVector(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVector *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVector *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  p->thisval.std::vector<std::pair<int,int> >::~vector();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16_MinSparseVector_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16_MinSparseVector_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MinSparseVector[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MinSparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MinSparseVector_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__MinSparseVector[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_16_MinSparseVector_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__MinSparseVector = {
  __pyx_pw_8pydecode_10potentials_16_MinSparseVector_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_16_MinSparseVector_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MinSparseVector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MinSparseVector"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MinSparseVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__MinSparseVector, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MinSparseVector, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__MinSparseVector, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MinSparseVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_MaxSparseVectorPotentials __pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MaxSparseVectorPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MaxSparseVectorPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_25MaxSparseVectorPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_MaxSparseVectorPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_25MaxSparseVectorPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MaxSparseVectorPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MaxSparseVectorPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MaxSparseVectorPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25MaxSparseVectorPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MaxSparseVectorPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MaxSparseVectorPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MaxSparseVectorPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MaxSparseVectorPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *p = (struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_MaxSparseVectorChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_MaxSparseVectorChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MaxSparseVectorChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_MaxSparseVectorChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MaxSparseVectorChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_MaxSparseVectorChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.MaxSparseVectorChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_MaxSparseVectorChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MaxSparseVectorChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MaxSparseVectorChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("MaxSparseVectorChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_MaxSparseVectorChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_MaxSparseVectorChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_MaxSparseVectorChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20MaxSparseVectorChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_MaxSparseVectorChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVector __pyx_vtable_8pydecode_10potentials__MaxSparseVector;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MaxSparseVector;
  new((void*)&(p->thisval)) std::vector<std::pair<int,int> >();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVector(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  p->thisval.std::vector<std::pair<int,int> >::~vector();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_16_MaxSparseVector_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MaxSparseVector[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_MaxSparseVector_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_MaxSparseVector_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__MaxSparseVector[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_16_MaxSparseVector_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__MaxSparseVector = {
  __pyx_pw_8pydecode_10potentials_16_MaxSparseVector_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_16_MaxSparseVector_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MaxSparseVector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MaxSparseVector"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__MaxSparseVector, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MaxSparseVector, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__MaxSparseVector, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MaxSparseVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials_CountingPotentials __pyx_vtable_8pydecode_10potentials_CountingPotentials;

static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingPotentials(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials_CountingPotentials;
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  p->kind = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10potentials_18CountingPotentials_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_CountingPotentials(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_18CountingPotentials_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->hypergraph);
  Py_CLEAR(p->projection);
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_CountingPotentials(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  if (p->projection) {
    e = (*v)(((PyObject*)p->projection), a); if (e) return e;
  }
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_CountingPotentials(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_CountingPotentials *p = (struct __pyx_obj_8pydecode_10potentials_CountingPotentials *)o;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->projection);
  p->projection = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_CountingPotentials(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10potentials_18CountingPotentials_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_18CountingPotentials_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_18CountingPotentials_bias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_18CountingPotentials_4bias_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_CountingPotentials[] = {
  {__Pyx_NAMESTR("times"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_5times, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_4times)},
  {__Pyx_NAMESTR("clone"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_7clone, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_6clone)},
  {__Pyx_NAMESTR("project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_9project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_8project)},
  {__Pyx_NAMESTR("up_project"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_11up_project, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_10up_project)},
  {__Pyx_NAMESTR("show"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_13show, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_12show)},
  {__Pyx_NAMESTR("from_potentials"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_15from_potentials, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_14from_potentials)},
  {__Pyx_NAMESTR("from_vector"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_17from_vector, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_16from_vector)},
  {__Pyx_NAMESTR("from_map"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_19from_map, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_18from_map)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18CountingPotentials_23dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18CountingPotentials_22dot)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials_CountingPotentials[] = {
  {(char *)"kind", __pyx_getprop_8pydecode_10potentials_18CountingPotentials_kind, 0, 0, 0},
  {(char *)"bias", __pyx_getprop_8pydecode_10potentials_18CountingPotentials_bias, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CountingPotentials = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_CountingPotentials, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CountingPotentials = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_18CountingPotentials_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_CountingPotentials = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.CountingPotentials"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_CountingPotentials), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_CountingPotentials, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CountingPotentials, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CountingPotentials, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Potential vector :math:`\\theta \\in R^{|{\\cal E}|}` associated\n    with a hypergraph.\n\n    Acts as a dictionary::\n       >> print potentials[edge]\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_CountingPotentials, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_CountingPotentials, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_CountingPotentials, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials_CountingPotentials, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_CountingPotentials, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_10potentials_CountingChart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials_CountingChart *)o);
  p->kind = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials_CountingChart(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_13CountingChart_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->kind);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials_CountingChart(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  if (p->kind) {
    e = (*v)(p->kind, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials_CountingChart(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials_CountingChart *p = (struct __pyx_obj_8pydecode_10potentials_CountingChart *)o;
  tmp = ((PyObject*)p->kind);
  p->kind = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials_CountingChart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials_CountingChart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_CountingChart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials_CountingChart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CountingChart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_13CountingChart_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials_CountingChart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials.CountingChart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials_CountingChart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials_CountingChart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_CountingChart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CountingChart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("CountingChart(Hypergraph graph=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials_CountingChart, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials_CountingChart, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials_CountingChart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_13CountingChart_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials_CountingChart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__Counting __pyx_vtable_8pydecode_10potentials__Counting;

static PyObject *__pyx_tp_new_8pydecode_10potentials__Counting(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__Counting *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__Counting *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__Counting;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__Counting(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pydecode_10potentials_9_Counting_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10potentials_9_Counting_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__Counting[] = {
  {__Pyx_NAMESTR("from_value"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_1from_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_from_value)},
  {__Pyx_NAMESTR("zero_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_3zero_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_2zero_raw)},
  {__Pyx_NAMESTR("one_raw"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_5one_raw, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_4one_raw)},
  {__Pyx_NAMESTR("zero"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_7zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_6zero)},
  {__Pyx_NAMESTR("one"), (PyCFunction)__pyx_pw_8pydecode_10potentials_9_Counting_9one, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_9_Counting_8one)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10potentials__Counting[] = {
  {(char *)"value", __pyx_getprop_8pydecode_10potentials_9_Counting_value, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number__Counting = {
  __pyx_pw_8pydecode_10potentials_9_Counting_11__add__, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_8pydecode_10potentials_9_Counting_13__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PyTypeObject __pyx_type_8pydecode_10potentials__Counting = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._Counting"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__Counting), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__Counting, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number__Counting, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__Counting, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10potentials__Counting, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__Counting, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__ViterbiMarginals __pyx_vtable_8pydecode_10potentials__ViterbiMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__ViterbiMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__ViterbiMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__ViterbiMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__ViterbiMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__ViterbiMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__ViterbiMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_17_ViterbiMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__ViterbiMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__ViterbiMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__ViterbiMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__ViterbiMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._ViterbiMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__ViterbiMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__ViterbiMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__ViterbiMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_ViterbiMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__ViterbiMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__ViterbiMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__ViterbiMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_17_ViterbiMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__ViterbiMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__LogViterbiMarginals __pyx_vtable_8pydecode_10potentials__LogViterbiMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__LogViterbiMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__LogViterbiMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__LogViterbiMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *p = (struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__LogViterbiMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__LogViterbiMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_20_LogViterbiMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LogViterbiMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__LogViterbiMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LogViterbiMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__LogViterbiMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._LogViterbiMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__LogViterbiMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LogViterbiMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LogViterbiMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LogViterbiMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__LogViterbiMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__LogViterbiMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__LogViterbiMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_20_LogViterbiMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__LogViterbiMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__InsideMarginals __pyx_vtable_8pydecode_10potentials__InsideMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__InsideMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__InsideMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__InsideMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_16_InsideMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__InsideMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__InsideMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__InsideMarginals *p = (struct __pyx_obj_8pydecode_10potentials__InsideMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__InsideMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__InsideMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_16_InsideMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_16_InsideMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__InsideMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__InsideMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__InsideMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_16_InsideMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__InsideMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._InsideMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__InsideMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__InsideMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__InsideMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__InsideMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_InsideMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__InsideMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__InsideMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__InsideMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_16_InsideMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__InsideMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__BoolMarginals __pyx_vtable_8pydecode_10potentials__BoolMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__BoolMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__BoolMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__BoolMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_14_BoolMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__BoolMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__BoolMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__BoolMarginals *p = (struct __pyx_obj_8pydecode_10potentials__BoolMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__BoolMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__BoolMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_14_BoolMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_14_BoolMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__BoolMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__BoolMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__BoolMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_14_BoolMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__BoolMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._BoolMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__BoolMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__BoolMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__BoolMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__BoolMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_BoolMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__BoolMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__BoolMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__BoolMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_14_BoolMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__BoolMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__SparseVectorMarginals __pyx_vtable_8pydecode_10potentials__SparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__SparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__SparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__SparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__SparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__SparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__SparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__SparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__SparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__SparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._SparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__SparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__SparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__SparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_SparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__SparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__SparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__SparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_22_SparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__SparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MinSparseVectorMarginals __pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__MinSparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MinSparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__MinSparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__MinSparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__MinSparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MinSparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MinSparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__MinSparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__MinSparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_MinSparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_25_MinSparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MinSparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__MaxSparseVectorMarginals __pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *p = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__MaxSparseVectorMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__MaxSparseVectorMarginals[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__MaxSparseVectorMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__MaxSparseVectorMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__MaxSparseVectorMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._MaxSparseVectorMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__MaxSparseVectorMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__MaxSparseVectorMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_MaxSparseVectorMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_25_MaxSparseVectorMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__MaxSparseVectorMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10potentials__CountingMarginals __pyx_vtable_8pydecode_10potentials__CountingMarginals;

static PyObject *__pyx_tp_new_8pydecode_10potentials__CountingMarginals(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10potentials__CountingMarginals;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10potentials__CountingMarginals(PyObject *o) {
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10potentials_18_CountingMarginals_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10potentials__CountingMarginals(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10potentials__CountingMarginals(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pydecode_10potentials__CountingMarginals *p = (struct __pyx_obj_8pydecode_10potentials__CountingMarginals *)o;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10potentials__CountingMarginals(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10potentials__CountingMarginals[] = {
  {__Pyx_NAMESTR("threshold"), (PyCFunction)__pyx_pw_8pydecode_10potentials_18_CountingMarginals_7threshold, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10potentials_18_CountingMarginals_6threshold)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__CountingMarginals = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10potentials__CountingMarginals, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__CountingMarginals = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10potentials_18_CountingMarginals_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10potentials__CountingMarginals = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.potentials._CountingMarginals"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10potentials__CountingMarginals), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10potentials__CountingMarginals, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__CountingMarginals, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__CountingMarginals, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_CountingMarginals()"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10potentials__CountingMarginals, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10potentials__CountingMarginals, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10potentials__CountingMarginals, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10potentials_18_CountingMarginals_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10potentials__CountingMarginals, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("potentials"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_20s_s, __pyx_k_20s_s, sizeof(__pyx_k_20s_s), 0, 0, 1, 0},
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_compute_marginals, __pyx_k_Bool_compute_marginals, sizeof(__pyx_k_Bool_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_inside, __pyx_k_Bool_inside, sizeof(__pyx_k_Bool_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_outside, __pyx_k_Bool_outside, sizeof(__pyx_k_Bool_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_prune_hypergraph, __pyx_k_Bool_prune_hypergraph, sizeof(__pyx_k_Bool_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Bool_viterbi, __pyx_k_Bool_viterbi, sizeof(__pyx_k_Bool_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_Chart, __pyx_k_Chart, sizeof(__pyx_k_Chart), 0, 0, 1, 1},
  {&__pyx_kp_s_Chart_math_S_cal_V_associated_w, __pyx_k_Chart_math_S_cal_V_associated_w, sizeof(__pyx_k_Chart_math_S_cal_V_associated_w), 0, 0, 1, 0},
  {&__pyx_n_s_Counting, __pyx_k_Counting, sizeof(__pyx_k_Counting), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_compute_marginals, __pyx_k_Counting_compute_marginals, sizeof(__pyx_k_Counting_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_inside, __pyx_k_Counting_inside, sizeof(__pyx_k_Counting_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_outside, __pyx_k_Counting_outside, sizeof(__pyx_k_Counting_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_prune_hypergraph, __pyx_k_Counting_prune_hypergraph, sizeof(__pyx_k_Counting_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Counting_viterbi, __pyx_k_Counting_viterbi, sizeof(__pyx_k_Counting_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_HypergraphAccessException, __pyx_k_HypergraphAccessException, sizeof(__pyx_k_HypergraphAccessException), 0, 0, 1, 1},
  {&__pyx_n_s_Inside, __pyx_k_Inside, sizeof(__pyx_k_Inside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_compute_marginals, __pyx_k_Inside_compute_marginals, sizeof(__pyx_k_Inside_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_inside, __pyx_k_Inside_inside, sizeof(__pyx_k_Inside_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_outside, __pyx_k_Inside_outside, sizeof(__pyx_k_Inside_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_prune_hypergraph, __pyx_k_Inside_prune_hypergraph, sizeof(__pyx_k_Inside_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Inside_viterbi, __pyx_k_Inside_viterbi, sizeof(__pyx_k_Inside_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi, __pyx_k_LogViterbi, sizeof(__pyx_k_LogViterbi), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_compute_marginals, __pyx_k_LogViterbi_compute_marginals, sizeof(__pyx_k_LogViterbi_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_inside, __pyx_k_LogViterbi_inside, sizeof(__pyx_k_LogViterbi_inside), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_outside, __pyx_k_LogViterbi_outside, sizeof(__pyx_k_LogViterbi_outside), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_prune_hypergraph, __pyx_k_LogViterbi_prune_hypergraph, sizeof(__pyx_k_LogViterbi_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_LogViterbi_viterbi, __pyx_k_LogViterbi_viterbi, sizeof(__pyx_k_LogViterbi_viterbi), 0, 0, 1, 1},
  {&__pyx_kp_s_Marginal_values_math_S_cal_E_ti, __pyx_k_Marginal_values_math_S_cal_E_ti, sizeof(__pyx_k_Marginal_values_math_S_cal_E_ti), 0, 0, 1, 0},
  {&__pyx_n_s_Marginals, __pyx_k_Marginals, sizeof(__pyx_k_Marginals), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector, __pyx_k_MaxSparseVector, sizeof(__pyx_k_MaxSparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_compute_marginal, __pyx_k_MaxSparseVector_compute_marginal, sizeof(__pyx_k_MaxSparseVector_compute_marginal), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_inside, __pyx_k_MaxSparseVector_inside, sizeof(__pyx_k_MaxSparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_outside, __pyx_k_MaxSparseVector_outside, sizeof(__pyx_k_MaxSparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_MaxSparseVector_prune_hypergraph, __pyx_k_MaxSparseVector_prune_hypergraph, sizeof(__pyx_k_MaxSparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector, __pyx_k_MinSparseVector, sizeof(__pyx_k_MinSparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_compute_marginal, __pyx_k_MinSparseVector_compute_marginal, sizeof(__pyx_k_MinSparseVector_compute_marginal), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_inside, __pyx_k_MinSparseVector_inside, sizeof(__pyx_k_MinSparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_outside, __pyx_k_MinSparseVector_outside, sizeof(__pyx_k_MinSparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_MinSparseVector_prune_hypergraph, __pyx_k_MinSparseVector_prune_hypergraph, sizeof(__pyx_k_MinSparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Bool_m, __pyx_k_Only_nodes_and_edges_have_Bool_m, sizeof(__pyx_k_Only_nodes_and_edges_have_Bool_m), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Counti, __pyx_k_Only_nodes_and_edges_have_Counti, sizeof(__pyx_k_Only_nodes_and_edges_have_Counti), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Inside, __pyx_k_Only_nodes_and_edges_have_Inside, sizeof(__pyx_k_Only_nodes_and_edges_have_Inside), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_LogVit, __pyx_k_Only_nodes_and_edges_have_LogVit, sizeof(__pyx_k_Only_nodes_and_edges_have_LogVit), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_MaxSpa, __pyx_k_Only_nodes_and_edges_have_MaxSpa, sizeof(__pyx_k_Only_nodes_and_edges_have_MaxSpa), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_MinSpa, __pyx_k_Only_nodes_and_edges_have_MinSpa, sizeof(__pyx_k_Only_nodes_and_edges_have_MinSpa), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Sparse, __pyx_k_Only_nodes_and_edges_have_Sparse, sizeof(__pyx_k_Only_nodes_and_edges_have_Sparse), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_nodes_and_edges_have_Viterb, __pyx_k_Only_nodes_and_edges_have_Viterb, sizeof(__pyx_k_Only_nodes_and_edges_have_Viterb), 0, 0, 1, 0},
  {&__pyx_kp_s_Passed_s, __pyx_k_Passed_s, sizeof(__pyx_k_Passed_s), 0, 0, 1, 0},
  {&__pyx_n_s_Potentials, __pyx_k_Potentials, sizeof(__pyx_k_Potentials), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector, __pyx_k_SparseVector, sizeof(__pyx_k_SparseVector), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_compute_marginals, __pyx_k_SparseVector_compute_marginals, sizeof(__pyx_k_SparseVector_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_inside, __pyx_k_SparseVector_inside, sizeof(__pyx_k_SparseVector_inside), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_outside, __pyx_k_SparseVector_outside, sizeof(__pyx_k_SparseVector_outside), 0, 0, 1, 1},
  {&__pyx_n_s_SparseVector_prune_hypergraph, __pyx_k_SparseVector_prune_hypergraph, sizeof(__pyx_k_SparseVector_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi, __pyx_k_Viterbi, sizeof(__pyx_k_Viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_compute_marginals, __pyx_k_Viterbi_compute_marginals, sizeof(__pyx_k_Viterbi_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_inside, __pyx_k_Viterbi_inside, sizeof(__pyx_k_Viterbi_inside), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_outside, __pyx_k_Viterbi_outside, sizeof(__pyx_k_Viterbi_outside), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_prune_hypergraph, __pyx_k_Viterbi_prune_hypergraph, sizeof(__pyx_k_Viterbi_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_Viterbi_viterbi, __pyx_k_Viterbi_viterbi, sizeof(__pyx_k_Viterbi_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_best_path, __pyx_k_best_path, sizeof(__pyx_k_best_path), 0, 0, 1, 1},
  {&__pyx_n_s_bias, __pyx_k_bias, sizeof(__pyx_k_bias), 0, 0, 1, 1},
  {&__pyx_n_s_binarize, __pyx_k_binarize, sizeof(__pyx_k_binarize), 0, 0, 1, 1},
  {&__pyx_n_s_bool_potentials, __pyx_k_bool_potentials, sizeof(__pyx_k_bool_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_bp, __pyx_k_bp, sizeof(__pyx_k_bp), 0, 0, 1, 1},
  {&__pyx_n_s_chart, __pyx_k_chart, sizeof(__pyx_k_chart), 0, 0, 1, 1},
  {&__pyx_n_s_compute_marginals, __pyx_k_compute_marginals, sizeof(__pyx_k_compute_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_created, __pyx_k_created, sizeof(__pyx_k_created), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_extend_hypergraph_by_count, __pyx_k_extend_hypergraph_by_count, sizeof(__pyx_k_extend_hypergraph_by_count), 0, 0, 1, 1},
  {&__pyx_n_s_filt, __pyx_k_filt, sizeof(__pyx_k_filt), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_from_value, __pyx_k_from_value, sizeof(__pyx_k_from_value), 0, 0, 1, 1},
  {&__pyx_n_s_goal, __pyx_k_goal, sizeof(__pyx_k_goal), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_kp_s_home_srush_Projects_decoding_py, __pyx_k_home_srush_Projects_decoding_py, sizeof(__pyx_k_home_srush_Projects_decoding_py), 0, 0, 1, 0},
  {&__pyx_n_s_hypergraph, __pyx_k_hypergraph, sizeof(__pyx_k_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_hypergraph_map, __pyx_k_hypergraph_map, sizeof(__pyx_k_hypergraph_map), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_map, __pyx_k_in_map, sizeof(__pyx_k_in_map), 0, 0, 1, 1},
  {&__pyx_n_s_in_vec, __pyx_k_in_vec, sizeof(__pyx_k_in_vec), 0, 0, 1, 1},
  {&__pyx_n_s_inside, __pyx_k_inside, sizeof(__pyx_k_inside), 0, 0, 1, 1},
  {&__pyx_n_s_inside_chart, __pyx_k_inside_chart, sizeof(__pyx_k_inside_chart), 0, 0, 1, 1},
  {&__pyx_n_s_inside_values, __pyx_k_inside_values, sizeof(__pyx_k_inside_values), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lower_limit, __pyx_k_lower_limit, sizeof(__pyx_k_lower_limit), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_pruning_projections, __pyx_k_make_pruning_projections, sizeof(__pyx_k_make_pruning_projections), 0, 0, 1, 1},
  {&__pyx_n_s_marginals, __pyx_k_marginals, sizeof(__pyx_k_marginals), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_one, __pyx_k_one, sizeof(__pyx_k_one), 0, 0, 1, 1},
  {&__pyx_n_s_one_raw, __pyx_k_one_raw, sizeof(__pyx_k_one_raw), 0, 0, 1, 1},
  {&__pyx_n_s_out_chart, __pyx_k_out_chart, sizeof(__pyx_k_out_chart), 0, 0, 1, 1},
  {&__pyx_n_s_outside, __pyx_k_outside, sizeof(__pyx_k_outside), 0, 0, 1, 1},
  {&__pyx_n_s_outside_values, __pyx_k_outside_values, sizeof(__pyx_k_outside_values), 0, 0, 1, 1},
  {&__pyx_n_s_pairwise_dot, __pyx_k_pairwise_dot, sizeof(__pyx_k_pairwise_dot), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_potentials, __pyx_k_potentials, sizeof(__pyx_k_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_project, __pyx_k_project, sizeof(__pyx_k_project), 0, 0, 1, 1},
  {&__pyx_n_s_projection, __pyx_k_projection, sizeof(__pyx_k_projection), 0, 0, 1, 1},
  {&__pyx_n_s_prune_hypergraph, __pyx_k_prune_hypergraph, sizeof(__pyx_k_prune_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_py_hypergraph, __pyx_k_py_hypergraph, sizeof(__pyx_k_py_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s_pydecode_potentials, __pyx_k_pydecode_potentials, sizeof(__pyx_k_pydecode_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rvec, __pyx_k_rvec, sizeof(__pyx_k_rvec), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thres, __pyx_k_thres, sizeof(__pyx_k_thres), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_upper_limit, __pyx_k_upper_limit, sizeof(__pyx_k_upper_limit), 0, 0, 1, 1},
  {&__pyx_n_s_used_back, __pyx_k_used_back, sizeof(__pyx_k_used_back), 0, 0, 1, 1},
  {&__pyx_n_s_used_chart, __pyx_k_used_chart, sizeof(__pyx_k_used_chart), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_vec, __pyx_k_vec, sizeof(__pyx_k_vec), 0, 0, 1, 1},
  {&__pyx_n_s_viterbi, __pyx_k_viterbi, sizeof(__pyx_k_viterbi), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_zero, __pyx_k_zero, sizeof(__pyx_k_zero), 0, 0, 1, 1},
  {&__pyx_n_s_zero_raw, __pyx_k_zero_raw, sizeof(__pyx_k_zero_raw), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pydecode/potentials.pyx":184
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":190
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":194
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":198
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_zero())
 * 
 */
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":202
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_one())
 * 
 */
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 202, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":284
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":292
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */
  __pyx_tuple__10 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 292, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":304
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */
  __pyx_tuple__12 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 304, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__14 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pydecode/potentials.pyx":326
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":333
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__17 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":503
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 503, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":509
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 509, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":513
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 513, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":517
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 517, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":521
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 521, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":603
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */
  __pyx_tuple__25 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 603, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":611
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */
  __pyx_tuple__27 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":623
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */
  __pyx_tuple__29 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 623, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__31 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pydecode/potentials.pyx":645
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */
  __pyx_tuple__32 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 645, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":652
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__34 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 652, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":822
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 822, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":828
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":832
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 832, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":836
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_zero())
 * 
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 836, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":840
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_one())
 * 
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 840, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":922
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */
  __pyx_tuple__42 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 922, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":930
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 930, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":942
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */
  __pyx_tuple__46 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 942, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__48 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */
  __pyx_tuple__49 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 964, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":971
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__51 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 971, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1141
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 1141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1147
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 1147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1151
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 1151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1155
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_zero())
 * 
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 1155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1159
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_one())
 * 
 */
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 1159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1241
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */
  __pyx_tuple__59 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1241, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1249
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */
  __pyx_tuple__61 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1261
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */
  __pyx_tuple__63 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 1261, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__65 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "pydecode/potentials.pyx":1283
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */
  __pyx_tuple__66 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1290
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1460
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 1460, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1466
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 1466, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1470
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 1470, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1474
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_zero())
 * 
 */
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 1474, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1478
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_one())
 * 
 */
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 1478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1552
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */
  __pyx_tuple__76 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1552, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1560
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */
  __pyx_tuple__78 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1560, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1572
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__80 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1572, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1579
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__82 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1579, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1749
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 1749, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1755
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 1755, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1759
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 1759, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1763
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 1763, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1767
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 1767, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1841
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */
  __pyx_tuple__90 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 1841, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1849
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */
  __pyx_tuple__92 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 1849, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1861
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__94 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 1861, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1868
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__96 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 1868, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2038, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2044
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2048
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2052
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2052, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2056
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2056, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2130
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2138
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */
  __pyx_tuple__106 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2138, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2150
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */
  __pyx_tuple__108 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2150, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2157
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__110 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2327
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_s_val, __pyx_n_s_created); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_from_value, 2327, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2333
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero_raw, 2333, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2337
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one_raw, 2337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2341
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_zero())
 * 
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_zero, 2341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2345
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_one())
 * 
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_one, 2345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2427
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */
  __pyx_tuple__118 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2427, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2435
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */
  __pyx_tuple__120 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart, __pyx_n_s_out_chart); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2435, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2447
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */
  __pyx_tuple__122 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_used_chart, __pyx_n_s_used_back, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_viterbi, 2447, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_tuple__124 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "pydecode/potentials.pyx":2469
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */
  __pyx_tuple__125 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_marginals); if (unlikely(!__pyx_tuple__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2469, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2476
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */
  __pyx_tuple__127 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_threshold, __pyx_n_s_marginals, __pyx_n_s_bool_potentials); if (unlikely(!__pyx_tuple__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2476, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2528
 * 
 * 
 * def inside(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     inside(Hypergraph graph, Potentials potentials):
 */
  __pyx_tuple__129 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_potentials); if (unlikely(!__pyx_tuple__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_inside, 2528, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2554
 * 
 * 
 * def outside(Hypergraph graph, potentials, inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     outside(Hypergraph graph, Potentials potentials, Chart inside_chart)
 */
  __pyx_tuple__131 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_inside_chart); if (unlikely(!__pyx_tuple__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_outside, 2554, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2585
 * 
 * 
 * def best_path(Hypergraph graph, potentials, chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     best_path(Hypergraph graph, Potentials potentials):
 */
  __pyx_tuple__133 = PyTuple_Pack(4, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_chart, __pyx_n_s_bp); if (unlikely(!__pyx_tuple__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__134 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_best_path, 2585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2611
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     prune_hypergraph(Hypergraph graph, potentials, thres)
 */
  __pyx_tuple__135 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_thres); if (unlikely(!__pyx_tuple__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__135, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_prune_hypergraph, 2611, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2634
 * 
 * 
 * def compute_marginals(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     compute_marginals(Hypergraph graph, Potentials potentials):
 */
  __pyx_tuple__137 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_potentials); if (unlikely(!__pyx_tuple__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_compute_marginals, 2634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2682
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */
  __pyx_tuple__139 = PyTuple_Pack(3, __pyx_n_s_graph, __pyx_n_s_filt, __pyx_n_s_projection); if (unlikely(!__pyx_tuple__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_make_pruning_projections, 2682, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2694
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Prune a graph based on a set of boolean potentials.
 */
  __pyx_tuple__141 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_filter); if (unlikely(!__pyx_tuple__141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_project, 2694, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2716
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */
  __pyx_tuple__143 = PyTuple_Pack(2, __pyx_n_s_graph, __pyx_n_s_hypergraph_map); if (unlikely(!__pyx_tuple__143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_binarize, 2716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2733
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */
  __pyx_tuple__145 = PyTuple_Pack(5, __pyx_n_s_potentials, __pyx_n_s_vec, __pyx_n_s_weights, __pyx_n_s_rvec, __pyx_n_s_i); if (unlikely(!__pyx_tuple__145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_pairwise_dot, 2733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2758
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */
  __pyx_tuple__147 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_potentials, __pyx_n_s_lower_limit, __pyx_n_s_upper_limit, __pyx_n_s_goal, __pyx_n_s_projection); if (unlikely(!__pyx_tuple__147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_srush_Projects_decoding_py, __pyx_n_s_extend_hypergraph_by_count, 2758, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpotentials(void); /*proto*/
PyMODINIT_FUNC initpotentials(void)
#else
PyMODINIT_FUNC PyInit_potentials(void); /*proto*/
PyMODINIT_FUNC PyInit_potentials(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_potentials(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("potentials"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pydecode__potentials) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pydecode.potentials")) {
      if (unlikely(PyDict_SetItemString(modules, "pydecode.potentials", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8pydecode_10potentials_BackPointers = &__pyx_vtable_8pydecode_10potentials_BackPointers;
  __pyx_vtable_8pydecode_10potentials_BackPointers.init = (struct __pyx_obj_8pydecode_10potentials_BackPointers *(*)(struct __pyx_obj_8pydecode_10potentials_BackPointers *, BackPointers const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_12BackPointers_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BackPointers.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_BackPointers.tp_dict, __pyx_vtabptr_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BackPointers", (PyObject *)&__pyx_type_8pydecode_10potentials_BackPointers) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BackPointers = &__pyx_type_8pydecode_10potentials_BackPointers;
  __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials = &__pyx_vtable_8pydecode_10potentials_ViterbiPotentials;
  __pyx_vtable_8pydecode_10potentials_ViterbiPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_ViterbiPotentials *, HypergraphPotentials<ViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_17ViterbiPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_ViterbiPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_ViterbiPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ViterbiPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_ViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiPotentials = &__pyx_type_8pydecode_10potentials_ViterbiPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_ViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_ViterbiChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "ViterbiChart", (PyObject *)&__pyx_type_8pydecode_10potentials_ViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_ViterbiChart = &__pyx_type_8pydecode_10potentials_ViterbiChart;
  __pyx_vtabptr_8pydecode_10potentials__Viterbi = &__pyx_vtable_8pydecode_10potentials__Viterbi;
  __pyx_vtable_8pydecode_10potentials__Viterbi.init = (struct __pyx_obj_8pydecode_10potentials__Viterbi *(*)(struct __pyx_obj_8pydecode_10potentials__Viterbi *, double))__pyx_f_8pydecode_10potentials_8_Viterbi_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__Viterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__Viterbi.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__Viterbi.tp_dict, __pyx_vtabptr_8pydecode_10potentials__Viterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_Viterbi", (PyObject *)&__pyx_type_8pydecode_10potentials__Viterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__Viterbi = &__pyx_type_8pydecode_10potentials__Viterbi;
  __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials = &__pyx_vtable_8pydecode_10potentials_LogViterbiPotentials;
  __pyx_vtable_8pydecode_10potentials_LogViterbiPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_LogViterbiPotentials *, HypergraphPotentials<LogViterbiPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_20LogViterbiPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_LogViterbiPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_LogViterbiPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "LogViterbiPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_LogViterbiPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiPotentials = &__pyx_type_8pydecode_10potentials_LogViterbiPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_LogViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_LogViterbiChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "LogViterbiChart", (PyObject *)&__pyx_type_8pydecode_10potentials_LogViterbiChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_LogViterbiChart = &__pyx_type_8pydecode_10potentials_LogViterbiChart;
  __pyx_vtabptr_8pydecode_10potentials__LogViterbi = &__pyx_vtable_8pydecode_10potentials__LogViterbi;
  __pyx_vtable_8pydecode_10potentials__LogViterbi.init = (struct __pyx_obj_8pydecode_10potentials__LogViterbi *(*)(struct __pyx_obj_8pydecode_10potentials__LogViterbi *, double))__pyx_f_8pydecode_10potentials_11_LogViterbi_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__LogViterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__LogViterbi.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__LogViterbi.tp_dict, __pyx_vtabptr_8pydecode_10potentials__LogViterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LogViterbi", (PyObject *)&__pyx_type_8pydecode_10potentials__LogViterbi) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LogViterbi = &__pyx_type_8pydecode_10potentials__LogViterbi;
  __pyx_vtabptr_8pydecode_10potentials_InsidePotentials = &__pyx_vtable_8pydecode_10potentials_InsidePotentials;
  __pyx_vtable_8pydecode_10potentials_InsidePotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_InsidePotentials *, HypergraphPotentials<InsidePotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_16InsidePotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_InsidePotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_InsidePotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "InsidePotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_InsidePotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsidePotentials = &__pyx_type_8pydecode_10potentials_InsidePotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_InsideChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_InsideChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "InsideChart", (PyObject *)&__pyx_type_8pydecode_10potentials_InsideChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_InsideChart = &__pyx_type_8pydecode_10potentials_InsideChart;
  __pyx_vtabptr_8pydecode_10potentials__Inside = &__pyx_vtable_8pydecode_10potentials__Inside;
  __pyx_vtable_8pydecode_10potentials__Inside.init = (struct __pyx_obj_8pydecode_10potentials__Inside *(*)(struct __pyx_obj_8pydecode_10potentials__Inside *, double))__pyx_f_8pydecode_10potentials_7_Inside_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__Inside) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__Inside.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__Inside.tp_dict, __pyx_vtabptr_8pydecode_10potentials__Inside) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_Inside", (PyObject *)&__pyx_type_8pydecode_10potentials__Inside) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__Inside = &__pyx_type_8pydecode_10potentials__Inside;
  __pyx_vtabptr_8pydecode_10potentials_BoolPotentials = &__pyx_vtable_8pydecode_10potentials_BoolPotentials;
  __pyx_vtable_8pydecode_10potentials_BoolPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_BoolPotentials *, HypergraphPotentials<BoolPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_14BoolPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BoolPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_BoolPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BoolPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_BoolPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 981; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolPotentials = &__pyx_type_8pydecode_10potentials_BoolPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_BoolChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_BoolChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "BoolChart", (PyObject *)&__pyx_type_8pydecode_10potentials_BoolChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_BoolChart = &__pyx_type_8pydecode_10potentials_BoolChart;
  __pyx_vtabptr_8pydecode_10potentials__Bool = &__pyx_vtable_8pydecode_10potentials__Bool;
  __pyx_vtable_8pydecode_10potentials__Bool.init = (struct __pyx_obj_8pydecode_10potentials__Bool *(*)(struct __pyx_obj_8pydecode_10potentials__Bool *, bool))__pyx_f_8pydecode_10potentials_5_Bool_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__Bool) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__Bool.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__Bool.tp_dict, __pyx_vtabptr_8pydecode_10potentials__Bool) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_Bool", (PyObject *)&__pyx_type_8pydecode_10potentials__Bool) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__Bool = &__pyx_type_8pydecode_10potentials__Bool;
  __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_SparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_SparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_SparseVectorPotentials *, HypergraphPotentials<SparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_22SparseVectorPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_SparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_SparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_SparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorPotentials = &__pyx_type_8pydecode_10potentials_SparseVectorPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_SparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_SparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "SparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_SparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_SparseVectorChart = &__pyx_type_8pydecode_10potentials_SparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials__SparseVector = &__pyx_vtable_8pydecode_10potentials__SparseVector;
  __pyx_vtable_8pydecode_10potentials__SparseVector.init = (struct __pyx_obj_8pydecode_10potentials__SparseVector *(*)(struct __pyx_obj_8pydecode_10potentials__SparseVector *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_13_SparseVector_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__SparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__SparseVector.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__SparseVector.tp_dict, __pyx_vtabptr_8pydecode_10potentials__SparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_SparseVector", (PyObject *)&__pyx_type_8pydecode_10potentials__SparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__SparseVector = &__pyx_type_8pydecode_10potentials__SparseVector;
  __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_MinSparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_MinSparseVectorPotentials *, HypergraphPotentials<MinSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_25MinSparseVectorPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinSparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MinSparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials = &__pyx_type_8pydecode_10potentials_MinSparseVectorPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MinSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MinSparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "MinSparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_MinSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MinSparseVectorChart = &__pyx_type_8pydecode_10potentials_MinSparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials__MinSparseVector = &__pyx_vtable_8pydecode_10potentials__MinSparseVector;
  __pyx_vtable_8pydecode_10potentials__MinSparseVector.init = (struct __pyx_obj_8pydecode_10potentials__MinSparseVector *(*)(struct __pyx_obj_8pydecode_10potentials__MinSparseVector *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_16_MinSparseVector_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MinSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MinSparseVector.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MinSparseVector.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MinSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MinSparseVector", (PyObject *)&__pyx_type_8pydecode_10potentials__MinSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MinSparseVector = &__pyx_type_8pydecode_10potentials__MinSparseVector;
  __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials = &__pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials;
  __pyx_vtable_8pydecode_10potentials_MaxSparseVectorPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_MaxSparseVectorPotentials *, HypergraphPotentials<MaxSparseVectorPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_25MaxSparseVectorPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "MaxSparseVectorPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials = &__pyx_type_8pydecode_10potentials_MaxSparseVectorPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_MaxSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_MaxSparseVectorChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "MaxSparseVectorChart", (PyObject *)&__pyx_type_8pydecode_10potentials_MaxSparseVectorChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart = &__pyx_type_8pydecode_10potentials_MaxSparseVectorChart;
  __pyx_vtabptr_8pydecode_10potentials__MaxSparseVector = &__pyx_vtable_8pydecode_10potentials__MaxSparseVector;
  __pyx_vtable_8pydecode_10potentials__MaxSparseVector.init = (struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *(*)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVector *, std::vector<std::pair<int,int> >))__pyx_f_8pydecode_10potentials_16_MaxSparseVector_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MaxSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MaxSparseVector.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MaxSparseVector.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MaxSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MaxSparseVector", (PyObject *)&__pyx_type_8pydecode_10potentials__MaxSparseVector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MaxSparseVector = &__pyx_type_8pydecode_10potentials__MaxSparseVector;
  __pyx_vtabptr_8pydecode_10potentials_CountingPotentials = &__pyx_vtable_8pydecode_10potentials_CountingPotentials;
  __pyx_vtable_8pydecode_10potentials_CountingPotentials.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials_CountingPotentials *, HypergraphPotentials<CountingPotential> *, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *))__pyx_f_8pydecode_10potentials_18CountingPotentials_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_CountingPotentials.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials_CountingPotentials.tp_dict, __pyx_vtabptr_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CountingPotentials", (PyObject *)&__pyx_type_8pydecode_10potentials_CountingPotentials) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingPotentials = &__pyx_type_8pydecode_10potentials_CountingPotentials;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials_CountingChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials_CountingChart.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "CountingChart", (PyObject *)&__pyx_type_8pydecode_10potentials_CountingChart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials_CountingChart = &__pyx_type_8pydecode_10potentials_CountingChart;
  __pyx_vtabptr_8pydecode_10potentials__Counting = &__pyx_vtable_8pydecode_10potentials__Counting;
  __pyx_vtable_8pydecode_10potentials__Counting.init = (struct __pyx_obj_8pydecode_10potentials__Counting *(*)(struct __pyx_obj_8pydecode_10potentials__Counting *, int))__pyx_f_8pydecode_10potentials_9_Counting_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__Counting) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__Counting.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__Counting.tp_dict, __pyx_vtabptr_8pydecode_10potentials__Counting) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_Counting", (PyObject *)&__pyx_type_8pydecode_10potentials__Counting) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__Counting = &__pyx_type_8pydecode_10potentials__Counting;
  __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals = &__pyx_vtable_8pydecode_10potentials__ViterbiMarginals;
  __pyx_vtable_8pydecode_10potentials__ViterbiMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__ViterbiMarginals *, Marginals<ViterbiPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_17_ViterbiMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__ViterbiMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__ViterbiMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_ViterbiMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__ViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__ViterbiMarginals = &__pyx_type_8pydecode_10potentials__ViterbiMarginals;
  __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals = &__pyx_vtable_8pydecode_10potentials__LogViterbiMarginals;
  __pyx_vtable_8pydecode_10potentials__LogViterbiMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__LogViterbiMarginals *, Marginals<LogViterbiPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_20_LogViterbiMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__LogViterbiMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__LogViterbiMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LogViterbiMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__LogViterbiMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__LogViterbiMarginals = &__pyx_type_8pydecode_10potentials__LogViterbiMarginals;
  __pyx_vtabptr_8pydecode_10potentials__InsideMarginals = &__pyx_vtable_8pydecode_10potentials__InsideMarginals;
  __pyx_vtable_8pydecode_10potentials__InsideMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__InsideMarginals *, Marginals<InsidePotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_16_InsideMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__InsideMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__InsideMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_InsideMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__InsideMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__InsideMarginals = &__pyx_type_8pydecode_10potentials__InsideMarginals;
  __pyx_vtabptr_8pydecode_10potentials__BoolMarginals = &__pyx_vtable_8pydecode_10potentials__BoolMarginals;
  __pyx_vtable_8pydecode_10potentials__BoolMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__BoolMarginals *, Marginals<BoolPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_14_BoolMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__BoolMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__BoolMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_BoolMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__BoolMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__BoolMarginals = &__pyx_type_8pydecode_10potentials__BoolMarginals;
  __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__SparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__SparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__SparseVectorMarginals *, Marginals<SparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_22_SparseVectorMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__SparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__SparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_SparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__SparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__SparseVectorMarginals = &__pyx_type_8pydecode_10potentials__SparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__MinSparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__MinSparseVectorMarginals *, Marginals<MinSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_25_MinSparseVectorMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MinSparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MinSparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1804; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals = &__pyx_type_8pydecode_10potentials__MinSparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals = &__pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals;
  __pyx_vtable_8pydecode_10potentials__MaxSparseVectorMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__MaxSparseVectorMarginals *, Marginals<MaxSparseVectorPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_25_MaxSparseVectorMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_MaxSparseVectorMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals = &__pyx_type_8pydecode_10potentials__MaxSparseVectorMarginals;
  __pyx_vtabptr_8pydecode_10potentials__CountingMarginals = &__pyx_vtable_8pydecode_10potentials__CountingMarginals;
  __pyx_vtable_8pydecode_10potentials__CountingMarginals.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10potentials__CountingMarginals *, Marginals<CountingPotential> const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10potentials_18_CountingMarginals_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_8pydecode_10potentials__CountingMarginals.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10potentials__CountingMarginals.tp_dict, __pyx_vtabptr_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_CountingMarginals", (PyObject *)&__pyx_type_8pydecode_10potentials__CountingMarginals) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10potentials__CountingMarginals = &__pyx_type_8pydecode_10potentials__CountingMarginals;
  /*--- Type import code ---*/
  __pyx_ptype_8pydecode_10hypergraph_Labeling = __Pyx_ImportType("pydecode.hypergraph", "Labeling", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Labeling), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Labeling)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyEdges = __Pyx_ImportType("pydecode.hypergraph", "_LazyEdges", sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph__LazyEdges)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph__LazyEdges = (struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph__LazyEdges->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph__LazyEdges)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyNodes = __Pyx_ImportType("pydecode.hypergraph", "_LazyNodes", sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph__LazyNodes)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph__LazyNodes = (struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph__LazyNodes->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph__LazyNodes)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Hypergraph = __Pyx_ImportType("pydecode.hypergraph", "Hypergraph", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Hypergraph)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Hypergraph = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Hypergraph->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Hypergraph)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_GraphBuilder = __Pyx_ImportType("pydecode.hypergraph", "GraphBuilder", sizeof(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_GraphBuilder)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder = (struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_GraphBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Node = __Pyx_ImportType("pydecode.hypergraph", "Node", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Node), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Node)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Node = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Node*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Node->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Node)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Edge = __Pyx_ImportType("pydecode.hypergraph", "Edge", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Edge), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Edge)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Edge = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Edge->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Edge)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Path = __Pyx_ImportType("pydecode.hypergraph", "Path", sizeof(struct __pyx_obj_8pydecode_10hypergraph_Path), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_Path)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_Path = (struct __pyx_vtabstruct_8pydecode_10hypergraph_Path*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_Path->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_Path)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_HypergraphMap = __Pyx_ImportType("pydecode.hypergraph", "HypergraphMap", sizeof(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap), 1); if (unlikely(!__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap = (struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap*)__Pyx_GetVtable(__pyx_ptype_8pydecode_10hypergraph_HypergraphMap->tp_dict); if (unlikely(!__pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pydecode/potentials.pyx":17
 * from wrap cimport *
 * from hypergraph cimport *
 * import hypergraph as py_hypergraph             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hypergraph, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_hypergraph, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":184
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8_Viterbi_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":183
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _Viterbi()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":184
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Viterbi()
 *         created.thisval = _Viterbi_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":183
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _Viterbi()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":190
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8_Viterbi_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":189
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":190
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":189
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Viterbi_from_cpp(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":194
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8_Viterbi_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":193
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":194
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":193
 *         return _Viterbi_from_cpp(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Viterbi_from_cpp(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":198
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8_Viterbi_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":197
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Viterbi().init(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":198
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":197
 *         return _Viterbi_from_cpp(Viterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Viterbi().init(Viterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":202
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8_Viterbi_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":201
 *         return _Viterbi().init(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Viterbi().init(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":202
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Viterbi().init(Viterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":201
 *         return _Viterbi().init(Viterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Viterbi().init(Viterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Viterbi->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Viterbi);

  /* "pydecode/potentials.pyx":277
 * 
 * 
 * class Viterbi:             # <<<<<<<<<<<<<<
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Viterbi, __pyx_n_s_Viterbi, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":278
 * 
 * class Viterbi:
 *     Chart = ViterbiChart             # <<<<<<<<<<<<<<
 *     Marginals = _ViterbiMarginals
 *     #Semi = _Viterbi
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":279
 * class Viterbi:
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Viterbi
 *     Potentials = ViterbiPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__ViterbiMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":281
 *     Marginals = _ViterbiMarginals
 *     #Semi = _Viterbi
 *     Potentials = ViterbiPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_ViterbiPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":284
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                ViterbiPotentials potentials):
 *         cdef ViterbiChart chart = ViterbiChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":283
 *     Potentials = ViterbiPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                ViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":292
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":291
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":304
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 ViterbiPotentials potentials,
 *                 ViterbiChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__14);

  /* "pydecode/potentials.pyx":303
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":326
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           ViterbiPotentials potentials):
 *         cdef const CViterbiMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":325
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           ViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":333
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          ViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7Viterbi_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Viterbi_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":332
 *         return _ViterbiMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          ViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":277
 * 
 * 
 * class Viterbi:             # <<<<<<<<<<<<<<
 *     Chart = ViterbiChart
 *     Marginals = _ViterbiMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Viterbi, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":503
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11_LogViterbi_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":502
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _LogViterbi()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":503
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _LogViterbi()
 *         created.thisval = _LogViterbi_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":502
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _LogViterbi()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":509
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11_LogViterbi_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":508
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":509
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":508
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":513
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11_LogViterbi_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":512
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":513
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":512
 *         return _LogViterbi_from_cpp(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":517
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11_LogViterbi_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":516
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _LogViterbi().init(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":517
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":516
 *         return _LogViterbi_from_cpp(LogViterbi_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _LogViterbi().init(LogViterbi_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":521
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11_LogViterbi_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":520
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _LogViterbi().init(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":521
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _LogViterbi().init(LogViterbi_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":520
 *         return _LogViterbi().init(LogViterbi_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _LogViterbi().init(LogViterbi_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__LogViterbi->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__LogViterbi);

  /* "pydecode/potentials.pyx":596
 * 
 * 
 * class LogViterbi:             # <<<<<<<<<<<<<<
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_LogViterbi, __pyx_n_s_LogViterbi, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":597
 * 
 * class LogViterbi:
 *     Chart = LogViterbiChart             # <<<<<<<<<<<<<<
 *     Marginals = _LogViterbiMarginals
 *     #Semi = _LogViterbi
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":598
 * class LogViterbi:
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _LogViterbi
 *     Potentials = LogViterbiPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":600
 *     Marginals = _LogViterbiMarginals
 *     #Semi = _LogViterbi
 *     Potentials = LogViterbiPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":603
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                LogViterbiPotentials potentials):
 *         cdef LogViterbiChart chart = LogViterbiChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":602
 *     Potentials = LogViterbiPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                LogViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":611
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":610
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":623
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 LogViterbiPotentials potentials,
 *                 LogViterbiChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__31);

  /* "pydecode/potentials.pyx":622
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":645
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           LogViterbiPotentials potentials):
 *         cdef const CLogViterbiMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":644
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           LogViterbiPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":652
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          LogViterbiPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_10LogViterbi_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_LogViterbi_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":651
 *         return _LogViterbiMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          LogViterbiPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":596
 * 
 * 
 * class LogViterbi:             # <<<<<<<<<<<<<<
 *     Chart = LogViterbiChart
 *     Marginals = _LogViterbiMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_LogViterbi, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LogViterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":822
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7_Inside_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":821
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _Inside()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":822
 * 
 *     @staticmethod
 *     def from_value(double val):             # <<<<<<<<<<<<<<
 *         created = _Inside()
 *         created.thisval = _Inside_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":821
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(double val):
 *         created = _Inside()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":828
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7_Inside_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":827
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":828
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":827
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Inside_from_cpp(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":832
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7_Inside_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":831
 *         return _Inside_from_cpp(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":832
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Inside_from_cpp(Inside_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":831
 *         return _Inside_from_cpp(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Inside_from_cpp(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":836
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7_Inside_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":835
 *         return _Inside_from_cpp(Inside_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Inside().init(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":836
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":835
 *         return _Inside_from_cpp(Inside_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Inside().init(Inside_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":840
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7_Inside_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":839
 *         return _Inside().init(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Inside().init(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":840
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Inside().init(Inside_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":839
 *         return _Inside().init(Inside_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Inside().init(Inside_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Inside->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Inside);

  /* "pydecode/potentials.pyx":915
 * 
 * 
 * class Inside:             # <<<<<<<<<<<<<<
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Inside, __pyx_n_s_Inside, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":916
 * 
 * class Inside:
 *     Chart = InsideChart             # <<<<<<<<<<<<<<
 *     Marginals = _InsideMarginals
 *     #Semi = _Inside
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsideChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":917
 * class Inside:
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Inside
 *     Potentials = InsidePotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__InsideMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":919
 *     Marginals = _InsideMarginals
 *     #Semi = _Inside
 *     Potentials = InsidePotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_InsidePotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":922
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                InsidePotentials potentials):
 *         cdef InsideChart chart = InsideChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":921
 *     Potentials = InsidePotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                InsidePotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 921; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":930
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":929
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 929; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":942
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 InsidePotentials potentials,
 *                 InsideChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__48);

  /* "pydecode/potentials.pyx":941
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":964
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           InsidePotentials potentials):
 *         cdef const CInsideMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":963
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           InsidePotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":971
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          InsidePotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_6Inside_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Inside_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":970
 *         return _InsideMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          InsidePotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":915
 * 
 * 
 * class Inside:             # <<<<<<<<<<<<<<
 *     Chart = InsideChart
 *     Marginals = _InsideMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Inside, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1141
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5_Bool_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1140
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(bool val):
 *         created = _Bool()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1141
 * 
 *     @staticmethod
 *     def from_value(bool val):             # <<<<<<<<<<<<<<
 *         created = _Bool()
 *         created.thisval = _Bool_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1140
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(bool val):
 *         created = _Bool()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1147
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5_Bool_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1146
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1147
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1146
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Bool_from_cpp(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1151
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5_Bool_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1150
 *         return _Bool_from_cpp(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1151
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Bool_from_cpp(Bool_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1150
 *         return _Bool_from_cpp(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Bool_from_cpp(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1155
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5_Bool_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1154
 *         return _Bool_from_cpp(Bool_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Bool().init(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1155
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1154
 *         return _Bool_from_cpp(Bool_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Bool().init(Bool_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1159
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5_Bool_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1158
 *         return _Bool().init(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Bool().init(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1159
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Bool().init(Bool_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1158
 *         return _Bool().init(Bool_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Bool().init(Bool_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Bool->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Bool);

  /* "pydecode/potentials.pyx":1234
 * 
 * 
 * class Bool:             # <<<<<<<<<<<<<<
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Bool, __pyx_n_s_Bool, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1235
 * 
 * class Bool:
 *     Chart = BoolChart             # <<<<<<<<<<<<<<
 *     Marginals = _BoolMarginals
 *     #Semi = _Bool
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1236
 * class Bool:
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Bool
 *     Potentials = BoolPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__BoolMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1238
 *     Marginals = _BoolMarginals
 *     #Semi = _Bool
 *     Potentials = BoolPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_BoolPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1241
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                BoolPotentials potentials):
 *         cdef BoolChart chart = BoolChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1240
 *     Potentials = BoolPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                BoolPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1249
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1248
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1261
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 BoolPotentials potentials,
 *                 BoolChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__65);

  /* "pydecode/potentials.pyx":1260
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1283
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           BoolPotentials potentials):
 *         cdef const CBoolMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1282
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           BoolPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1290
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          BoolPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_4Bool_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Bool_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1289
 *         return _BoolMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          BoolPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1234
 * 
 * 
 * class Bool:             # <<<<<<<<<<<<<<
 *     Chart = BoolChart
 *     Marginals = _BoolMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Bool, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Bool, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1460
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13_SparseVector_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1459
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _SparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1460
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _SparseVector()
 *         created.thisval = _SparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1459
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _SparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1466
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13_SparseVector_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1465
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1466
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1465
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _SparseVector_from_cpp(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1470
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13_SparseVector_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1469
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1470
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1469
 *         return _SparseVector_from_cpp(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _SparseVector_from_cpp(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1474
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13_SparseVector_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1473
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _SparseVector().init(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1474
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1473
 *         return _SparseVector_from_cpp(SparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _SparseVector().init(SparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1478
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13_SparseVector_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1477
 *         return _SparseVector().init(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _SparseVector().init(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1478
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _SparseVector().init(SparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1477
 *         return _SparseVector().init(SparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _SparseVector().init(SparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__SparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__SparseVector);

  /* "pydecode/potentials.pyx":1545
 * 
 * 
 * class SparseVector:             # <<<<<<<<<<<<<<
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_SparseVector, __pyx_n_s_SparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1546
 * 
 * class SparseVector:
 *     Chart = SparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _SparseVectorMarginals
 *     #Semi = _SparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1547
 * class SparseVector:
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _SparseVector
 *     Potentials = SparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__SparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1549
 *     Marginals = _SparseVectorMarginals
 *     #Semi = _SparseVector
 *     Potentials = SparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_SparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1552
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                SparseVectorPotentials potentials):
 *         cdef SparseVectorChart chart = SparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1551
 *     Potentials = SparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                SparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1560
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 SparseVectorPotentials potentials,
 *                 SparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1559
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 SparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1572
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           SparseVectorPotentials potentials):
 *         cdef const CSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1571
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           SparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1579
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          SparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_12SparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_SparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1578
 *         return _SparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          SparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1545
 * 
 * 
 * class SparseVector:             # <<<<<<<<<<<<<<
 *     Chart = SparseVectorChart
 *     Marginals = _SparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_SparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1749
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MinSparseVector_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1748
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MinSparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1749
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MinSparseVector()
 *         created.thisval = _MinSparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1748
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MinSparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1755
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MinSparseVector_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1754
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1755
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1754
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1754; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1759
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MinSparseVector_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1758
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1759
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1758
 *         return _MinSparseVector_from_cpp(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1763
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MinSparseVector_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1762
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _MinSparseVector().init(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1763
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1762
 *         return _MinSparseVector_from_cpp(MinSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _MinSparseVector().init(MinSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1767
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MinSparseVector_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1766
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _MinSparseVector().init(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1767
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MinSparseVector().init(MinSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1766
 *         return _MinSparseVector().init(MinSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _MinSparseVector().init(MinSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MinSparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1767; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MinSparseVector);

  /* "pydecode/potentials.pyx":1834
 * 
 * 
 * class MinSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MinSparseVector, __pyx_n_s_MinSparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":1835
 * 
 * class MinSparseVector:
 *     Chart = MinSparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _MinSparseVectorMarginals
 *     #Semi = _MinSparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1836
 * class MinSparseVector:
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _MinSparseVector
 *     Potentials = MinSparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MinSparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1838
 *     Marginals = _MinSparseVectorMarginals
 *     #Semi = _MinSparseVector
 *     Potentials = MinSparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MinSparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":1841
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MinSparseVectorPotentials potentials):
 *         cdef MinSparseVectorChart chart = MinSparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1840
 *     Potentials = MinSparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                MinSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1849
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MinSparseVectorPotentials potentials,
 *                 MinSparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1848
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 MinSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1848; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1861
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MinSparseVectorPotentials potentials):
 *         cdef const CMinSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_compute_marginal, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1860
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           MinSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1868
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MinSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MinSparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MinSparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":1867
 *         return _MinSparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          MinSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":1834
 * 
 * 
 * class MinSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MinSparseVectorChart
 *     Marginals = _MinSparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MinSparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MinSparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2037
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MaxSparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2038
 * 
 *     @staticmethod
 *     def from_value(vector[pair[int, int]] val):             # <<<<<<<<<<<<<<
 *         created = _MaxSparseVector()
 *         created.thisval = _MaxSparseVector_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2037
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(vector[pair[int, int]] val):
 *         created = _MaxSparseVector()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2044
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2043
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2044
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2043
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2044; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2048
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2047
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2048
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2047
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2052
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2051
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2052
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2051
 *         return _MaxSparseVector_from_cpp(MaxSparseVector_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2056
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_16_MaxSparseVector_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2055
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2056
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2055
 *         return _MaxSparseVector().init(MaxSparseVector_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _MaxSparseVector().init(MaxSparseVector_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__MaxSparseVector->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__MaxSparseVector);

  /* "pydecode/potentials.pyx":2123
 * 
 * 
 * class MaxSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MaxSparseVector, __pyx_n_s_MaxSparseVector, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2124
 * 
 * class MaxSparseVector:
 *     Chart = MaxSparseVectorChart             # <<<<<<<<<<<<<<
 *     Marginals = _MaxSparseVectorMarginals
 *     #Semi = _MaxSparseVector
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2125
 * class MaxSparseVector:
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _MaxSparseVector
 *     Potentials = MaxSparseVectorPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__MaxSparseVectorMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2127
 *     Marginals = _MaxSparseVectorMarginals
 *     #Semi = _MaxSparseVector
 *     Potentials = MaxSparseVectorPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_MaxSparseVectorPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2130
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                MaxSparseVectorPotentials potentials):
 *         cdef MaxSparseVectorChart chart = MaxSparseVectorChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2129
 *     Potentials = MaxSparseVectorPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                MaxSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2138
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 MaxSparseVectorPotentials potentials,
 *                 MaxSparseVectorChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2137
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 MaxSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2150
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           MaxSparseVectorPotentials potentials):
 *         cdef const CMaxSparseVectorMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_5compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_compute_marginal, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2149
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           MaxSparseVectorPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2157
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          MaxSparseVectorPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15MaxSparseVector_7prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_MaxSparseVector_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2156
 *         return _MaxSparseVectorMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          MaxSparseVectorPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2123
 * 
 * 
 * class MaxSparseVector:             # <<<<<<<<<<<<<<
 *     Chart = MaxSparseVectorChart
 *     Marginals = _MaxSparseVectorMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MaxSparseVector, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MaxSparseVector, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2327
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9_Counting_1from_value, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2326
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(int val):
 *         created = _Counting()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2327
 * 
 *     @staticmethod
 *     def from_value(int val):             # <<<<<<<<<<<<<<
 *         created = _Counting()
 *         created.thisval = _Counting_to_cpp(val)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting, __pyx_n_s_from_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2326
 *         return self
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_value(int val):
 *         created = _Counting()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_from_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2333
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9_Counting_3zero_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2332
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2333
 * 
 *     @staticmethod
 *     def zero_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting, __pyx_n_s_zero_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2332
 *         return created
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero_raw():
 *         return _Counting_from_cpp(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_zero_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2337
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9_Counting_5one_raw, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2336
 *         return _Counting_from_cpp(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2337
 * 
 *     @staticmethod
 *     def one_raw():             # <<<<<<<<<<<<<<
 *         return _Counting_from_cpp(Counting_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting, __pyx_n_s_one_raw); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2336
 *         return _Counting_from_cpp(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one_raw():
 *         return _Counting_from_cpp(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_one_raw, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2341
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_zero())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9_Counting_7zero, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2340
 *         return _Counting_from_cpp(Counting_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Counting().init(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2341
 * 
 *     @staticmethod
 *     def zero():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_zero())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting, __pyx_n_s_zero); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2340
 *         return _Counting_from_cpp(Counting_one())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def zero():
 *         return _Counting().init(Counting_zero())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2345
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_one())
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9_Counting_9one, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2344
 *         return _Counting().init(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Counting().init(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2345
 * 
 *     @staticmethod
 *     def one():             # <<<<<<<<<<<<<<
 *         return _Counting().init(Counting_one())
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting, __pyx_n_s_one); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2344
 *         return _Counting().init(Counting_zero())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def one():
 *         return _Counting().init(Counting_one())
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_8pydecode_10potentials__Counting->tp_dict, __pyx_n_s_one, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_8pydecode_10potentials__Counting);

  /* "pydecode/potentials.pyx":2420
 * 
 * 
 * class Counting:             # <<<<<<<<<<<<<<
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Counting, __pyx_n_s_Counting, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/potentials.pyx":2421
 * 
 * class Counting:
 *     Chart = CountingChart             # <<<<<<<<<<<<<<
 *     Marginals = _CountingMarginals
 *     #Semi = _Counting
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Chart, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingChart))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2422
 * class Counting:
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals             # <<<<<<<<<<<<<<
 *     #Semi = _Counting
 *     Potentials = CountingPotentials
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Marginals, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__CountingMarginals))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2424
 *     Marginals = _CountingMarginals
 *     #Semi = _Counting
 *     Potentials = CountingPotentials             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_Potentials, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_CountingPotentials))) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/potentials.pyx":2427
 * 
 *     @staticmethod
 *     def inside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                CountingPotentials potentials):
 *         cdef CountingChart chart = CountingChart()
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_1inside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_inside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2426
 *     Potentials = CountingPotentials
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def inside(Hypergraph graph,
 *                CountingPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_inside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2435
 * 
 *     @staticmethod
 *     def outside(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart inside_chart):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_3outside, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_outside, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2434
 *         return chart
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def outside(Hypergraph graph,
 *                 CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_outside, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2447
 * 
 *     @staticmethod
 *     def viterbi(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                 CountingPotentials potentials,
 *                 CountingChart chart=None):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_5viterbi, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_viterbi, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__124);

  /* "pydecode/potentials.pyx":2446
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def viterbi(Hypergraph graph,
 *                 CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_viterbi, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2469
 * 
 *     @staticmethod
 *     def compute_marginals(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                           CountingPotentials potentials):
 *         cdef const CCountingMarginals *marginals = \
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_7compute_marginals, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_compute_marginals, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2468
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def compute_marginals(Hypergraph graph,
 *                           CountingPotentials potentials):
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_compute_marginals, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2476
 * 
 *     @staticmethod
 *     def prune_hypergraph(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                          CountingPotentials potentials,
 *                          threshold):
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_8Counting_9prune_hypergraph, __Pyx_CYFUNCTION_STATICMETHOD, __pyx_n_s_Counting_prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "pydecode/potentials.pyx":2475
 *         return _CountingMarginals().init(marginals, graph)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def prune_hypergraph(Hypergraph graph,
 *                          CountingPotentials potentials,
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s_prune_hypergraph, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/potentials.pyx":2420
 * 
 * 
 * class Counting:             # <<<<<<<<<<<<<<
 *     Chart = CountingChart
 *     Marginals = _CountingMarginals
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_Counting, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Counting, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2489
 * 
 * 
 * class Potentials(LogViterbiPotentials):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiPotentials)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Potentials, __pyx_n_s_Potentials, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Potentials, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Potentials, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2528
 * 
 * 
 * def inside(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     inside(Hypergraph graph, Potentials potentials):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_1inside, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inside, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2554
 * 
 * 
 * def outside(Hypergraph graph, potentials, inside_chart):             # <<<<<<<<<<<<<<
 *     r"""
 *     outside(Hypergraph graph, Potentials potentials, Chart inside_chart)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_3outside, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_outside, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2585
 * 
 * 
 * def best_path(Hypergraph graph, potentials, chart=None):             # <<<<<<<<<<<<<<
 *     r"""
 *     best_path(Hypergraph graph, Potentials potentials):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_5best_path, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_best_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2611
 * 
 * 
 * def prune_hypergraph(Hypergraph graph, potentials, thres):             # <<<<<<<<<<<<<<
 *     r"""
 *     prune_hypergraph(Hypergraph graph, potentials, thres)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_7prune_hypergraph, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_prune_hypergraph, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2634
 * 
 * 
 * def compute_marginals(Hypergraph graph, potentials):             # <<<<<<<<<<<<<<
 *     r"""
 *     compute_marginals(Hypergraph graph, Potentials potentials):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_9compute_marginals, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_marginals, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2656
 * 
 * 
 * class Chart(LogViterbiChart):             # <<<<<<<<<<<<<<
 *     r"""
 *     Chart :math:`S^{|{\cal V}|}` associated with a hypergraph (V, E)
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials_LogViterbiChart)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Chart, __pyx_n_s_Chart, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, __pyx_kp_s_Chart_math_S_cal_V_associated_w); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Chart, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Chart, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2667
 * 
 * 
 * class Marginals(_LogViterbiMarginals):             # <<<<<<<<<<<<<<
 *     r"""
 *     Marginal values :math:`S^{|{\cal E} \times {\cal V}|}` associated
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10potentials__LogViterbiMarginals)));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Marginals, __pyx_n_s_Marginals, (PyObject *) NULL, __pyx_n_s_pydecode_potentials, __pyx_kp_s_Marginal_values_math_S_cal_E_ti); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Marginals, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Marginals, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2678
 *     pass
 * 
 * inside_values = inside             # <<<<<<<<<<<<<<
 * outside_values = outside
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_inside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_inside_values, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2679
 * 
 * inside_values = inside
 * outside_values = outside             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_outside); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_outside_values, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2682
 * 
 * 
 * def make_pruning_projections(Hypergraph graph, BoolPotentials filt):             # <<<<<<<<<<<<<<
 *     """
 *     DEPRECATED
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_11make_pruning_projections, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_pruning_projections, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2694
 * 
 * 
 * def project(Hypergraph graph, BoolPotentials filter):             # <<<<<<<<<<<<<<
 *     """
 *     Prune a graph based on a set of boolean potentials.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_13project, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_project, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2716
 * 
 * 
 * def binarize(Hypergraph graph):             # <<<<<<<<<<<<<<
 *     """
 *     Binarize a hypergraph by making all k-ary edges right branching.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_15binarize, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_binarize, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2733
 * 
 * 
 * def pairwise_dot(SparseVectorPotentials potentials,             # <<<<<<<<<<<<<<
 *                  vec,
 *                  LogViterbiPotentials weights):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_17pairwise_dot, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pairwise_dot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":2758
 *     cpairwise_dot(deref(potentials.thisptr), rvec, weights.thisptr)
 * 
 * def extend_hypergraph_by_count(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                                CountingPotentials potentials,
 *                                int lower_limit,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_10potentials_19extend_hypergraph_by_count, NULL, __pyx_n_s_pydecode_potentials); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_extend_hypergraph_by_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/potentials.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * 
 * ##
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_int_2c_int_3e_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pydecode.potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pydecode.potentials");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL)
}
#endif

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
