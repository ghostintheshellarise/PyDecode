/* Generated by Cython 0.19.2 on Wed Apr  2 17:24:20 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pydecode__hypergraph
#define __PYX_HAVE_API__pydecode__hypergraph
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "Hypergraph/Hypergraph.h"
#include "Hypergraph/Map.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "hypergraph.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pydecode_10hypergraph_Labeling;
struct __pyx_obj_8pydecode_10hypergraph_Path;
struct __pyx_obj_8pydecode_10hypergraph_Node;
struct __pyx_obj_8pydecode_10hypergraph_Edge;
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr;
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder;
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph;
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__;
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges;
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr;
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__;
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes;
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap;

/* "pydecode/hypergraph.pxd":36
 *         bool equal(const CHyperpath path)
 * 
 * cdef class Labeling:             # <<<<<<<<<<<<<<
 *     cdef edge_labels
 *     cdef node_labels
 */
struct __pyx_obj_8pydecode_10hypergraph_Labeling {
  PyObject_HEAD
  PyObject *edge_labels;
  PyObject *node_labels;
};


/* "pydecode/hypergraph.pxd":80
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph)
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtab;
  Hyperpath const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/hypergraph.pxd":66
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr)
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */
struct __pyx_obj_8pydecode_10hypergraph_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtab;
  Hypernode const *nodeptr;
  Hypergraph *graphptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/hypergraph.pxd":74
 *                    Hypergraph graph)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_Edge {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtab;
  Hyperedge const *edgeptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
};


/* "pydecode/hypergraph.pyx":42
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *__pyx_outer_scope;
  Hyperedge const *__pyx_v_edge;
  std::vector<Hyperedge const *>::iterator __pyx_t_0;
  std::vector<Hyperedge const *> *__pyx_t_1;
};


/* "pydecode/hypergraph.pxd":57
 *     cdef Hypergraph init(self, const CHypergraph *ptr, Labeling labeling)
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Hypergraph graph
 */
struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *graph;
  PyObject *edge_labels;
  PyObject *node_labels;
  PyObject *started;
};


/* "pydecode/hypergraph.pxd":50
 *     cdef init(self, vector[const CHypernode *])
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef Labeling labeling
 */
struct __pyx_obj_8pydecode_10hypergraph_Hypergraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *labeling;
  PyObject *_cached_edges;
};


/* "pydecode/hypergraph.pyx":58
 *         return Node().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Node().init(node, self._graph) for node in self._nodes)
 * 
 */
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self;
};


/* "pydecode/hypergraph.pxd":40
 *     cdef node_labels
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHyperedge *] _edges
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyEdges {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hyperedge const *> _edges;
};


/* "pydecode/hypergraph.pyx":59
 * 
 *     def __iter__(self):
 *         return (Node().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *__pyx_outer_scope;
  Hypernode const *__pyx_v_node;
  std::vector<Hypernode const *>::iterator __pyx_t_0;
  std::vector<Hypernode const *> *__pyx_t_1;
};


/* "pydecode/hypergraph.pyx":41
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */
struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self;
};


/* "pydecode/hypergraph.pxd":45
 *     cdef init(self, vector[const CHyperedge *])
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     cdef Hypergraph _graph
 *     cdef vector[const CHypernode *] _nodes
 */
struct __pyx_obj_8pydecode_10hypergraph__LazyNodes {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtab;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *_graph;
  std::vector<Hypernode const *> _nodes;
};


/* "pydecode/hypergraph.pxd":96
 *         CHypergraphMap *compose(const CHypergraphMap &)
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     cdef const CHypergraphMap *thisptr
 *     cdef Hypergraph range_graph
 */
struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtab;
  HypergraphMap const *thisptr;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *range_graph;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *domain_graph;
};



/* "pydecode/hypergraph.pyx":30
 *             return self.node_labels[obj.id]
 * 
 * cdef class _LazyEdges:             # <<<<<<<<<<<<<<
 *     def __init__(self, graph):
 *         self._graph = graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *, std::vector<Hyperedge const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *__pyx_vtabptr_8pydecode_10hypergraph__LazyEdges;


/* "pydecode/hypergraph.pyx":47
 *         return self._edges.size()
 * 
 * cdef class _LazyNodes:             # <<<<<<<<<<<<<<
 *     def __init__(self, graph):
 *         self._graph = graph
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes {
  PyObject *(*init)(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *, std::vector<Hypernode const *>);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *__pyx_vtabptr_8pydecode_10hypergraph__LazyNodes;


/* "pydecode/hypergraph.pyx":64
 *         return self._nodes.size()
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     r"""
 * 
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10hypergraph_Labeling *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *__pyx_vtabptr_8pydecode_10hypergraph_Hypergraph;


/* "pydecode/hypergraph.pyx":267
 *         return node
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     r"""
 *     Node :math:`v \in {\cal V}` associated with a :py:class:`Hypergraph`.
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Node {
  struct __pyx_obj_8pydecode_10hypergraph_Node *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Node *, Hypernode const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *__pyx_vtabptr_8pydecode_10hypergraph_Node;


/* "pydecode/hypergraph.pyx":394
 * 
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     r"""
 *     Valid hyperpath :math:`y \in {\cal X}` in the hypergraph.
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Path {
  struct __pyx_obj_8pydecode_10hypergraph_Path *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
  PyObject *(*equal)(struct __pyx_obj_8pydecode_10hypergraph_Path *, struct __pyx_obj_8pydecode_10hypergraph_Path *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *__pyx_vtabptr_8pydecode_10hypergraph_Path;


/* "pydecode/hypergraph.pyx":329
 *         return (self.nodeptr.id() == -1)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     r"""
 *     Hyperedge :math:`e \in {\cal E}` associated with a :py:class:`Hypergraph`.
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *(*init)(struct __pyx_obj_8pydecode_10hypergraph_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *__pyx_vtabptr_8pydecode_10hypergraph_Edge;


/* "pydecode/hypergraph.pyx":477
 * 
 * 
 * cdef class HypergraphMap:             # <<<<<<<<<<<<<<
 *     """
 *     A map between two hypergraphs.
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *(*init)(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *__pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap;


/* "pydecode/hypergraph.pyx":153
 *         return s
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     r"""
 *     Build a hypergraph. Created using ::
 */

struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *(*init)(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph *);
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *__pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

#define __Pyx_GetItemInt(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_Fast(o, i, is_list, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
#define __Pyx_GetItemInt_List(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_List_Fast(o, i, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, i, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#define __Pyx_SetItemInt(o, i, v, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_SetItemInt_Fast(o, i, v, is_list, wraparound, boundscheck) : \
    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    int flags;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self, PyObject *module,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#include <string.h>

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#include <new>

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases); /*proto*/

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *qualname, PyObject *modname); /*proto*/

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    int resume_label;
    char is_running;  // using T_BOOL for property below requires char value
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'pydecode.wrap' */

/* Module declarations from 'pydecode.hypergraph' */
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Labeling = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Path = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Node = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Edge = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_GraphBuilder = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_Hypergraph = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyEdges = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph__LazyNodes = 0;
static PyTypeObject *__pyx_ptype_8pydecode_10hypergraph_HypergraphMap = 0;
static PyObject *__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts = 0;
static PyObject *__pyx_f_8pydecode_10hypergraph_convert_edges(std::vector<Hyperedge const *>, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *); /*proto*/
static PyObject *__pyx_f_8pydecode_10hypergraph_convert_nodes(std::vector<Hypernode const *>, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *); /*proto*/
#define __Pyx_MODULE_NAME "pydecode.hypergraph"
int __pyx_module_is_main_pydecode__hypergraph = 0;

/* Implementation of 'pydecode.hypergraph' */
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static int __pyx_pf_8pydecode_10hypergraph_8Labeling___init__(struct __pyx_obj_8pydecode_10hypergraph_Labeling *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_node_labels, PyObject *__pyx_v_edge_labels); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_8Labeling_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph_Labeling *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_10_LazyEdges___init__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self, PyObject *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_8__iter___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_4__iter__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_6__len__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_10_LazyNodes___init__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self, PyObject *__pyx_v_graph); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_8__iter___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_4__iter__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_6__len__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10hypergraph_10Hypergraph_2__dealloc__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_4builder(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_5nodes___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_4root___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_6__str__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_12GraphBuilder___init__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_2__enter__(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_4__exit__(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_6add_node(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label); /* proto */
static void __pyx_pf_8pydecode_10hypergraph_4Node___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8pydecode_10hypergraph_4Node_2__hash__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_4__repr__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_2id___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_11is_terminal___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_5label___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_6__str__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_4Node_8__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_10_removed(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8pydecode_10hypergraph_4Edge_2__hash__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10hypergraph_4Edge_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_6__repr__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_4tail___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_4head___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_5label___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_2id___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_8_removed(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10hypergraph_4Path___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_4Path_2__cinit__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_edges); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_4__str__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_4Path_6__contains__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_8__iter__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_10__richcmp__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_5nodes___get__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_10hypergraph_13HypergraphMap___cinit__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_2compose(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_4invert(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph___get__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph___get__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static void __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_6__dealloc__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_8__getitem__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_10_build_range_hypergraph(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_12_build_domain_hypergraph(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Labeling(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Path(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Edge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_GraphBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Hypergraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph__LazyEdges(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph__LazyNodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_10hypergraph_HypergraphMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_1[] = "HypergraphAccessException";
static char __pyx_k_2[] = "There is no edge labeling.";
static char __pyx_k_4[] = "There is no node labeling.";
static char __pyx_k_6[] = "Hypergraph: Edges: %s Nodes: %s";
static char __pyx_k_7[] = "\n";
static char __pyx_k_8[] = "Root %s";
static char __pyx_k_9[] = " %s %s \n";
static char __pyx_k_10[] = "\t%d -> ";
static char __pyx_k_11[] = " %d ";
static char __pyx_k_13[] = "HypergraphConstructionException";
static char __pyx_k_14[] = "Must constuct graph in 'with' block.";
static char __pyx_k_16[] = "Edges must be pairs of the form (tail_nodes, label).";
static char __pyx_k_17[] = "Received %s";
static char __pyx_k_18[] = "An edge must have at least one tail node.";
static char __pyx_k_20[] = "NODE:%d";
static char __pyx_k_21[] = "Bad node id.";
static char __pyx_k_22[] = "EDGE:%d";
static char __pyx_k_23[] = "Bad edge id.";
static char __pyx_k_25[] = "Path.__cinit__.<locals>.<lambda>";
static char __pyx_k_26[] = "pydecode.hypergraph";
static char __pyx_k_27[] = ":";
static char __pyx_k_28[] = "No inequality on paths.";
static char __pyx_k_30[] = "_build_range_hypergraph";
static char __pyx_k_31[] = "_build_domain_hypergraph";
static char __pyx_k_34[] = "/home/srush/Projects/decoding/python/pydecode/hypergraph.pyx";
static char __pyx_k_35[] = "HypergraphAccessException.__init__";
static char __pyx_k_38[] = "HypergraphAccessException.__str__";
static char __pyx_k_41[] = "HypergraphConstructionException.__init__";
static char __pyx_k_44[] = "HypergraphConstructionException.__str__";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k__id[] = "id";
static char __pyx_k__get[] = "get";
static char __pyx_k__key[] = "key";
static char __pyx_k__args[] = "args";
static char __pyx_k__head[] = "head";
static char __pyx_k__join[] = "join";
static char __pyx_k__root[] = "root";
static char __pyx_k__self[] = "self";
static char __pyx_k__send[] = "send";
static char __pyx_k__sort[] = "sort";
static char __pyx_k__tail[] = "tail";
static char __pyx_k__close[] = "close";
static char __pyx_k__edges[] = "edges";
static char __pyx_k__graph[] = "graph";
static char __pyx_k__label[] = "label";
static char __pyx_k__nodes[] = "nodes";
static char __pyx_k__range[] = "range";
static char __pyx_k__throw[] = "throw";
static char __pyx_k__value[] = "value";
static char __pyx_k__append[] = "append";
static char __pyx_k____str__[] = "__str__";
static char __pyx_k__project[] = "project";
static char __pyx_k__thisptr[] = "thisptr";
static char __pyx_k____init__[] = "__init__";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k___removed[] = "_removed";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k____class__[] = "__class__";
static char __pyx_k__exception[] = "exception";
static char __pyx_k____module__[] = "__module__";
static char __pyx_k__edge_labels[] = "edge_labels";
static char __pyx_k__node_labels[] = "node_labels";
static char __pyx_k____qualname__[] = "__qualname__";
static char __pyx_k____metaclass__[] = "__metaclass__";
static char __pyx_k____pyx_vtable__[] = "__pyx_vtable__";
static char __pyx_k__range_hypergraph[] = "range_hypergraph";
static char __pyx_k__domain_hypergraph[] = "domain_hypergraph";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_n_s_13;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_kp_s_20;
static PyObject *__pyx_kp_s_21;
static PyObject *__pyx_kp_s_22;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_n_s_26;
static PyObject *__pyx_kp_s_27;
static PyObject *__pyx_kp_s_28;
static PyObject *__pyx_n_s_30;
static PyObject *__pyx_n_s_31;
static PyObject *__pyx_kp_s_34;
static PyObject *__pyx_n_s_35;
static PyObject *__pyx_n_s_38;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_n_s_41;
static PyObject *__pyx_n_s_44;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s____class__;
static PyObject *__pyx_n_s____init__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____metaclass__;
static PyObject *__pyx_n_s____module__;
static PyObject *__pyx_n_s____pyx_vtable__;
static PyObject *__pyx_n_s____qualname__;
static PyObject *__pyx_n_s____str__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___removed;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__args;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__close;
static PyObject *__pyx_n_s__domain_hypergraph;
static PyObject *__pyx_n_s__edge_labels;
static PyObject *__pyx_n_s__edges;
static PyObject *__pyx_n_s__exception;
static PyObject *__pyx_n_s__get;
static PyObject *__pyx_n_s__graph;
static PyObject *__pyx_n_s__head;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__key;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__node_labels;
static PyObject *__pyx_n_s__nodes;
static PyObject *__pyx_n_s__project;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__range_hypergraph;
static PyObject *__pyx_n_s__root;
static PyObject *__pyx_n_s__self;
static PyObject *__pyx_n_s__send;
static PyObject *__pyx_n_s__sort;
static PyObject *__pyx_n_s__tail;
static PyObject *__pyx_n_s__thisptr;
static PyObject *__pyx_n_s__throw;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_k_12;
static PyObject *__pyx_k_24;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_codeobj_33;
static PyObject *__pyx_k_codeobj_37;
static PyObject *__pyx_k_codeobj_40;
static PyObject *__pyx_k_codeobj_43;

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_8Labeling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_8Labeling_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_node_labels = 0;
  PyObject *__pyx_v_edge_labels = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__node_labels,&__pyx_n_s__edge_labels,0};
    PyObject* values[3] = {0,0,0};

    /* "pydecode/hypergraph.pyx":13
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,
 *                  node_labels=None, edge_labels=None):             # <<<<<<<<<<<<<<
 *         self.edge_labels = edge_labels
 *         self.node_labels = node_labels
 */
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__node_labels);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__edge_labels);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_node_labels = values[1];
    __pyx_v_edge_labels = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.Labeling.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_8Labeling___init__(((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)__pyx_v_self), __pyx_v_graph, __pyx_v_node_labels, __pyx_v_edge_labels);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":12
 * 
 * cdef class Labeling:
 *     def __init__(self, Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 */

static int __pyx_pf_8pydecode_10hypergraph_8Labeling___init__(struct __pyx_obj_8pydecode_10hypergraph_Labeling *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_node_labels, PyObject *__pyx_v_edge_labels) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/hypergraph.pyx":14
 *     def __init__(self, Hypergraph graph,
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels             # <<<<<<<<<<<<<<
 *         self.node_labels = node_labels
 * 
 */
  __Pyx_INCREF(__pyx_v_edge_labels);
  __Pyx_GIVEREF(__pyx_v_edge_labels);
  __Pyx_GOTREF(__pyx_v_self->edge_labels);
  __Pyx_DECREF(__pyx_v_self->edge_labels);
  __pyx_v_self->edge_labels = __pyx_v_edge_labels;

  /* "pydecode/hypergraph.pyx":15
 *                  node_labels=None, edge_labels=None):
 *         self.edge_labels = edge_labels
 *         self.node_labels = node_labels             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
  __Pyx_INCREF(__pyx_v_node_labels);
  __Pyx_GIVEREF(__pyx_v_node_labels);
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = __pyx_v_node_labels;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_8Labeling_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_8Labeling_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_8Labeling_2__getitem__(((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)__pyx_v_self), ((PyObject *)__pyx_v_obj));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":17
 *         self.node_labels = node_labels
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_8Labeling_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph_Labeling *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hypergraph.pyx":18
 * 
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":19
 *     def __getitem__(self, obj):
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:             # <<<<<<<<<<<<<<
 *                 raise HypergraphAccessException(
 *                     "There is no edge labeling.")
 */
    __pyx_t_2 = (__pyx_v_self->edge_labels == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pydecode/hypergraph.pyx":20
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "pydecode/hypergraph.pyx":22
 *                 raise HypergraphAccessException(
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(obj, Node):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s__id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->edge_labels, __pyx_t_4); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":24
 *             return self.edge_labels[obj.id]
 * 
 *         if isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":25
 * 
 *         if isinstance(obj, Node):
 *             if self.node_labels is None:             # <<<<<<<<<<<<<<
 *                 raise HypergraphAccessException(
 *                     "There is no node labeling.")
 */
    __pyx_t_2 = (__pyx_v_self->node_labels == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "pydecode/hypergraph.pyx":26
 *         if isinstance(obj, Node):
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "pydecode/hypergraph.pyx":28
 *                 raise HypergraphAccessException(
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]             # <<<<<<<<<<<<<<
 * 
 * cdef class _LazyEdges:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s__id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->node_labels, __pyx_t_4); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph.Labeling.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyEdges.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyEdges___init__(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_v_self), __pyx_v_graph);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":31
 * 
 * cdef class _LazyEdges:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

static int __pyx_pf_8pydecode_10hypergraph_10_LazyEdges___init__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self, PyObject *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/hypergraph.pyx":32
 * cdef class _LazyEdges:
 *     def __init__(self, graph):
 *         self._graph = graph             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):
 */
  if (!(likely(((__pyx_v_graph) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_graph, __pyx_ptype_8pydecode_10hypergraph_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_graph);
  __Pyx_GIVEREF(__pyx_v_graph);
  __Pyx_GOTREF(__pyx_v_self->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_v_self->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyEdges.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":34
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):             # <<<<<<<<<<<<<<
 *         self._edges = edges
 *         return self
 */

static PyObject *__pyx_f_8pydecode_10hypergraph_10_LazyEdges_init(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self, std::vector<Hyperedge const *> __pyx_v_edges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":35
 * 
 *     cdef init(self, vector[const CHyperedge *] edges):
 *         self._edges = edges             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_edges = __pyx_v_edges;

  /* "pydecode/hypergraph.pyx":36
 *     cdef init(self, vector[const CHyperedge *] edges):
 *         self._edges = edges
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyEdges_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyEdges_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_2__getitem__(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_v_self), ((PyObject *)__pyx_v_item));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":38
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Edge().init(self._edges[item], self._graph)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hypergraph.pyx":39
 * 
 *     def __getitem__(self, item):
 *         return Edge().init(self._edges[item], self._graph)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsSize_t(__pyx_v_item); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_v_self->_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *)((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_1), (__pyx_v_self->_edges[__pyx_t_2]), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph._LazyEdges.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyEdges_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyEdges_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_4__iter__(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pydecode_10hypergraph_10_LazyEdges_8__iter___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pydecode/hypergraph.pyx":42
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_8__iter___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_8pydecode_10hypergraph_10_LazyEdges_8__iter___2generator, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyEdges.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pydecode_10hypergraph_10_LazyEdges_8__iter___2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<Hyperedge const *>::iterator __pyx_t_1;
  std::vector<Hyperedge const *> *__pyx_t_2;
  Hyperedge const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = &__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_edges;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_edge = __pyx_t_3;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_graph);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *)((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4), __pyx_cur_scope->__pyx_v_edge, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_5))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "pydecode/hypergraph.pyx":41
 *         return Edge().init(self._edges[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyEdges_4__iter__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct____iter__(__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "pydecode/hypergraph.pyx":42
 * 
 *     def __iter__(self):
 *         return (Edge().init(edge, self._graph) for edge in self._edges)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_8__iter___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph._LazyEdges.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_6__len__(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":44
 *         return (Edge().init(edge, self._graph) for edge in self._edges)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._edges.size()
 * 
 */

static Py_ssize_t __pyx_pf_8pydecode_10hypergraph_10_LazyEdges_6__len__(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pydecode/hypergraph.pyx":45
 * 
 *     def __len__(self):
 *         return self._edges.size()             # <<<<<<<<<<<<<<
 * 
 * cdef class _LazyNodes:
 */
  __pyx_r = __pyx_v_self->_edges.size();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_graph = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyNodes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyNodes___init__(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_v_self), __pyx_v_graph);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":48
 * 
 * cdef class _LazyNodes:
 *     def __init__(self, graph):             # <<<<<<<<<<<<<<
 *         self._graph = graph
 * 
 */

static int __pyx_pf_8pydecode_10hypergraph_10_LazyNodes___init__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self, PyObject *__pyx_v_graph) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/hypergraph.pyx":49
 * cdef class _LazyNodes:
 *     def __init__(self, graph):
 *         self._graph = graph             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):
 */
  if (!(likely(((__pyx_v_graph) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_graph, __pyx_ptype_8pydecode_10hypergraph_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_graph);
  __Pyx_GIVEREF(__pyx_v_graph);
  __Pyx_GOTREF(__pyx_v_self->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_v_self->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_graph);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyNodes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":51
 *         self._graph = graph
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):             # <<<<<<<<<<<<<<
 *         self._nodes = nodes
 *         return self
 */

static PyObject *__pyx_f_8pydecode_10hypergraph_10_LazyNodes_init(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self, std::vector<Hypernode const *> __pyx_v_nodes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":52
 * 
 *     cdef init(self, vector[const CHypernode *] nodes):
 *         self._nodes = nodes             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_nodes = __pyx_v_nodes;

  /* "pydecode/hypergraph.pyx":53
 *     cdef init(self, vector[const CHypernode *] nodes):
 *         self._nodes = nodes
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyNodes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyNodes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_2__getitem__(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_v_self), ((PyObject *)__pyx_v_item));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":55
 *         return self
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return Node().init(self._nodes[item], self._graph)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_2__getitem__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hypergraph.pyx":56
 * 
 *     def __getitem__(self, item):
 *         return Node().init(self._nodes[item], self._graph)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsSize_t(__pyx_v_item); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((PyObject *)__pyx_v_self->_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1), (__pyx_v_self->_nodes[__pyx_t_2]), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph._LazyNodes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyNodes_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10_LazyNodes_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_4__iter__(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8pydecode_10hypergraph_10_LazyNodes_8__iter___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "pydecode/hypergraph.pyx":59
 * 
 *     def __iter__(self):
 *         return (Node().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_8__iter___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_8pydecode_10hypergraph_10_LazyNodes_8__iter___2generator1, (PyObject *) __pyx_cur_scope); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph._LazyNodes.__iter__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8pydecode_10hypergraph_10_LazyNodes_8__iter___2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<Hypernode const *>::iterator __pyx_t_1;
  std::vector<Hypernode const *> *__pyx_t_2;
  Hypernode const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  __pyx_t_2 = &__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_nodes;
  __pyx_t_1 = __pyx_t_2->begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_t_2->end())) break;
    __pyx_t_3 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_node = __pyx_t_3;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->_graph);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_4), __pyx_cur_scope->__pyx_v_node, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_5))); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "pydecode/hypergraph.pyx":58
 *         return Node().init(self._nodes[item], self._graph)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return (Node().init(node, self._graph) for node in self._nodes)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10_LazyNodes_4__iter__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(__pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "pydecode/hypergraph.pyx":59
 * 
 *     def __iter__(self):
 *         return (Node().init(node, self._graph) for node in self._nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_8__iter___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph._LazyNodes.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static Py_ssize_t __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_6__len__(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":61
 *         return (Node().init(node, self._graph) for node in self._nodes)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._nodes.size()
 * 
 */

static Py_ssize_t __pyx_pf_8pydecode_10hypergraph_10_LazyNodes_6__len__(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "pydecode/hypergraph.pyx":62
 * 
 *     def __len__(self):
 *         return self._nodes.size()             # <<<<<<<<<<<<<<
 * 
 * cdef class Hypergraph:
 */
  __pyx_r = __pyx_v_self->_nodes.size();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph___cinit__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":83
 * 
 *     """
 *     def __cinit__(Hypergraph self):             # <<<<<<<<<<<<<<
 *         """
 *         Create a new hypergraph.
 */

static int __pyx_pf_8pydecode_10hypergraph_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/hypergraph.pyx":87
 *         Create a new hypergraph.
 *         """
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self.labeling = None
 *         self._cached_edges = None
 */
  __pyx_v_self->thisptr = NULL;

  /* "pydecode/hypergraph.pyx":88
 *         """
 *         self.thisptr = NULL
 *         self.labeling = None             # <<<<<<<<<<<<<<
 *         self._cached_edges = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->labeling));
  __pyx_v_self->labeling = ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)Py_None);

  /* "pydecode/hypergraph.pyx":89
 *         self.thisptr = NULL
 *         self.labeling = None
 *         self._cached_edges = None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_cached_edges);
  __Pyx_DECREF(__pyx_v_self->_cached_edges);
  __pyx_v_self->_cached_edges = Py_None;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8pydecode_10hypergraph_10Hypergraph_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10hypergraph_10Hypergraph_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10hypergraph_10Hypergraph_2__dealloc__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":91
 *         self._cached_edges = None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 */

static void __pyx_pf_8pydecode_10hypergraph_10Hypergraph_2__dealloc__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/hypergraph.pyx":92
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pydecode/hypergraph.pyx":93
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1             # <<<<<<<<<<<<<<
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr
 */
    __pyx_t_2 = __pyx_v_self->thisptr->id();
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_2, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_InPlaceSubtract(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_SetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_2, __pyx_t_4, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/hypergraph.pyx":94
 *         if self.thisptr is not NULL:
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:             # <<<<<<<<<<<<<<
 *                 del self.thisptr
 *                 self.thisptr = NULL
 */
    __pyx_t_2 = __pyx_v_self->thisptr->id();
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_2, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "pydecode/hypergraph.pyx":95
 *             _hypergraph_registry_counts[self.thisptr.id()] -= 1
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr             # <<<<<<<<<<<<<<
 *                 self.thisptr = NULL
 * 
 */
      delete __pyx_v_self->thisptr;

      /* "pydecode/hypergraph.pyx":96
 *             if _hypergraph_registry_counts[self.thisptr.id()] == 0:
 *                 del self.thisptr
 *                 self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef Hypergraph init(self, const CHypergraph *ptr,
 */
      __pyx_v_self->thisptr = NULL;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":98
 *                 self.thisptr = NULL
 * 
 *     cdef Hypergraph init(self, const CHypergraph *ptr,             # <<<<<<<<<<<<<<
 *                          Labeling labeling):
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 */

static struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_f_8pydecode_10hypergraph_10Hypergraph_init(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self, Hypergraph const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Labeling *__pyx_v_labeling) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":101
 *                          Labeling labeling):
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 *         assert self.thisptr is NULL             # <<<<<<<<<<<<<<
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:
 *             _hypergraph_registry_counts[ptr.id()] += 1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_self->thisptr == NULL) != 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":102
 *         #assert ptr.id() in _hypergraph_registry[ptr.id()]
 *         assert self.thisptr is NULL
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:             # <<<<<<<<<<<<<<
 *             _hypergraph_registry_counts[ptr.id()] += 1
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_n_s__get); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_ptr->id()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "pydecode/hypergraph.pyx":103
 *         assert self.thisptr is NULL
 *         if _hypergraph_registry_counts.get(ptr.id(), 0) > 0:
 *             _hypergraph_registry_counts[ptr.id()] += 1             # <<<<<<<<<<<<<<
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1
 */
    __pyx_t_5 = __pyx_v_ptr->id();
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_5, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_SetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_5, __pyx_t_2, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/hypergraph.pyx":105
 *             _hypergraph_registry_counts[ptr.id()] += 1
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1             # <<<<<<<<<<<<<<
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling
 */
    __pyx_t_5 = __pyx_v_ptr->id();
    if (__Pyx_SetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_5, __pyx_int_1, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":106
 *         else:
 *             _hypergraph_registry_counts[ptr.id()] = 1
 *         self.thisptr = <CHypergraph *> ptr             # <<<<<<<<<<<<<<
 *         self.labeling = labeling
 *         return self
 */
  __pyx_v_self->thisptr = ((Hypergraph *)__pyx_v_ptr);

  /* "pydecode/hypergraph.pyx":107
 *             _hypergraph_registry_counts[ptr.id()] = 1
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_labeling));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_labeling));
  __Pyx_GOTREF(__pyx_v_self->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->labeling));
  __pyx_v_self->labeling = __pyx_v_labeling;

  /* "pydecode/hypergraph.pyx":108
 *         self.thisptr = <CHypergraph *> ptr
 *         self.labeling = labeling
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def builder(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5builder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_10Hypergraph_4builder[] = "Hypergraph.builder(self)\n\n        builder()\n\n        The builder for the hypergraph ::\n\n           >> hypergraph = Hypergraph()\n           >> with hypergraph.builder() as b:\n           >>    b.add_node()\n\n        Returns\n        ---------------------\n        :py:class:`GraphBuilder`\n        ";
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5builder(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("builder (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph_4builder(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":110
 *         return self
 * 
 *     def builder(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         builder()
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_4builder(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("builder", 0);

  /* "pydecode/hypergraph.pyx":124
 *         :py:class:`GraphBuilder`
 *         """
 *         self.thisptr = new CHypergraph()             # <<<<<<<<<<<<<<
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1
 */
  __pyx_v_self->thisptr = new Hypergraph();

  /* "pydecode/hypergraph.pyx":126
 *         self.thisptr = new CHypergraph()
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1             # <<<<<<<<<<<<<<
 *         return GraphBuilder().init(self, self.thisptr)
 * 
 */
  __pyx_t_1 = __pyx_v_self->thisptr->id();
  if (__Pyx_SetItemInt(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, __pyx_t_1, __pyx_int_1, sizeof(int), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hypergraph.pyx":127
 *         #_hypergraph_registry[self.thisptr.id()] = self
 *         _hypergraph_registry_counts[self.thisptr.id()] = 1
 *         return GraphBuilder().init(self, self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     property nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_GraphBuilder)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder *)((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_t_2), __pyx_v_self, __pyx_v_self->thisptr)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.builder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph_5nodes___get__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":130
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyNodes(self).init(self.thisptr.nodes())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_5nodes___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":131
 *     property nodes:
 *         def __get__(self):
 *             return _LazyNodes(self).init(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 * 
 *     property root:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph__LazyNodes)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *)((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_t_2), __pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_4root_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_4root_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph_4root___get__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":134
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Node().init(self.thisptr.root(), self)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_4root___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":135
 *     property root:
 *         def __get__(self):
 *             return Node().init(self.thisptr.root(), self)             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1), __pyx_v_self->thisptr->root(), __pyx_v_self)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.root.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph_5edges___get__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":138
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":139
 *     property edges:
 *         def __get__(self):
 *             return _LazyEdges(self).init(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph__LazyEdges)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *)((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_t_2), __pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_10Hypergraph_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_10Hypergraph_6__str__(((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":141
 *             return _LazyEdges(self).init(self.thisptr.edges())
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         s = "Hypergraph: Edges: %s Nodes: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_10Hypergraph_6__str__(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/hypergraph.pyx":142
 * 
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Nodes: %s" % (len(self.edges),             # <<<<<<<<<<<<<<
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__edges); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/hypergraph.pyx":143
 *     def __str__(self):
 *         s = "Hypergraph: Edges: %s Nodes: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"             # <<<<<<<<<<<<<<
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__nodes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_v_s = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pydecode/hypergraph.pyx":144
 *         s = "Hypergraph: Edges: %s Nodes: %s" % (len(self.edges),
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"             # <<<<<<<<<<<<<<
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__root); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s__id); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_8), __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_4), ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_s, ((PyObject *)__pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pydecode/hypergraph.pyx":145
 *                                                  len(self.nodes)) + "\n"
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:             # <<<<<<<<<<<<<<
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__edges); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pydecode/hypergraph.pyx":146
 *         s += "Root %s" % (self.root.id) + "\n"
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))             # <<<<<<<<<<<<<<
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__label); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_edge);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_edge);
    __Pyx_GIVEREF(__pyx_v_edge);
    __pyx_t_7 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_4 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_9), ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_s, ((PyObject *)__pyx_t_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pydecode/hypergraph.pyx":147
 *         for edge in self.edges:
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)             # <<<<<<<<<<<<<<
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__head); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s__id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_10), __pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_s, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pydecode/hypergraph.pyx":148
 *             s += " %s %s \n" % (edge.id, self.label(edge))
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:             # <<<<<<<<<<<<<<
 *                 s += " %d " % (node.id)
 *             s += "\n"
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__tail); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_6 = __pyx_t_7; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_7); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_6);
        if (unlikely(!__pyx_t_7)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pydecode/hypergraph.pyx":149
 *             s += "\t%d -> " % (edge.head.id)
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)             # <<<<<<<<<<<<<<
 *             s += "\n"
 *         return s
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s__id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_11), __pyx_t_7); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_v_s, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_7);
      __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pydecode/hypergraph.pyx":150
 *             for node in edge.tail:
 *                 s += " %d " % (node.id)
 *             s += "\n"             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_s, ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_6);
    __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/hypergraph.pyx":151
 *                 s += " %d " % (node.id)
 *             s += "\n"
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class GraphBuilder:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.hypergraph.Hypergraph.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_12GraphBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_12GraphBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_12GraphBuilder___init__(((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":169
 *     """
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

static int __pyx_pf_8pydecode_10hypergraph_12GraphBuilder___init__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":173
 *         pass
 * 
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.graph = hyper
 */

static struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_f_8pydecode_10hypergraph_12GraphBuilder_init(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_hyper, Hypergraph *__pyx_v_ptr) {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":174
 * 
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = hyper
 *         self.edge_labels = []
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/hypergraph.pyx":175
 *     cdef GraphBuilder init(self, Hypergraph hyper, CHypergraph *ptr):
 *         self.thisptr = ptr
 *         self.graph = hyper             # <<<<<<<<<<<<<<
 *         self.edge_labels = []
 *         self.node_labels = []
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_hyper;

  /* "pydecode/hypergraph.pyx":176
 *         self.thisptr = ptr
 *         self.graph = hyper
 *         self.edge_labels = []             # <<<<<<<<<<<<<<
 *         self.node_labels = []
 *         self.started = False
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->edge_labels);
  __Pyx_DECREF(__pyx_v_self->edge_labels);
  __pyx_v_self->edge_labels = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":177
 *         self.graph = hyper
 *         self.edge_labels = []
 *         self.node_labels = []             # <<<<<<<<<<<<<<
 *         self.started = False
 *         return self
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":178
 *         self.edge_labels = []
 *         self.node_labels = []
 *         self.started = False             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":179
 *         self.node_labels = []
 *         self.started = False
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_12GraphBuilder_2__enter__[] = "GraphBuilder.__enter__(self)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_3__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_12GraphBuilder_2__enter__(((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":181
 *         return self
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         # """
 *         # Start building the hypergraph.
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_2__enter__(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "pydecode/hypergraph.pyx":187
 *         # Use as with hypergraph.builder() as b:
 *         # """
 *         self.started = True             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":188
 *         # """
 *         self.started = True
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exception, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_12GraphBuilder_4__exit__[] = "GraphBuilder.__exit__(self, exception, b, c)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_5__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exception = 0;
  CYTHON_UNUSED PyObject *__pyx_v_b = 0;
  CYTHON_UNUSED PyObject *__pyx_v_c = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__exception,&__pyx_n_s__b,&__pyx_n_s__c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__exception)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exception = values[0];
    __pyx_v_b = values[1];
    __pyx_v_c = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_12GraphBuilder_4__exit__(((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_v_self), __pyx_v_exception, __pyx_v_b, __pyx_v_c);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":190
 *         return self
 * 
 *     def __exit__(self, exception, b, c):             # <<<<<<<<<<<<<<
 *         # """End building the hypergraph
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_4__exit__(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c) {
  PyObject *__pyx_v_final_edge_labels = NULL;
  PyObject *__pyx_v_final_node_labels = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "pydecode/hypergraph.pyx":195
 *         # Automatically called when exiting with block.
 *         # """
 *         if exception:             # <<<<<<<<<<<<<<
 *             return False
 *         self.started = False
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_exception); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pydecode/hypergraph.pyx":196
 *         # """
 *         if exception:
 *             return False             # <<<<<<<<<<<<<<
 *         self.started = False
 *         self.thisptr.finish()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":197
 *         if exception:
 *             return False
 *         self.started = False             # <<<<<<<<<<<<<<
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->started);
  __Pyx_DECREF(__pyx_v_self->started);
  __pyx_v_self->started = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":198
 *             return False
 *         self.started = False
 *         self.thisptr.finish()             # <<<<<<<<<<<<<<
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 */
  try {
    __pyx_v_self->thisptr->finish();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "pydecode/hypergraph.pyx":199
 *         self.started = False
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()             # <<<<<<<<<<<<<<
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 * 
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->edges().size()<0) ? 0:__pyx_v_self->thisptr->edges().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_final_edge_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":200
 *         self.thisptr.finish()
 *         final_edge_labels = [None] * self.thisptr.edges().size()
 *         final_node_labels = [None] * self.thisptr.nodes().size()             # <<<<<<<<<<<<<<
 * 
 *         for node, t in self.node_labels:
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->nodes().size()<0) ? 0:__pyx_v_self->thisptr->nodes().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_final_node_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":202
 *         final_node_labels = [None] * self.thisptr.nodes().size()
 * 
 *         for node, t in self.node_labels:             # <<<<<<<<<<<<<<
 *             if not node._removed():
 *                 final_node_labels[node.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->node_labels) || PyTuple_CheckExact(__pyx_v_self->node_labels)) {
    __pyx_t_2 = __pyx_v_self->node_labels; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->node_labels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pydecode/hypergraph.pyx":203
 * 
 *         for node, t in self.node_labels:
 *             if not node._removed():             # <<<<<<<<<<<<<<
 *                 final_node_labels[node.id] = t
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s___removed); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = ((!__pyx_t_1) != 0);
    if (__pyx_t_10) {

      /* "pydecode/hypergraph.pyx":204
 *         for node, t in self.node_labels:
 *             if not node._removed():
 *                 final_node_labels[node.id] = t             # <<<<<<<<<<<<<<
 * 
 *         for edge, t in self.edge_labels:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s__id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (PyObject_SetItem(((PyObject *)__pyx_v_final_node_labels), __pyx_t_7, __pyx_v_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":206
 *                 final_node_labels[node.id] = t
 * 
 *         for edge, t in self.edge_labels:             # <<<<<<<<<<<<<<
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->edge_labels) || PyTuple_CheckExact(__pyx_v_self->edge_labels)) {
    __pyx_t_2 = __pyx_v_self->edge_labels; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->edge_labels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_7 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pydecode/hypergraph.pyx":207
 * 
 *         for edge, t in self.edge_labels:
 *             if not edge._removed():             # <<<<<<<<<<<<<<
 *                 final_edge_labels[edge.id] = t
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s___removed); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = ((!__pyx_t_10) != 0);
    if (__pyx_t_1) {

      /* "pydecode/hypergraph.pyx":208
 *         for edge, t in self.edge_labels:
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t             # <<<<<<<<<<<<<<
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,
 *                                        final_edge_labels)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyObject_SetItem(((PyObject *)__pyx_v_final_edge_labels), __pyx_t_6, __pyx_v_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L13;
    }
    __pyx_L13:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":210
 *                 final_edge_labels[edge.id] = t
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,
 *                                        final_edge_labels)             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, edges=[], label=None):
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_final_node_labels));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_final_node_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_final_node_labels));
  __Pyx_INCREF(((PyObject *)__pyx_v_final_edge_labels));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_final_edge_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_final_edge_labels));
  __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Labeling)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":209
 *             if not edge._removed():
 *                 final_edge_labels[edge.id] = t
 *         self.graph.labeling = Labeling(self.graph, final_node_labels,             # <<<<<<<<<<<<<<
 *                                        final_edge_labels)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->graph->labeling);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph->labeling));
  __pyx_v_self->graph->labeling = ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)__pyx_t_6);
  __pyx_t_6 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_final_edge_labels);
  __Pyx_XDECREF(__pyx_v_final_node_labels);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_7add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_12GraphBuilder_6add_node[] = "GraphBuilder.add_node(self, edges=[], label=None)\n\n        add_node(edges=[], label=None)\n\n        Add a node to the hypergraph.\n\n        Parameters\n        ------------\n\n        edges :\n           An iterator where each of the items is of the form\n           ([v_2, v_3..], label)  where v_2 ... are :py:class:`Node`s and\n           label is an edge label of any type.\n\n        label : any\n           Optional label for the node.\n\n\n        Returns\n        --------------\n        :py:class:`Node`\n        ";
static PyObject *__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_7add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__edges,&__pyx_n_s__label,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k_12;

    /* "pydecode/hypergraph.pyx":212
 *                                        final_edge_labels)
 * 
 *     def add_node(self, edges=[], label=None):             # <<<<<<<<<<<<<<
 *         """
 *         add_node(edges=[], label=None)
 */
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__edges);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
    __pyx_v_label = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_12GraphBuilder_6add_node(((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)__pyx_v_self), __pyx_v_edges, __pyx_v_label);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pydecode_10hypergraph_12GraphBuilder_6add_node(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label) {
  Hypernode const *__pyx_v_nodeptr;
  std::vector<Hypernode const *> __pyx_v_tail_node_ptrs;
  Hyperedge const *__pyx_v_edgeptr;
  PyObject *__pyx_v_edge_cons = NULL;
  PyObject *__pyx_v_tail_nodes = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_tail_node = NULL;
  struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_node = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  Hyperedge const *__pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "pydecode/hypergraph.pyx":235
 *         """
 * 
 *         if not self.started:             # <<<<<<<<<<<<<<
 *             raise HypergraphConstructionException(
 *                 "Must constuct graph in 'with' block.")
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->started); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":236
 * 
 *         if not self.started:
 *             raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                 "Must constuct graph in 'with' block.")
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_13); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":242
 *         cdef vector[const CHypernode *] tail_node_ptrs
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:             # <<<<<<<<<<<<<<
 *             nodeptr = self.thisptr.add_terminal_node()
 *         else:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_edges, ((PyObject *)__pyx_t_4), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":243
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:
 *             nodeptr = self.thisptr.add_terminal_node()             # <<<<<<<<<<<<<<
 *         else:
 *             nodeptr = self.thisptr.start_node()
 */
    __pyx_v_nodeptr = __pyx_v_self->thisptr->add_terminal_node();
    goto __pyx_L4;
  }
  /*else*/ {

    /* "pydecode/hypergraph.pyx":245
 *             nodeptr = self.thisptr.add_terminal_node()
 *         else:
 *             nodeptr = self.thisptr.start_node()             # <<<<<<<<<<<<<<
 *             for edge_cons in edges:
 *                 try:
 */
    __pyx_v_nodeptr = __pyx_v_self->thisptr->start_node();

    /* "pydecode/hypergraph.pyx":246
 *         else:
 *             nodeptr = self.thisptr.start_node()
 *             for edge_cons in edges:             # <<<<<<<<<<<<<<
 *                 try:
 *                     tail_nodes, t = edge_cons
 */
    if (PyList_CheckExact(__pyx_v_edges) || PyTuple_CheckExact(__pyx_v_edges)) {
      __pyx_t_3 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_3)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_edge_cons, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pydecode/hypergraph.pyx":247
 *             nodeptr = self.thisptr.start_node()
 *             for edge_cons in edges:
 *                 try:             # <<<<<<<<<<<<<<
 *                     tail_nodes, t = edge_cons
 *                 except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "pydecode/hypergraph.pyx":248
 *             for edge_cons in edges:
 *                 try:
 *                     tail_nodes, t = edge_cons             # <<<<<<<<<<<<<<
 *                 except:
 *                     raise HypergraphConstructionException(
 */
          if ((likely(PyTuple_CheckExact(__pyx_v_edge_cons))) || (PyList_CheckExact(__pyx_v_edge_cons))) {
            PyObject* sequence = __pyx_v_edge_cons;
            #if CYTHON_COMPILING_IN_CPYTHON
            Py_ssize_t size = Py_SIZE(sequence);
            #else
            Py_ssize_t size = PySequence_Size(sequence);
            #endif
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            }
            #if CYTHON_COMPILING_IN_CPYTHON
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_10);
            #else
            __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else
          {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_v_edge_cons); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
            index = 0; __pyx_t_4 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_4)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_4);
            index = 1; __pyx_t_10 = __pyx_t_12(__pyx_t_11); if (unlikely(!__pyx_t_10)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_10);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
            __pyx_L16_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_tail_nodes, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_10);
          __pyx_t_10 = 0;
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "pydecode/hypergraph.pyx":249
 *                 try:
 *                     tail_nodes, t = edge_cons
 *                 except:             # <<<<<<<<<<<<<<
 *                     raise HypergraphConstructionException(
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 */
        /*except:*/ {
          __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_4, &__pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_11);

          /* "pydecode/hypergraph.pyx":250
 *                     tail_nodes, t = edge_cons
 *                 except:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))
 */
          __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_13); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_13);

          /* "pydecode/hypergraph.pyx":252
 *                     raise HypergraphConstructionException(
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))             # <<<<<<<<<<<<<<
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(
 */
          __pyx_t_14 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_17), __pyx_v_edge_cons); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_14));
          __pyx_t_15 = PyNumber_Add(((PyObject *)__pyx_kp_s_16), ((PyObject *)__pyx_t_14)); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(((PyObject *)__pyx_t_15));
          __Pyx_DECREF(((PyObject *)__pyx_t_14)); __pyx_t_14 = 0;
          __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_14);
          PyTuple_SET_ITEM(__pyx_t_14, 0, ((PyObject *)__pyx_t_15));
          __Pyx_GIVEREF(((PyObject *)__pyx_t_15));
          __pyx_t_15 = 0;
          __pyx_t_15 = PyObject_Call(__pyx_t_13, ((PyObject *)__pyx_t_14), NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(((PyObject *)__pyx_t_14)); __pyx_t_14 = 0;
          __Pyx_Raise(__pyx_t_15, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }

      /* "pydecode/hypergraph.pyx":253
 *                         "Edges must be pairs of the form (tail_nodes, label)."
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:             # <<<<<<<<<<<<<<
 *                     raise HypergraphConstructionException(
 *                         "An edge must have at least one tail node.")
 */
      __pyx_t_16 = PyObject_Length(__pyx_v_tail_nodes); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = ((__pyx_t_16 == 0) != 0);
      if (__pyx_t_2) {

        /* "pydecode/hypergraph.pyx":254
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "An edge must have at least one tail node.")
 * 
 */
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_13); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = PyObject_Call(__pyx_t_11, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L19;
      }
      __pyx_L19:;

      /* "pydecode/hypergraph.pyx":257
 *                         "An edge must have at least one tail node.")
 * 
 *                 tail_node_ptrs.clear()             # <<<<<<<<<<<<<<
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 */
      __pyx_v_tail_node_ptrs.clear();

      /* "pydecode/hypergraph.pyx":258
 * 
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:             # <<<<<<<<<<<<<<
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 */
      if (PyList_CheckExact(__pyx_v_tail_nodes) || PyTuple_CheckExact(__pyx_v_tail_nodes)) {
        __pyx_t_4 = __pyx_v_tail_nodes; __Pyx_INCREF(__pyx_t_4); __pyx_t_16 = 0;
        __pyx_t_17 = NULL;
      } else {
        __pyx_t_16 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tail_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_17 = Py_TYPE(__pyx_t_4)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_17 && PyList_CheckExact(__pyx_t_4)) {
          if (__pyx_t_16 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_17 && PyTuple_CheckExact(__pyx_t_4)) {
          if (__pyx_t_16 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_16); __Pyx_INCREF(__pyx_t_11); __pyx_t_16++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_16); __pyx_t_16++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_11 = __pyx_t_17(__pyx_t_4);
          if (unlikely(!__pyx_t_11)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_tail_node, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "pydecode/hypergraph.pyx":259
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)             # <<<<<<<<<<<<<<
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 */
        __pyx_v_tail_node_ptrs.push_back(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_tail_node)->nodeptr);
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pydecode/hypergraph.pyx":260
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)             # <<<<<<<<<<<<<<
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()
 */
      try {
        __pyx_t_18 = __pyx_v_self->thisptr->add_edge(__pyx_v_tail_node_ptrs);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_edgeptr = __pyx_t_18;

      /* "pydecode/hypergraph.pyx":261
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))             # <<<<<<<<<<<<<<
 *             self.thisptr.end_node()
 *         cdef Node node = Node().init(nodeptr, self.graph)
 */
      __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = ((PyObject *)__pyx_v_self->graph);
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_10 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *)((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4), __pyx_v_edgeptr, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_11))); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_self->edge_labels, ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/hypergraph.pyx":262
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs)
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()             # <<<<<<<<<<<<<<
 *         cdef Node node = Node().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))
 */
    __pyx_v_self->thisptr->end_node();
  }
  __pyx_L4:;

  /* "pydecode/hypergraph.pyx":263
 *                 self.edge_labels.append((Edge().init(edgeptr, self.graph), t))
 *             self.thisptr.end_node()
 *         cdef Node node = Node().init(nodeptr, self.graph)             # <<<<<<<<<<<<<<
 *         self.node_labels.append((node, label))
 *         return node
 */
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_10);
  __pyx_t_11 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_3)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_3), __pyx_v_nodeptr, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_10))); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_node = ((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "pydecode/hypergraph.pyx":264
 *             self.thisptr.end_node()
 *         cdef Node node = Node().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  PyTuple_SET_ITEM(__pyx_t_11, 0, ((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_INCREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  __pyx_t_10 = __Pyx_PyObject_Append(__pyx_v_self->node_labels, ((PyObject *)__pyx_t_11)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(((PyObject *)__pyx_t_11)); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "pydecode/hypergraph.pyx":265
 *         cdef Node node = Node().init(nodeptr, self.graph)
 *         self.node_labels.append((node, label))
 *         return node             # <<<<<<<<<<<<<<
 * 
 * cdef class Node:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("pydecode.hypergraph.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge_cons);
  __Pyx_XDECREF(__pyx_v_tail_nodes);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_tail_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":287
 *     """
 * 
 *     cdef Node init(self, const CHypernode *nodeptr,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr
 */

static struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_f_8pydecode_10hypergraph_4Node_init(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self, Hypernode const *__pyx_v_nodeptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":289
 *     cdef Node init(self, const CHypernode *nodeptr,
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->nodeptr = __pyx_v_nodeptr;

  /* "pydecode/hypergraph.pyx":290
 *                    Hypergraph graph):
 *         self.nodeptr = nodeptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/hypergraph.pyx":291
 *         self.nodeptr = nodeptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_Node *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8pydecode_10hypergraph_4Node_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10hypergraph_4Node_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10hypergraph_4Node___dealloc__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":293
 *         return self
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static void __pyx_pf_8pydecode_10hypergraph_4Node___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_10hypergraph_4Node_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_10hypergraph_4Node_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_2__hash__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":296
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

static Py_hash_t __pyx_pf_8pydecode_10hypergraph_4Node_2__hash__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/hypergraph.pyx":297
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_4__repr__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":299
 *         return self.id
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "NODE:%d" % (self.nodeptr.id())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_4__repr__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pydecode/hypergraph.pyx":300
 * 
 *     def __repr__(self):
 *         return "NODE:%d" % (self.nodeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_20), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_2id___get__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":303
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_2id___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":304
 *     property id:
 *         def __get__(self):
 *             assert self.nodeptr.id() != -1, "Bad node id."             # <<<<<<<<<<<<<<
 *             return self.nodeptr.id()
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_self->nodeptr->id() != -1) != 0))) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_21));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":305
 *         def __get__(self):
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_5edges___get__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":308
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_edges(self.nodeptr.edges(), self.graph)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":309
 *     property edges:
 *         def __get__(self):
 *             return convert_edges(self.nodeptr.edges(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property is_terminal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10hypergraph_convert_edges(__pyx_v_self->nodeptr->edges(), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_11is_terminal___get__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":312
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.nodeptr.edges().size() == 0)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_11is_terminal___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":313
 *     property is_terminal:
 *         def __get__(self):
 *             return (self.nodeptr.edges().size() == 0)             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->edges().size() == 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.is_terminal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_5label___get__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":316
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_5label___get__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":317
 *     property label:
 *         def __get__(self):
 *             return self.graph.labeling[self]             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->graph->labeling), ((PyObject *)__pyx_v_self)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_6__str__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":319
 *             return self.graph.labeling[self]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.nodeptr.id())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_6__str__(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/hypergraph.pyx":320
 * 
 *     def __str__(self):
 *         return str(self.nodeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Node.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_4Node_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_4Node_9__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_8__cinit__(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":322
 *         return str(self.nodeptr.id())
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

static int __pyx_pf_8pydecode_10hypergraph_4Node_8__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_11_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_4Node_10_removed[] = "Node._removed(self)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Node_11_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Node_10_removed(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":326
 *         pass
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.nodeptr.id() == -1)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Node_10_removed(struct __pyx_obj_8pydecode_10hypergraph_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removed", 0);

  /* "pydecode/hypergraph.pyx":327
 * 
 *     def _removed(self):
 *         return (self.nodeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef class Edge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Node._removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge___cinit__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":347
 *     """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         ""
 *         pass
 */

static int __pyx_pf_8pydecode_10hypergraph_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_10hypergraph_4Edge_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_10hypergraph_4Edge_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_2__hash__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":351
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

static Py_hash_t __pyx_pf_8pydecode_10hypergraph_4Edge_2__hash__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/hypergraph.pyx":352
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8pydecode_10hypergraph_4Edge_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10hypergraph_4Edge_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10hypergraph_4Edge_4__dealloc__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":354
 *         return self.id
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static void __pyx_pf_8pydecode_10hypergraph_4Edge_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":357
 *         pass
 * 
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.edgeptr = ptr
 *         self.graph = graph
 */

static struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_f_8pydecode_10hypergraph_4Edge_init(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self, Hyperedge const *__pyx_v_ptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":358
 * 
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):
 *         self.edgeptr = ptr             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->edgeptr = __pyx_v_ptr;

  /* "pydecode/hypergraph.pyx":359
 *     cdef Edge init(self, const CHyperedge *ptr, Hypergraph graph):
 *         self.edgeptr = ptr
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/hypergraph.pyx":360
 *         self.edgeptr = ptr
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_6__repr__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":362
 *         return self
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "EDGE:%d" % (self.edgeptr.id())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_6__repr__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "pydecode/hypergraph.pyx":363
 * 
 *     def __repr__(self):
 *         return "EDGE:%d" % (self.edgeptr.id())             # <<<<<<<<<<<<<<
 * 
 *     property tail:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->edgeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_22), __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_4tail_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_4tail_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_4tail___get__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":366
 * 
 *     property tail:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return convert_nodes(self.edgeptr.tail_nodes(), self.graph)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_4tail___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":367
 *     property tail:
 *         def __get__(self):
 *             return convert_nodes(self.edgeptr.tail_nodes(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property head:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10hypergraph_convert_nodes(__pyx_v_self->edgeptr->tail_nodes(), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.tail.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_4head_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_4head_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_4head___get__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":370
 * 
 *     property head:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Node().init(self.edgeptr.head_node(), self.graph)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_4head___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":371
 *     property head:
 *         def __get__(self):
 *             return Node().init(self.edgeptr.head_node(), self.graph)             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_1), __pyx_v_self->edgeptr->head_node(), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.head.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_5label___get__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":374
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.graph.labeling[self]
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_5label___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":375
 *     property label:
 *         def __get__(self):
 *             return self.graph.labeling[self]             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_self->graph->labeling), ((PyObject *)__pyx_v_self)); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_2id___get__(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":378
 * 
 *     property id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_2id___get__(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":379
 *     property id:
 *         def __get__(self):
 *             assert self.edgeptr.id() != -1, "Bad edge id."             # <<<<<<<<<<<<<<
 *             return self.edgeptr.id()
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_self->edgeptr->id() != -1) != 0))) {
    PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_23));
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":380
 *         def __get__(self):
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()             # <<<<<<<<<<<<<<
 * 
 *     def _removed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->edgeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_9_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_4Edge_8_removed[] = "Edge._removed(self)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Edge_9_removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Edge_8_removed(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":382
 *             return self.edgeptr.id()
 * 
 *     def _removed(self):             # <<<<<<<<<<<<<<
 *         return (self.edgeptr.id() == -1)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Edge_8_removed(struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_removed", 0);

  /* "pydecode/hypergraph.pyx":383
 * 
 *     def _removed(self):
 *         return (self.edgeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->edgeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Edge._removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":385
 *         return (self.edgeptr.id() == -1)
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Edge().init(edge, graph) for edge in edges]
 */

static PyObject *__pyx_f_8pydecode_10hypergraph_convert_edges(std::vector<Hyperedge const *> __pyx_v_edges, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  Hyperedge const *__pyx_v_edge;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hyperedge const *>::iterator __pyx_t_2;
  Hyperedge const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_edges", 0);

  /* "pydecode/hypergraph.pyx":387
 * cdef convert_edges(vector[const CHyperedge *] edges,
 *                    Hypergraph graph):
 *     return [Edge().init(edge, graph) for edge in edges]             # <<<<<<<<<<<<<<
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_edges.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_edges.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_edge = __pyx_t_3;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge *)((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_t_4), __pyx_v_edge, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.hypergraph.convert_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":389
 *     return [Edge().init(edge, graph) for edge in edges]
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes,             # <<<<<<<<<<<<<<
 *                    Hypergraph graph):
 *     return [Node().init(node, graph) for node in nodes]
 */

static PyObject *__pyx_f_8pydecode_10hypergraph_convert_nodes(std::vector<Hypernode const *> __pyx_v_nodes, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  Hypernode const *__pyx_v_node;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hypernode const *>::iterator __pyx_t_2;
  Hypernode const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_nodes", 0);

  /* "pydecode/hypergraph.pyx":391
 * cdef convert_nodes(vector[const CHypernode *] nodes,
 *                    Hypergraph graph):
 *     return [Node().init(node, graph) for node in nodes]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_nodes.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_nodes.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_node = __pyx_t_3;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Node *)((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_4)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_t_4), __pyx_v_node, __pyx_v_graph)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pydecode.hypergraph.convert_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8pydecode_10hypergraph_4Path_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10hypergraph_4Path_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10hypergraph_4Path___dealloc__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":410
 *     """
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

static void __pyx_pf_8pydecode_10hypergraph_4Path___dealloc__(CYTHON_UNUSED struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/hypergraph.pyx":411
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_4Path_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_4Path_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_edges = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__edges,0};
    PyObject* values[2] = {0,0};

    /* "pydecode/hypergraph.pyx":413
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */
    values[0] = (PyObject *)((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None);
    values[1] = __pyx_k_24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__edges);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)values[0]);
    __pyx_v_edges = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_10hypergraph_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_2__cinit__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self), __pyx_v_graph, __pyx_v_edges);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_9__cinit___lambda1(PyObject *__pyx_self, PyObject *__pyx_v_e); /*proto*/
static PyMethodDef __pyx_mdef_8pydecode_10hypergraph_4Path_9__cinit___lambda1 = {__Pyx_NAMESTR("lambda1"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_4Path_9__cinit___lambda1, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_9__cinit___lambda1(PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_e));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":419
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)             # <<<<<<<<<<<<<<
 *         if graph and edges:
 *             for edge in edges:
 */

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__cinit__.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":413
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

static int __pyx_pf_8pydecode_10hypergraph_4Path_2__cinit__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_edges) {
  std::vector<Hyperedge const *> __pyx_v_cedges;
  PyObject *__pyx_v_edge = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Hyperpath *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/hypergraph.pyx":418
 * 
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/hypergraph.pyx":419
 *         cdef vector[const CHyperedge *] cedges
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)             # <<<<<<<<<<<<<<
 *         if graph and edges:
 *             for edge in edges:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_edges, __pyx_n_s__sort); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10hypergraph_4Path_9__cinit___lambda1, 0, __pyx_n_s_25, NULL, __pyx_n_s_26, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__key), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/hypergraph.pyx":420
 *         self.graph = graph
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:             # <<<<<<<<<<<<<<
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_graph)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_edges); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_t_5;
  } else {
    __pyx_t_6 = __pyx_t_4;
  }
  if (__pyx_t_6) {

    /* "pydecode/hypergraph.pyx":421
 *         edges.sort(key=lambda e: e.id)
 *         if graph and edges:
 *             for edge in edges:             # <<<<<<<<<<<<<<
 *                 cedges.push_back((<Edge>edge).edgeptr)
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 */
    if (PyList_CheckExact(__pyx_v_edges) || PyTuple_CheckExact(__pyx_v_edges)) {
      __pyx_t_3 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_3)) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_3)) {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pydecode/hypergraph.pyx":422
 *         if graph and edges:
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)             # <<<<<<<<<<<<<<
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 * 
 */
      __pyx_v_cedges.push_back(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge)->edgeptr);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pydecode/hypergraph.pyx":423
 *             for edge in edges:
 *                 cedges.push_back((<Edge>edge).edgeptr)
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)             # <<<<<<<<<<<<<<
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 */
    try {
      __pyx_t_9 = new Hyperpath(__pyx_v_graph->thisptr, __pyx_v_cedges);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->thisptr = __pyx_t_9;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":425
 *             self.thisptr = new CHyperpath(graph.thisptr, cedges)
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):             # <<<<<<<<<<<<<<
 *         self.thisptr = path
 *         self.graph = graph
 */

static struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_f_8pydecode_10hypergraph_4Path_init(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, Hyperpath const *__pyx_v_path, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_graph) {
  struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":426
 * 
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 *         self.thisptr = path             # <<<<<<<<<<<<<<
 *         self.graph = graph
 *         return self
 */
  __pyx_v_self->thisptr = __pyx_v_path;

  /* "pydecode/hypergraph.pyx":427
 *     cdef Path init(self, const CHyperpath *path, Hypergraph graph):
 *         self.thisptr = path
 *         self.graph = graph             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->graph));
  __pyx_v_self->graph = __pyx_v_graph;

  /* "pydecode/hypergraph.pyx":428
 *         self.thisptr = path
 *         self.graph = graph
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_Path *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_4__str__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":430
 *         return self
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_4__str__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self) {
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/hypergraph.pyx":431
 * 
 *     def __str__(self):
 *         return ":".join([str(edge) for edge in self.edges])             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, Edge edge):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_kp_s_27), __pyx_n_s__join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__edges); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_edge, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_edge);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_edge);
    __Pyx_GIVEREF(__pyx_v_edge);
    __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_4Path_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_4Path_6__contains__[] = "\n        Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8pydecode_10hypergraph_4Path_6__contains__;
#endif
static int __pyx_pw_8pydecode_10hypergraph_4Path_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_10hypergraph_Edge, 1, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_6__contains__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_edge));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":433
 *         return ":".join([str(edge) for edge in self.edges])
 * 
 *     def __contains__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         """
 *         Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?
 */

static int __pyx_pf_8pydecode_10hypergraph_4Path_6__contains__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Edge *__pyx_v_edge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "pydecode/hypergraph.pyx":437
 *         Is the edge in the hyperpath, i.e. :math:`y(e) = 1`?
 *         """
 *         return self.thisptr.has_edge(edge.edgeptr)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_r = __pyx_v_self->thisptr->has_edge(__pyx_v_edge->edgeptr);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_8__iter__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":439
 *         return self.thisptr.has_edge(edge.edgeptr)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_8__iter__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pydecode/hypergraph.pyx":440
 * 
 *     def __iter__(self):
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))             # <<<<<<<<<<<<<<
 * 
 *     cdef public equal(Path self, Path other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->graph);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8pydecode_10hypergraph_convert_edges(__pyx_v_self->thisptr->edges(), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":442
 *         return iter(convert_edges(self.thisptr.edges(), self.graph))
 * 
 *     cdef public equal(Path self, Path other):             # <<<<<<<<<<<<<<
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 */

PyObject *__pyx_f_8pydecode_10hypergraph_4Path_equal(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equal", 0);

  /* "pydecode/hypergraph.pyx":443
 * 
 *     cdef public equal(Path self, Path other):
 *         return self.thisptr.equal(deref(other.thisptr))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Path self, Path other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->equal((*__pyx_v_other->thisptr))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_11__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = PyInt_FromLong(__pyx_arg_op); if (unlikely(!__pyx_v_op)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_8pydecode_10hypergraph_Path, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10hypergraph_Path, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_10__richcmp__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_other), ((PyObject *)__pyx_v_op));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":445
 *         return self.thisptr.equal(deref(other.thisptr))
 * 
 *     def __richcmp__(Path self, Path other, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return self.equal(other)
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_10__richcmp__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "pydecode/hypergraph.pyx":446
 * 
 *     def __richcmp__(Path self, Path other, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return self.equal(other)
 *         if op == 3:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_op, __pyx_int_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":447
 *     def __richcmp__(Path self, Path other, op):
 *         if op == 2:
 *             return self.equal(other)             # <<<<<<<<<<<<<<
 *         if op == 3:
 *             return not self.equal(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *)__pyx_v_self->__pyx_vtab)->equal(__pyx_v_self, __pyx_v_other); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":448
 *         if op == 2:
 *             return self.equal(other)
 *         if op == 3:             # <<<<<<<<<<<<<<
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_op, __pyx_int_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":449
 *             return self.equal(other)
 *         if op == 3:
 *             return not self.equal(other)             # <<<<<<<<<<<<<<
 *         raise Exception("No inequality on paths.")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph_Path *)__pyx_v_self->__pyx_vtab)->equal(__pyx_v_self, __pyx_v_other); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/hypergraph.pyx":450
 *         if op == 3:
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_k_tuple_29), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5edges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5edges_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_5edges___get__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":453
 * 
 *     property edges:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyEdges(self.graph).init(self.thisptr.edges())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_5edges___get__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":454
 *     property edges:
 *         def __get__(self):
 *             return _LazyEdges(self.graph).init(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     property nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph__LazyEdges)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges *)((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)__pyx_t_2), __pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.edges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_4Path_5nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_4Path_5nodes___get__(((struct __pyx_obj_8pydecode_10hypergraph_Path *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":457
 * 
 *     property nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return _LazyNodes(self.graph).init(self.thisptr.nodes())
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_4Path_5nodes___get__(struct __pyx_obj_8pydecode_10hypergraph_Path *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":458
 *     property nodes:
 *         def __get__(self):
 *             return _LazyNodes(self.graph).init(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->graph));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->graph));
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph__LazyNodes)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes *)((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_t_2)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)__pyx_t_2), __pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.Path.nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_25HypergraphAccessException___init__[] = "HypergraphAccessException.__init__(self, value)";
static PyMethodDef __pyx_mdef_8pydecode_10hypergraph_25HypergraphAccessException_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_25HypergraphAccessException___init__)};
static PyObject *__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphAccessException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException___init__(__pyx_self, __pyx_v_self, __pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":462
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/hypergraph.pyx":463
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):
 *         self.value = value             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s__value, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphAccessException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_25HypergraphAccessException_2__str__[] = "HypergraphAccessException.__str__(self)";
static PyMethodDef __pyx_mdef_8pydecode_10hypergraph_25HypergraphAccessException_3__str__ = {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_3__str__, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_25HypergraphAccessException_2__str__)};
static PyObject *__pyx_pw_8pydecode_10hypergraph_25HypergraphAccessException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":465
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_25HypergraphAccessException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/hypergraph.pyx":466
 * 
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s__value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphAccessException.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_31HypergraphConstructionException___init__[] = "HypergraphConstructionException.__init__(self, value)";
static PyMethodDef __pyx_mdef_8pydecode_10hypergraph_31HypergraphConstructionException_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_31HypergraphConstructionException___init__)};
static PyObject *__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__self,&__pyx_n_s__value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphConstructionException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException___init__(__pyx_self, __pyx_v_self, __pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":470
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "pydecode/hypergraph.pyx":471
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):
 *         self.value = value             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s__value, __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphConstructionException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_31HypergraphConstructionException_2__str__[] = "HypergraphConstructionException.__str__(self)";
static PyMethodDef __pyx_mdef_8pydecode_10hypergraph_31HypergraphConstructionException_3__str__ = {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_3__str__, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_31HypergraphConstructionException_2__str__)};
static PyObject *__pyx_pw_8pydecode_10hypergraph_31HypergraphConstructionException_3__str__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException_2__str__(__pyx_self, ((PyObject *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":473
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_31HypergraphConstructionException_2__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "pydecode/hypergraph.pyx":474
 * 
 *     def __str__(self):
 *         return repr(self.value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s__value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphConstructionException.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap___cinit__(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":483
 * 
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

static int __pyx_pf_8pydecode_10hypergraph_13HypergraphMap___cinit__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/hypergraph.pyx":484
 *     """
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef HypergraphMap init(self,
 */
  __pyx_v_self->thisptr = NULL;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":486
 *         self.thisptr = NULL
 * 
 *     cdef HypergraphMap init(self,             # <<<<<<<<<<<<<<
 *                             const CHypergraphMap *thisptr,
 *                             Hypergraph domain_graph,
 */

static struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_f_8pydecode_10hypergraph_13HypergraphMap_init(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self, HypergraphMap const *__pyx_v_thisptr, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_domain_graph, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_range_graph) {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hypergraph.pyx":491
 *                             Hypergraph range_graph):
 * 
 *         self.thisptr = thisptr             # <<<<<<<<<<<<<<
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0
 */
  __pyx_v_self->thisptr = __pyx_v_thisptr;

  /* "pydecode/hypergraph.pyx":492
 * 
 *         self.thisptr = thisptr
 *         assert thisptr.domain_graph().id() >= 0             # <<<<<<<<<<<<<<
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_thisptr->domain_graph()->id() >= 0) != 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":493
 *         self.thisptr = thisptr
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0             # <<<<<<<<<<<<<<
 *         if range_graph is None:
 *             self.domain_graph = domain_graph
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_thisptr->range_graph()->id() >= 0) != 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":494
 *         assert thisptr.domain_graph().id() >= 0
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:             # <<<<<<<<<<<<<<
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_range_graph) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":495
 *         assert thisptr.range_graph().id() >= 0
 *         if range_graph is None:
 *             self.domain_graph = domain_graph             # <<<<<<<<<<<<<<
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_domain_graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_domain_graph));
    __Pyx_GOTREF(__pyx_v_self->domain_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_graph));
    __pyx_v_self->domain_graph = __pyx_v_domain_graph;

    /* "pydecode/hypergraph.pyx":496
 *         if range_graph is None:
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \             # <<<<<<<<<<<<<<
 *                 self.thisptr.domain_graph().id()
 *             self.range_graph = self._build_range_hypergraph()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS

    /* "pydecode/hypergraph.pyx":497
 *             self.domain_graph = domain_graph
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()             # <<<<<<<<<<<<<<
 *             self.range_graph = self._build_range_hypergraph()
 *         else:
 */
    if (unlikely(!((__pyx_v_self->domain_graph->thisptr->id() == __pyx_v_self->thisptr->domain_graph()->id()) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif

    /* "pydecode/hypergraph.pyx":498
 *             assert self.domain_graph.thisptr.id() == \
 *                 self.thisptr.domain_graph().id()
 *             self.range_graph = self._build_range_hypergraph()             # <<<<<<<<<<<<<<
 *         else:
 *             self.range_graph = range_graph
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_30); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_8pydecode_10hypergraph_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->range_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->range_graph));
    __pyx_v_self->range_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/hypergraph.pyx":500
 *             self.range_graph = self._build_range_hypergraph()
 *         else:
 *             self.range_graph = range_graph             # <<<<<<<<<<<<<<
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_range_graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_range_graph));
    __Pyx_GOTREF(__pyx_v_self->range_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->range_graph));
    __pyx_v_self->range_graph = __pyx_v_range_graph;

    /* "pydecode/hypergraph.pyx":501
 *         else:
 *             self.range_graph = range_graph
 *             assert self.range_graph.thisptr.id() == \             # <<<<<<<<<<<<<<
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS

    /* "pydecode/hypergraph.pyx":502
 *             self.range_graph = range_graph
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()             # <<<<<<<<<<<<<<
 *             self.domain_graph = self._build_domain_hypergraph()
 *         return self
 */
    if (unlikely(!((__pyx_v_self->range_graph->thisptr->id() == __pyx_v_self->thisptr->range_graph()->id()) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif

    /* "pydecode/hypergraph.pyx":503
 *             assert self.range_graph.thisptr.id() == \
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_31); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_8pydecode_10hypergraph_Hypergraph))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->domain_graph);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->domain_graph));
    __pyx_v_self->domain_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":504
 *                 self.thisptr.range_graph().id()
 *             self.domain_graph = self._build_domain_hypergraph()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def compose(self, HypergraphMap other):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_3compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_13HypergraphMap_2compose[] = "HypergraphMap.compose(self, HypergraphMap other)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_3compose(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_8pydecode_10hypergraph_HypergraphMap, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_2compose(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self), ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_other));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":506
 *         return self
 * 
 *     def compose(self, HypergraphMap other):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_2compose(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self, struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_other) {
  HypergraphMap *__pyx_v_newptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compose", 0);

  /* "pydecode/hypergraph.pyx":511
 *         """
 *         cdef CHypergraphMap *newptr = \
 *             self.thisptr.compose(deref(other.thisptr))             # <<<<<<<<<<<<<<
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,
 */
  __pyx_v_newptr = __pyx_v_self->thisptr->compose((*__pyx_v_other->thisptr));

  /* "pydecode/hypergraph.pyx":512
 *         cdef CHypergraphMap *newptr = \
 *             self.thisptr.compose(deref(other.thisptr))
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     other.domain_graph,
 *                                     self.range_graph)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/hypergraph.pyx":513
 *             self.thisptr.compose(deref(other.thisptr))
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,             # <<<<<<<<<<<<<<
 *                                     self.range_graph)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_other->domain_graph);
  __Pyx_INCREF(__pyx_t_2);

  /* "pydecode/hypergraph.pyx":514
 *         return HypergraphMap().init(newptr,
 *                                     other.domain_graph,
 *                                     self.range_graph)             # <<<<<<<<<<<<<<
 * 
 *     def invert(self):
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->range_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *)((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1), __pyx_v_newptr, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap.compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_5invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_13HypergraphMap_4invert[] = "HypergraphMap.invert(self)\n\n        TODO: fill in\n        ";
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_5invert(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_4invert(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":516
 *                                     self.range_graph)
 * 
 *     def invert(self):             # <<<<<<<<<<<<<<
 *         """
 *         TODO: fill in
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_4invert(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  HypergraphMap *__pyx_v_newptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("invert", 0);

  /* "pydecode/hypergraph.pyx":520
 *         TODO: fill in
 *         """
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()             # <<<<<<<<<<<<<<
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,
 */
  __pyx_v_newptr = __pyx_v_self->thisptr->invert();

  /* "pydecode/hypergraph.pyx":521
 *         """
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()
 *         return HypergraphMap().init(newptr,             # <<<<<<<<<<<<<<
 *                                     self.range_graph,
 *                                     self.domain_graph)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_HypergraphMap)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pydecode/hypergraph.pyx":522
 *         cdef CHypergraphMap *newptr = self.thisptr.invert()
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,             # <<<<<<<<<<<<<<
 *                                     self.domain_graph)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->range_graph);
  __Pyx_INCREF(__pyx_t_2);

  /* "pydecode/hypergraph.pyx":523
 *         return HypergraphMap().init(newptr,
 *                                     self.range_graph,
 *                                     self.domain_graph)             # <<<<<<<<<<<<<<
 * 
 *     property domain_hypergraph:
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->domain_graph);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap *)((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1)->__pyx_vtab)->init(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_t_1), __pyx_v_newptr, ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2), ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_3))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap.invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph___get__(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":526
 * 
 *     property domain_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.domain_graph
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph___get__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":527
 *     property domain_hypergraph:
 *         def __get__(self):
 *             return self.domain_graph             # <<<<<<<<<<<<<<
 * 
 *     property range_hypergraph:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->domain_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->domain_graph);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph___get__(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":530
 * 
 *     property range_hypergraph:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.range_graph
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph___get__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pydecode/hypergraph.pyx":531
 *     property range_hypergraph:
 *         def __get__(self):
 *             return self.range_graph             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->range_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->range_graph);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_6__dealloc__(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "pydecode/hypergraph.pyx":533
 *             return self.range_graph
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             del self.thisptr
 */

static void __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_6__dealloc__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pydecode/hypergraph.pyx":534
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pydecode/hypergraph.pyx":535
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_self->thisptr;

    /* "pydecode/hypergraph.pyx":536
 *         if self.thisptr is not NULL:
 *             del self.thisptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, obj):
 */
    __pyx_v_self->thisptr = NULL;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj); /*proto*/
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_8__getitem__(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self), ((PyObject *)__pyx_v_obj));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":538
 *             self.thisptr = NULL
 * 
 *     def __getitem__(self, obj):             # <<<<<<<<<<<<<<
 *         cdef const CHyperedge *edge
 *         cdef const CHypernode *node
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_8__getitem__(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self, PyObject *__pyx_v_obj) {
  Hyperedge const *__pyx_v_edge;
  Hypernode const *__pyx_v_node;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hypergraph.pyx":541
 *         cdef const CHyperedge *edge
 *         cdef const CHypernode *node
 *         if isinstance(obj, Edge):             # <<<<<<<<<<<<<<
 *             edge = self.thisptr.map((<Edge>obj).edgeptr)
 *             # assert edge.id() >= 0
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Edge)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":542
 *         cdef const CHypernode *node
 *         if isinstance(obj, Edge):
 *             edge = self.thisptr.map((<Edge>obj).edgeptr)             # <<<<<<<<<<<<<<
 *             # assert edge.id() >= 0
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 */
    __pyx_v_edge = __pyx_v_self->thisptr->map(((struct __pyx_obj_8pydecode_10hypergraph_Edge *)__pyx_v_obj)->edgeptr);

    /* "pydecode/hypergraph.pyx":545
 *             # assert edge.id() >= 0
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 *             if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                 return self.range_graph.edges[edge.id()]
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_edge != NULL) != 0);
    if (__pyx_t_2) {
      __pyx_t_1 = ((__pyx_v_edge->id() >= 0) != 0);
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_3 = __pyx_t_2;
    }
    if (__pyx_t_3) {

      /* "pydecode/hypergraph.pyx":546
 *             # assert edge.id() == self.range_graph.edges[edge.id()].id
 *             if edge != NULL and edge.id() >= 0:
 *                 return self.range_graph.edges[edge.id()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->range_graph), __pyx_n_s__edges); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_v_edge->id();
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_5, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "pydecode/hypergraph.pyx":548
 *                 return self.range_graph.edges[edge.id()]
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         if isinstance(obj, Node):
 *             node = self.thisptr.map((<Node>obj).nodeptr)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hypergraph.pyx":549
 *             else:
 *                 return None
 *         if isinstance(obj, Node):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map((<Node>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Node)); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":550
 *                 return None
 *         if isinstance(obj, Node):
 *             node = self.thisptr.map((<Node>obj).nodeptr)             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 return self.range_graph.nodes[node.id()]
 */
    __pyx_v_node = __pyx_v_self->thisptr->map(((struct __pyx_obj_8pydecode_10hypergraph_Node *)__pyx_v_obj)->nodeptr);

    /* "pydecode/hypergraph.pyx":551
 *         if isinstance(obj, Node):
 *             node = self.thisptr.map((<Node>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 return self.range_graph.nodes[node.id()]
 *             else:
 */
    __pyx_t_2 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_2) {
      __pyx_t_3 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_1 = __pyx_t_3;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "pydecode/hypergraph.pyx":552
 *             node = self.thisptr.map((<Node>obj).nodeptr)
 *             if node != NULL and node.id() >= 0:
 *                 return self.range_graph.nodes[node.id()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->range_graph), __pyx_n_s__nodes); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __pyx_v_node->id();
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_6, __pyx_t_5, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "pydecode/hypergraph.pyx":554
 *                 return self.range_graph.nodes[node.id()]
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(obj, Hypergraph):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;
    }
    __pyx_L6:;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pydecode/hypergraph.pyx":556
 *                 return None
 * 
 *         if isinstance(obj, Hypergraph):             # <<<<<<<<<<<<<<
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()
 *             return self.range_hypergraph
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, ((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Hypergraph)); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pydecode/hypergraph.pyx":557
 * 
 *         if isinstance(obj, Hypergraph):
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()             # <<<<<<<<<<<<<<
 *             return self.range_hypergraph
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s__thisptr); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s__id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__domain_hypergraph); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s__thisptr); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s__id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_7, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif

    /* "pydecode/hypergraph.pyx":558
 *         if isinstance(obj, Hypergraph):
 *             assert obj.thisptr.id() == self.domain_hypergraph.thisptr.id()
 *             return self.range_hypergraph             # <<<<<<<<<<<<<<
 * 
 *         return obj.project(self.range_graph, self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__range_hypergraph); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "pydecode/hypergraph.pyx":560
 *             return self.range_hypergraph
 * 
 *         return obj.project(self.range_graph, self)             # <<<<<<<<<<<<<<
 * 
 *     def _build_range_hypergraph(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s__project); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->range_graph));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self->range_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->range_graph));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_11_build_range_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_13HypergraphMap_10_build_range_hypergraph[] = "HypergraphMap._build_range_hypergraph(self)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_11_build_range_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_range_hypergraph (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_10_build_range_hypergraph(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":562
 *         return obj.project(self.range_graph, self)
 * 
 *     def _build_range_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraphMap *projection = self.thisptr
 * 
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_10_build_range_hypergraph(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  HypergraphMap const *__pyx_v_projection;
  PyObject *__pyx_v_node_labels = NULL;
  PyObject *__pyx_v_edge_labels = NULL;
  std::vector<Hypernode const *> __pyx_v_old_nodes;
  std::vector<Hyperedge const *> __pyx_v_old_edges;
  Hypernode const *__pyx_v_node;
  Hyperedge const *__pyx_v_edge;
  size_t __pyx_v_i;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_h = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  HypergraphMap const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_range_hypergraph", 0);

  /* "pydecode/hypergraph.pyx":563
 * 
 *     def _build_range_hypergraph(self):
 *         cdef const CHypergraphMap *projection = self.thisptr             # <<<<<<<<<<<<<<
 * 
 *         # Map nodes.
 */
  __pyx_t_1 = __pyx_v_self->thisptr;
  __pyx_v_projection = __pyx_t_1;

  /* "pydecode/hypergraph.pyx":566
 * 
 *         # Map nodes.
 *         node_labels = [None] * projection.range_graph().nodes().size()             # <<<<<<<<<<<<<<
 *         edge_labels = [None] * projection.range_graph().edges().size()
 *         cdef vector[const CHypernode*] old_nodes = \
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_projection->range_graph()->nodes().size()<0) ? 0:__pyx_v_projection->range_graph()->nodes().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_projection->range_graph()->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_node_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":567
 *         # Map nodes.
 *         node_labels = [None] * projection.range_graph().nodes().size()
 *         edge_labels = [None] * projection.range_graph().edges().size()             # <<<<<<<<<<<<<<
 *         cdef vector[const CHypernode*] old_nodes = \
 *             projection.domain_graph().nodes()
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_projection->range_graph()->edges().size()<0) ? 0:__pyx_v_projection->range_graph()->edges().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_projection->range_graph()->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_edge_labels = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":569
 *         edge_labels = [None] * projection.range_graph().edges().size()
 *         cdef vector[const CHypernode*] old_nodes = \
 *             projection.domain_graph().nodes()             # <<<<<<<<<<<<<<
 *         cdef vector[const CHyperedge*] old_edges = \
 *             projection.domain_graph().edges()
 */
  __pyx_v_old_nodes = __pyx_v_projection->domain_graph()->nodes();

  /* "pydecode/hypergraph.pyx":571
 *             projection.domain_graph().nodes()
 *         cdef vector[const CHyperedge*] old_edges = \
 *             projection.domain_graph().edges()             # <<<<<<<<<<<<<<
 * 
 *         cdef const CHypernode *node
 */
  __pyx_v_old_edges = __pyx_v_projection->domain_graph()->edges();

  /* "pydecode/hypergraph.pyx":576
 *         cdef const CHyperedge *edge
 * 
 *         for i in range(old_nodes.size()):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_3 = __pyx_v_old_nodes.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pydecode/hypergraph.pyx":577
 * 
 *         for i in range(old_nodes.size()):
 *             node = self.thisptr.map(old_nodes[i])             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \
 */
    __pyx_v_node = __pyx_v_self->thisptr->map((__pyx_v_old_nodes[__pyx_v_i]));

    /* "pydecode/hypergraph.pyx":578
 *         for i in range(old_nodes.size()):
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 node_labels[node.id()] = \
 *                     self.domain_graph.labeling.node_labels[i]
 */
    __pyx_t_5 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_5) {
      __pyx_t_6 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_7 = __pyx_t_6;
    } else {
      __pyx_t_7 = __pyx_t_5;
    }
    if (__pyx_t_7) {

      /* "pydecode/hypergraph.pyx":580
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \
 *                     self.domain_graph.labeling.node_labels[i]             # <<<<<<<<<<<<<<
 * 
 *         if self.domain_graph.labeling.edge_labels:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->domain_graph->labeling->node_labels, __pyx_v_i, sizeof(size_t)+1, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);

      /* "pydecode/hypergraph.pyx":579
 *             node = self.thisptr.map(old_nodes[i])
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[node.id()] = \             # <<<<<<<<<<<<<<
 *                     self.domain_graph.labeling.node_labels[i]
 * 
 */
      __pyx_t_8 = __pyx_v_node->id();
      if (__Pyx_SetItemInt(((PyObject *)__pyx_v_node_labels), __pyx_t_8, __pyx_t_2, sizeof(int), PyInt_FromLong, 1, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "pydecode/hypergraph.pyx":582
 *                     self.domain_graph.labeling.node_labels[i]
 * 
 *         if self.domain_graph.labeling.edge_labels:             # <<<<<<<<<<<<<<
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_self->domain_graph->labeling->edge_labels); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_7) {

    /* "pydecode/hypergraph.pyx":583
 * 
 *         if self.domain_graph.labeling.edge_labels:
 *             for i in range(old_edges.size()):             # <<<<<<<<<<<<<<
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:
 */
    __pyx_t_3 = __pyx_v_old_edges.size();
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pydecode/hypergraph.pyx":584
 *         if self.domain_graph.labeling.edge_labels:
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])             # <<<<<<<<<<<<<<
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \
 */
      __pyx_v_edge = __pyx_v_self->thisptr->map((__pyx_v_old_edges[__pyx_v_i]));

      /* "pydecode/hypergraph.pyx":585
 *             for i in range(old_edges.size()):
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                     edge_labels[edge.id()] = \
 *                         self.domain_graph.labeling.edge_labels[i]
 */
      __pyx_t_7 = ((__pyx_v_edge != NULL) != 0);
      if (__pyx_t_7) {
        __pyx_t_5 = ((__pyx_v_edge->id() >= 0) != 0);
        __pyx_t_6 = __pyx_t_5;
      } else {
        __pyx_t_6 = __pyx_t_7;
      }
      if (__pyx_t_6) {

        /* "pydecode/hypergraph.pyx":587
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \
 *                         self.domain_graph.labeling.edge_labels[i]             # <<<<<<<<<<<<<<
 * 
 *         cdef Hypergraph h = Hypergraph()
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->domain_graph->labeling->edge_labels, __pyx_v_i, sizeof(size_t)+1, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);

        /* "pydecode/hypergraph.pyx":586
 *                 edge = self.thisptr.map(old_edges[i])
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[edge.id()] = \             # <<<<<<<<<<<<<<
 *                         self.domain_graph.labeling.edge_labels[i]
 * 
 */
        __pyx_t_8 = __pyx_v_edge->id();
        if (__Pyx_SetItemInt(((PyObject *)__pyx_v_edge_labels), __pyx_t_8, __pyx_t_2, sizeof(int), PyInt_FromLong, 1, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pydecode/hypergraph.pyx":589
 *                         self.domain_graph.labeling.edge_labels[i]
 * 
 *         cdef Hypergraph h = Hypergraph()             # <<<<<<<<<<<<<<
 *         return h.init(projection.range_graph(),
 *                       Labeling(h, node_labels, edge_labels))
 */
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Hypergraph)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_h = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":590
 * 
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(projection.range_graph(),             # <<<<<<<<<<<<<<
 *                       Labeling(h, node_labels, edge_labels))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pydecode/hypergraph.pyx":591
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(projection.range_graph(),
 *                       Labeling(h, node_labels, edge_labels))             # <<<<<<<<<<<<<<
 * 
 *     def _build_domain_hypergraph(self):
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_h));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_h));
  __Pyx_INCREF(((PyObject *)__pyx_v_node_labels));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_node_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node_labels));
  __Pyx_INCREF(((PyObject *)__pyx_v_edge_labels));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_edge_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_edge_labels));
  __pyx_t_9 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Labeling)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *)__pyx_v_h->__pyx_vtab)->init(__pyx_v_h, __pyx_v_projection->range_graph(), ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)__pyx_t_9))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap._build_range_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_labels);
  __Pyx_XDECREF(__pyx_v_edge_labels);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_13_build_domain_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_10hypergraph_13HypergraphMap_12_build_domain_hypergraph[] = "HypergraphMap._build_domain_hypergraph(self)";
static PyObject *__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_13_build_domain_hypergraph(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_build_domain_hypergraph (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_10hypergraph_13HypergraphMap_12_build_domain_hypergraph(((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hypergraph.pyx":593
 *                       Labeling(h, node_labels, edge_labels))
 * 
 *     def _build_domain_hypergraph(self):             # <<<<<<<<<<<<<<
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0
 */

static PyObject *__pyx_pf_8pydecode_10hypergraph_13HypergraphMap_12_build_domain_hypergraph(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *__pyx_v_self) {
  Hypergraph const *__pyx_v_graph;
  PyObject *__pyx_v_node_labels = NULL;
  PyObject *__pyx_v_edge_labels = NULL;
  Hypernode const *__pyx_v_node;
  Hyperedge const *__pyx_v_edge;
  size_t __pyx_v_i;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *__pyx_v_h = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_domain_hypergraph", 0);

  /* "pydecode/hypergraph.pyx":594
 * 
 *     def _build_domain_hypergraph(self):
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()             # <<<<<<<<<<<<<<
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()
 */
  __pyx_v_graph = __pyx_v_self->thisptr->domain_graph();

  /* "pydecode/hypergraph.pyx":595
 *     def _build_domain_hypergraph(self):
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0             # <<<<<<<<<<<<<<
 *         node_labels = [None] * graph.nodes().size()
 *         edge_labels = [None] * graph.edges().size()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!((__pyx_v_graph->id() >= 0) != 0))) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "pydecode/hypergraph.pyx":596
 *         cdef const CHypergraph *graph = self.thisptr.domain_graph()
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()             # <<<<<<<<<<<<<<
 *         edge_labels = [None] * graph.edges().size()
 *         cdef const CHypernode *node
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_graph->nodes().size()<0) ? 0:__pyx_v_graph->nodes().size())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_graph->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_node_labels = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":597
 *         assert graph.id() >= 0
 *         node_labels = [None] * graph.nodes().size()
 *         edge_labels = [None] * graph.edges().size()             # <<<<<<<<<<<<<<
 *         cdef const CHypernode *node
 *         cdef const CHyperedge *edge
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_graph->edges().size()<0) ? 0:__pyx_v_graph->edges().size())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 597; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_graph->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __pyx_v_edge_labels = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":601
 *         cdef const CHyperedge *edge
 * 
 *         for i in range(graph.nodes().size()):             # <<<<<<<<<<<<<<
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:
 */
  __pyx_t_2 = __pyx_v_graph->nodes().size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "pydecode/hypergraph.pyx":602
 * 
 *         for i in range(graph.nodes().size()):
 *             node = self.thisptr.map(graph.nodes()[i])             # <<<<<<<<<<<<<<
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \
 */
    __pyx_v_node = __pyx_v_self->thisptr->map((__pyx_v_graph->nodes()[__pyx_v_i]));

    /* "pydecode/hypergraph.pyx":603
 *         for i in range(graph.nodes().size()):
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:             # <<<<<<<<<<<<<<
 *                 node_labels[i] = \
 *                     self.range_graph.labeling.node_labels[node.id()]
 */
    __pyx_t_4 = ((__pyx_v_node != NULL) != 0);
    if (__pyx_t_4) {
      __pyx_t_5 = ((__pyx_v_node->id() >= 0) != 0);
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_4;
    }
    if (__pyx_t_6) {

      /* "pydecode/hypergraph.pyx":605
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \
 *                     self.range_graph.labeling.node_labels[node.id()]             # <<<<<<<<<<<<<<
 * 
 *         if self.range_graph.labeling.edge_labels:
 */
      __pyx_t_7 = __pyx_v_node->id();
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->range_graph->labeling->node_labels, __pyx_t_7, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);

      /* "pydecode/hypergraph.pyx":604
 *             node = self.thisptr.map(graph.nodes()[i])
 *             if node != NULL and node.id() >= 0:
 *                 node_labels[i] = \             # <<<<<<<<<<<<<<
 *                     self.range_graph.labeling.node_labels[node.id()]
 * 
 */
      if (__Pyx_SetItemInt(((PyObject *)__pyx_v_node_labels), __pyx_v_i, __pyx_t_1, sizeof(size_t)+1, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5;
    }
    __pyx_L5:;
  }

  /* "pydecode/hypergraph.pyx":607
 *                     self.range_graph.labeling.node_labels[node.id()]
 * 
 *         if self.range_graph.labeling.edge_labels:             # <<<<<<<<<<<<<<
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_self->range_graph->labeling->edge_labels); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_6) {

    /* "pydecode/hypergraph.pyx":608
 * 
 *         if self.range_graph.labeling.edge_labels:
 *             for i in range(graph.edges().size()):             # <<<<<<<<<<<<<<
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:
 */
    __pyx_t_2 = __pyx_v_graph->edges().size();
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pydecode/hypergraph.pyx":609
 *         if self.range_graph.labeling.edge_labels:
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])             # <<<<<<<<<<<<<<
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \
 */
      __pyx_v_edge = __pyx_v_self->thisptr->map((__pyx_v_graph->edges()[__pyx_v_i]));

      /* "pydecode/hypergraph.pyx":610
 *             for i in range(graph.edges().size()):
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:             # <<<<<<<<<<<<<<
 *                     edge_labels[i] = \
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 */
      __pyx_t_6 = ((__pyx_v_edge != NULL) != 0);
      if (__pyx_t_6) {
        __pyx_t_4 = ((__pyx_v_edge->id() >= 0) != 0);
        __pyx_t_5 = __pyx_t_4;
      } else {
        __pyx_t_5 = __pyx_t_6;
      }
      if (__pyx_t_5) {

        /* "pydecode/hypergraph.pyx":612
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \
 *                         self.range_graph.labeling.edge_labels[edge.id()]             # <<<<<<<<<<<<<<
 * 
 *         cdef Hypergraph h = Hypergraph()
 */
        __pyx_t_7 = __pyx_v_edge->id();
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->range_graph->labeling->edge_labels, __pyx_t_7, sizeof(int), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 612; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);

        /* "pydecode/hypergraph.pyx":611
 *                 edge = self.thisptr.map(graph.edges()[i])
 *                 if edge != NULL and edge.id() >= 0:
 *                     edge_labels[i] = \             # <<<<<<<<<<<<<<
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 * 
 */
        if (__Pyx_SetItemInt(((PyObject *)__pyx_v_edge_labels), __pyx_v_i, __pyx_t_1, sizeof(size_t)+1, __Pyx_PyInt_FromSize_t, 1, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "pydecode/hypergraph.pyx":614
 *                         self.range_graph.labeling.edge_labels[edge.id()]
 * 
 *         cdef Hypergraph h = Hypergraph()             # <<<<<<<<<<<<<<
 *         return h.init(graph, Labeling(h, node_labels, edge_labels))
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Hypergraph)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":615
 * 
 *         cdef Hypergraph h = Hypergraph()
 *         return h.init(graph, Labeling(h, node_labels, edge_labels))             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_h));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_h));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_h));
  __Pyx_INCREF(((PyObject *)__pyx_v_node_labels));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_node_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node_labels));
  __Pyx_INCREF(((PyObject *)__pyx_v_edge_labels));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_edge_labels));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_edge_labels));
  __pyx_t_8 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_10hypergraph_Labeling)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph *)__pyx_v_h->__pyx_vtab)->init(__pyx_v_h, __pyx_v_graph, ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)__pyx_t_8))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.hypergraph.HypergraphMap._build_domain_hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node_labels);
  __Pyx_XDECREF(__pyx_v_edge_labels);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Labeling(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)o);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_Labeling(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *p = (struct __pyx_obj_8pydecode_10hypergraph_Labeling *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->edge_labels);
  Py_CLEAR(p->node_labels);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_Labeling(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *p = (struct __pyx_obj_8pydecode_10hypergraph_Labeling *)o;
  if (p->edge_labels) {
    e = (*v)(p->edge_labels, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_Labeling(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Labeling *p = (struct __pyx_obj_8pydecode_10hypergraph_Labeling *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->edge_labels);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10hypergraph_Labeling(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_Labeling[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Labeling = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10hypergraph_Labeling, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Labeling = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10hypergraph_8Labeling_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_Labeling = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.Labeling"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_Labeling), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_Labeling, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Labeling, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Labeling, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("Labeling(Hypergraph graph, node_labels=None, edge_labels=None)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_Labeling, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_Labeling, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_Labeling, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10hypergraph_8Labeling_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_Labeling, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Path __pyx_vtable_8pydecode_10hypergraph_Path;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Path(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_Path *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_Path *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_Path;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10hypergraph_4Path_3__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_Path(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Path *p = (struct __pyx_obj_8pydecode_10hypergraph_Path *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10hypergraph_4Path_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_Path(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_Path *p = (struct __pyx_obj_8pydecode_10hypergraph_Path *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_Path(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Path *p = (struct __pyx_obj_8pydecode_10hypergraph_Path *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Path_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Path_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Path_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Path_5nodes_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_Path[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10hypergraph_Path[] = {
  {(char *)"edges", __pyx_getprop_8pydecode_10hypergraph_4Path_edges, 0, 0, 0},
  {(char *)"nodes", __pyx_getprop_8pydecode_10hypergraph_4Path_nodes, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Path = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_8pydecode_10hypergraph_4Path_7__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_Path = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.Path"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_Path), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_Path, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Path, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10hypergraph_4Path_5__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Valid hyperpath :math:`y \\in {\\cal X}` in the hypergraph.\n\n    To check if an edge is in a path ::\n\n       >> edge in path\n\n    To iterate over a path (in topological order) ::\n\n       >> [edge for edge in path]\n\n    The edges :math:`e \\in {\\cal E}` with :math:`y(e) = 1`.\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_Path, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_Path, /*tp_clear*/
  __pyx_pw_8pydecode_10hypergraph_4Path_11__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10hypergraph_4Path_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_Path, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10hypergraph_Path, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_Path, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Node __pyx_vtable_8pydecode_10hypergraph_Node;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Node(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_Node *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_Node *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_Node;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10hypergraph_4Node_9__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_Node(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Node *p = (struct __pyx_obj_8pydecode_10hypergraph_Node *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10hypergraph_4Node_1__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_Node(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_Node *p = (struct __pyx_obj_8pydecode_10hypergraph_Node *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_Node(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Node *p = (struct __pyx_obj_8pydecode_10hypergraph_Node *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Node_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Node_2id_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Node_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Node_5edges_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Node_is_terminal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Node_11is_terminal_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Node_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Node_5label_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_Node[] = {
  {__Pyx_NAMESTR("_removed"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_4Node_11_removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_4Node_10_removed)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10hypergraph_Node[] = {
  {(char *)"id", __pyx_getprop_8pydecode_10hypergraph_4Node_id, 0, 0, 0},
  {(char *)"edges", __pyx_getprop_8pydecode_10hypergraph_4Node_edges, 0, 0, 0},
  {(char *)"is_terminal", __pyx_getprop_8pydecode_10hypergraph_4Node_is_terminal, 0, 0, 0},
  {(char *)"label", __pyx_getprop_8pydecode_10hypergraph_4Node_label, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.Node"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8pydecode_10hypergraph_4Node_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_10hypergraph_4Node_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10hypergraph_4Node_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Node :math:`v \\in {\\cal V}` associated with a :py:class:`Hypergraph`.\n\n    Attributes\n    -------------\n\n    edge : list of edges\n       The edges with :math:`v` as head node.\n\n       :math:`\\{e \\in {\\cal E} : h(e) = v \\}`\n\n    is_terminal : bool\n       Is the node :math:`v` in terminal node.\n\n    label : any\n        A piece of data associated with the edge.\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_Node, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_Node, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_Node, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10hypergraph_Node, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Edge __pyx_vtable_8pydecode_10hypergraph_Edge;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Edge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_Edge *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_Edge;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10hypergraph_4Edge_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_Edge(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *p = (struct __pyx_obj_8pydecode_10hypergraph_Edge *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10hypergraph_4Edge_5__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_Edge(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_Edge *p = (struct __pyx_obj_8pydecode_10hypergraph_Edge *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_Edge(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Edge *p = (struct __pyx_obj_8pydecode_10hypergraph_Edge *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Edge_tail(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Edge_4tail_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Edge_head(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Edge_4head_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Edge_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Edge_5label_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_4Edge_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_4Edge_2id_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_Edge[] = {
  {__Pyx_NAMESTR("_removed"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_4Edge_9_removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_4Edge_8_removed)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10hypergraph_Edge[] = {
  {(char *)"tail", __pyx_getprop_8pydecode_10hypergraph_4Edge_tail, 0, 0, 0},
  {(char *)"head", __pyx_getprop_8pydecode_10hypergraph_4Edge_head, 0, 0, 0},
  {(char *)"label", __pyx_getprop_8pydecode_10hypergraph_4Edge_label, 0, 0, 0},
  {(char *)"id", __pyx_getprop_8pydecode_10hypergraph_4Edge_id, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_Edge = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.Edge"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_Edge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_Edge, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pw_8pydecode_10hypergraph_4Edge_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_10hypergraph_4Edge_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Hyperedge :math:`e \\in {\\cal E}` associated with a :py:class:`Hypergraph`.\n\n    Attributes\n    -----------\n\n    head : :py:class:`Node`\n        The head node :math:`v = h(e)`.\n\n    tail : list of nodes\n        The tail nodes :math:`v_2 \\ldots v_{n} \\in t(e)`.\n\n    label : any\n        A piece of data associated with the edge.\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_Edge, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_Edge, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_Edge, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10hypergraph_Edge, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_Edge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *p;
  PyObject *o;
  if (likely((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr[--__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr));
    PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)o);
  new((void*)&(p->__pyx_t_0)) std::vector<Hyperedge const *>::iterator();
  p->__pyx_outer_scope = 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  p->__pyx_t_0.std::vector<Hyperedge const *>::iterator::~iterator();
  Py_CLEAR(p->__pyx_outer_scope);
  if ((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr))) {
    __pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr[__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.__pyx_scope_struct_1_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_GraphBuilder __pyx_vtable_8pydecode_10hypergraph_GraphBuilder;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_GraphBuilder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder;
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  p->started = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_GraphBuilder(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *p = (struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->graph);
  Py_CLEAR(p->edge_labels);
  Py_CLEAR(p->node_labels);
  Py_CLEAR(p->started);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_GraphBuilder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *p = (struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)o;
  if (p->graph) {
    e = (*v)(((PyObject*)p->graph), a); if (e) return e;
  }
  if (p->edge_labels) {
    e = (*v)(p->edge_labels, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  if (p->started) {
    e = (*v)(p->started, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_GraphBuilder(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *p = (struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->graph);
  p->graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->edge_labels);
  p->edge_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->started);
  p->started = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_GraphBuilder[] = {
  {__Pyx_NAMESTR("__enter__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_3__enter__, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_12GraphBuilder_2__enter__)},
  {__Pyx_NAMESTR("__exit__"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_5__exit__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_12GraphBuilder_4__exit__)},
  {__Pyx_NAMESTR("add_node"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_12GraphBuilder_7add_node, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_12GraphBuilder_6add_node)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_GraphBuilder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.GraphBuilder"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_GraphBuilder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("GraphBuilder()\n\n    Build a hypergraph. Created using ::\n\n           >> hypergraph = Hypergraph()\n           >> with hypergraph.builder() as b:\n           >>    b.add_node()\n\n    Methods\n    -------\n\n    add_node(edges=[], label=\"\")\n        Add a node (and its hyperedges) to the hypergraph.\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_GraphBuilder, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_GraphBuilder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_GraphBuilder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10hypergraph_12GraphBuilder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_GraphBuilder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_Hypergraph __pyx_vtable_8pydecode_10hypergraph_Hypergraph;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_Hypergraph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_Hypergraph;
  p->labeling = ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)Py_None); Py_INCREF(Py_None);
  p->_cached_edges = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10hypergraph_10Hypergraph_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_Hypergraph(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *p = (struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10hypergraph_10Hypergraph_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->labeling);
  Py_CLEAR(p->_cached_edges);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_Hypergraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *p = (struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)o;
  if (p->labeling) {
    e = (*v)(((PyObject*)p->labeling), a); if (e) return e;
  }
  if (p->_cached_edges) {
    e = (*v)(p->_cached_edges, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_Hypergraph(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *p = (struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->labeling);
  p->labeling = ((struct __pyx_obj_8pydecode_10hypergraph_Labeling *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cached_edges);
  p->_cached_edges = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_10Hypergraph_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_10Hypergraph_5nodes_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_10Hypergraph_root(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_10Hypergraph_4root_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_10Hypergraph_edges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_10Hypergraph_5edges_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_Hypergraph[] = {
  {__Pyx_NAMESTR("builder"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_10Hypergraph_5builder, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_10Hypergraph_4builder)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10hypergraph_Hypergraph[] = {
  {(char *)"nodes", __pyx_getprop_8pydecode_10hypergraph_10Hypergraph_nodes, 0, 0, 0},
  {(char *)"root", __pyx_getprop_8pydecode_10hypergraph_10Hypergraph_root, 0, 0, 0},
  {(char *)"edges", __pyx_getprop_8pydecode_10hypergraph_10Hypergraph_edges, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_Hypergraph = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.Hypergraph"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_Hypergraph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_10hypergraph_10Hypergraph_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n\n    Hypergraph consisting of a set of nodes :math:`{\\cal V}`,\n    hyperedges :math:`{\\cal E}`, and a root node.\n\n    Attributes\n    -----------\n\n    root : :py:class:`Node`\n      A specialized node in :math:`{\\cal V}`.\n\n    node : list of :py:class:`Node`s\n      The node set :math:`{\\cal V}`. In topological-order.\n\n    edges : list of :py:class:`Edge`s\n      The edge set :math:`{\\cal E}`. In topological-order.\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_Hypergraph, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_Hypergraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_Hypergraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10hypergraph_Hypergraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_Hypergraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_2___iter__[8];
static int __pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ = 0;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *p;
  PyObject *o;
  if (likely((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_2___iter__[--__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_2___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__));
    PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)o);
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if ((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__))) {
    __pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_2___iter__[__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_2___iter__++] = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_2___iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_2___iter__[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.__pyx_scope_struct_2___iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_2___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyEdges __pyx_vtable_8pydecode_10hypergraph__LazyEdges;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph__LazyEdges(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph__LazyEdges;
  new((void*)&(p->_edges)) std::vector<Hyperedge const *>();
  p->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph__LazyEdges(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)o;
  PyObject_GC_UnTrack(o);
  p->_edges.std::vector<Hyperedge const *>::~vector();
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph__LazyEdges(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)o;
  if (p->_graph) {
    e = (*v)(((PyObject*)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph__LazyEdges(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10hypergraph__LazyEdges(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph__LazyEdges[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LazyEdges = {
  __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10hypergraph__LazyEdges, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LazyEdges = {
  __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_7__len__, /*mp_length*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph__LazyEdges = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph._LazyEdges"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph__LazyEdges, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LazyEdges, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LazyEdges, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LazyEdges(graph)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph__LazyEdges, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph__LazyEdges, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph__LazyEdges, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyEdges_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph__LazyEdges, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *p;
  PyObject *o;
  if (likely((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr[--__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr));
    PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)o);
  new((void*)&(p->__pyx_t_0)) std::vector<Hypernode const *>::iterator();
  p->__pyx_outer_scope = 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  p->__pyx_t_0.std::vector<Hypernode const *>::iterator::~iterator();
  Py_CLEAR(p->__pyx_outer_scope);
  if ((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr))) {
    __pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr[__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.__pyx_scope_struct_3_genexpr"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct____iter__[8];
static int __pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct____iter__ = 0;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *p;
  PyObject *o;
  if (likely((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct____iter__[--__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__));
    PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)o);
  p->__pyx_v_self = 0;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if ((__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__))) {
    __pyx_freelist_8pydecode_10hypergraph___pyx_scope_struct____iter__[__pyx_freecount_8pydecode_10hypergraph___pyx_scope_struct____iter__++] = ((struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject*)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__ *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct____iter__[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.__pyx_scope_struct____iter__"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph___pyx_scope_struct____iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph___pyx_scope_struct____iter__, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph___pyx_scope_struct____iter__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph___pyx_scope_struct____iter__, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph__LazyNodes __pyx_vtable_8pydecode_10hypergraph__LazyNodes;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph__LazyNodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph__LazyNodes;
  new((void*)&(p->_nodes)) std::vector<Hypernode const *>();
  p->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph__LazyNodes(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)o;
  PyObject_GC_UnTrack(o);
  p->_nodes.std::vector<Hypernode const *>::~vector();
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph__LazyNodes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)o;
  if (p->_graph) {
    e = (*v)(((PyObject*)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph__LazyNodes(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *p = (struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10hypergraph__LazyNodes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph__LazyNodes[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__LazyNodes = {
  __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10hypergraph__LazyNodes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__LazyNodes = {
  __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_7__len__, /*mp_length*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph__LazyNodes = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph._LazyNodes"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph__LazyNodes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__LazyNodes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__LazyNodes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("_LazyNodes(graph)"), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph__LazyNodes, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph__LazyNodes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_5__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph__LazyNodes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pydecode_10hypergraph_10_LazyNodes_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph__LazyNodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_10hypergraph_HypergraphMap __pyx_vtable_8pydecode_10hypergraph_HypergraphMap;

static PyObject *__pyx_tp_new_8pydecode_10hypergraph_HypergraphMap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap;
  p->range_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->domain_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_10hypergraph_HypergraphMap(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *p = (struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)o;
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_7__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->range_graph);
  Py_CLEAR(p->domain_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_10hypergraph_HypergraphMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *p = (struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)o;
  if (p->range_graph) {
    e = (*v)(((PyObject*)p->range_graph), a); if (e) return e;
  }
  if (p->domain_graph) {
    e = (*v)(((PyObject*)p->domain_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_10hypergraph_HypergraphMap(PyObject *o) {
  struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *p = (struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->range_graph);
  p->range_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->domain_graph);
  p->domain_graph = ((struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_10hypergraph_HypergraphMap(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_13HypergraphMap_domain_hypergraph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_17domain_hypergraph_1__get__(o);
}

static PyObject *__pyx_getprop_8pydecode_10hypergraph_13HypergraphMap_range_hypergraph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_16range_hypergraph_1__get__(o);
}

static PyMethodDef __pyx_methods_8pydecode_10hypergraph_HypergraphMap[] = {
  {__Pyx_NAMESTR("compose"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_3compose, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_13HypergraphMap_2compose)},
  {__Pyx_NAMESTR("invert"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_5invert, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_13HypergraphMap_4invert)},
  {__Pyx_NAMESTR("_build_range_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_11_build_range_hypergraph, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_13HypergraphMap_10_build_range_hypergraph)},
  {__Pyx_NAMESTR("_build_domain_hypergraph"), (PyCFunction)__pyx_pw_8pydecode_10hypergraph_13HypergraphMap_13_build_domain_hypergraph, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_10hypergraph_13HypergraphMap_12_build_domain_hypergraph)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pydecode_10hypergraph_HypergraphMap[] = {
  {(char *)"domain_hypergraph", __pyx_getprop_8pydecode_10hypergraph_13HypergraphMap_domain_hypergraph, 0, 0, 0},
  {(char *)"range_hypergraph", __pyx_getprop_8pydecode_10hypergraph_13HypergraphMap_range_hypergraph, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_HypergraphMap = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_10hypergraph_HypergraphMap, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_HypergraphMap = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_10hypergraph_13HypergraphMap_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_10hypergraph_HypergraphMap = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hypergraph.HypergraphMap"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_10hypergraph_HypergraphMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_HypergraphMap, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_HypergraphMap, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    A map between two hypergraphs.\n\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_10hypergraph_HypergraphMap, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_10hypergraph_HypergraphMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_10hypergraph_HypergraphMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pydecode_10hypergraph_HypergraphMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_10hypergraph_HypergraphMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("hypergraph"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_n_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 1},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_kp_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 0},
  {&__pyx_kp_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 0},
  {&__pyx_kp_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_n_s_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 0, 1, 1},
  {&__pyx_kp_s_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 0, 1, 0},
  {&__pyx_kp_s_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 1, 0},
  {&__pyx_n_s_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 1, 1},
  {&__pyx_n_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 1},
  {&__pyx_kp_s_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 1, 0},
  {&__pyx_n_s_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 0, 1, 1},
  {&__pyx_n_s_38, __pyx_k_38, sizeof(__pyx_k_38), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_n_s_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 1, 1},
  {&__pyx_n_s_44, __pyx_k_44, sizeof(__pyx_k_44), 0, 0, 1, 1},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s____class__, __pyx_k____class__, sizeof(__pyx_k____class__), 0, 0, 1, 1},
  {&__pyx_n_s____init__, __pyx_k____init__, sizeof(__pyx_k____init__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____metaclass__, __pyx_k____metaclass__, sizeof(__pyx_k____metaclass__), 0, 0, 1, 1},
  {&__pyx_n_s____module__, __pyx_k____module__, sizeof(__pyx_k____module__), 0, 0, 1, 1},
  {&__pyx_n_s____pyx_vtable__, __pyx_k____pyx_vtable__, sizeof(__pyx_k____pyx_vtable__), 0, 0, 1, 1},
  {&__pyx_n_s____qualname__, __pyx_k____qualname__, sizeof(__pyx_k____qualname__), 0, 0, 1, 1},
  {&__pyx_n_s____str__, __pyx_k____str__, sizeof(__pyx_k____str__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___removed, __pyx_k___removed, sizeof(__pyx_k___removed), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__args, __pyx_k__args, sizeof(__pyx_k__args), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__close, __pyx_k__close, sizeof(__pyx_k__close), 0, 0, 1, 1},
  {&__pyx_n_s__domain_hypergraph, __pyx_k__domain_hypergraph, sizeof(__pyx_k__domain_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s__edge_labels, __pyx_k__edge_labels, sizeof(__pyx_k__edge_labels), 0, 0, 1, 1},
  {&__pyx_n_s__edges, __pyx_k__edges, sizeof(__pyx_k__edges), 0, 0, 1, 1},
  {&__pyx_n_s__exception, __pyx_k__exception, sizeof(__pyx_k__exception), 0, 0, 1, 1},
  {&__pyx_n_s__get, __pyx_k__get, sizeof(__pyx_k__get), 0, 0, 1, 1},
  {&__pyx_n_s__graph, __pyx_k__graph, sizeof(__pyx_k__graph), 0, 0, 1, 1},
  {&__pyx_n_s__head, __pyx_k__head, sizeof(__pyx_k__head), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__key, __pyx_k__key, sizeof(__pyx_k__key), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__node_labels, __pyx_k__node_labels, sizeof(__pyx_k__node_labels), 0, 0, 1, 1},
  {&__pyx_n_s__nodes, __pyx_k__nodes, sizeof(__pyx_k__nodes), 0, 0, 1, 1},
  {&__pyx_n_s__project, __pyx_k__project, sizeof(__pyx_k__project), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__range_hypergraph, __pyx_k__range_hypergraph, sizeof(__pyx_k__range_hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s__root, __pyx_k__root, sizeof(__pyx_k__root), 0, 0, 1, 1},
  {&__pyx_n_s__self, __pyx_k__self, sizeof(__pyx_k__self), 0, 0, 1, 1},
  {&__pyx_n_s__send, __pyx_k__send, sizeof(__pyx_k__send), 0, 0, 1, 1},
  {&__pyx_n_s__sort, __pyx_k__sort, sizeof(__pyx_k__sort), 0, 0, 1, 1},
  {&__pyx_n_s__tail, __pyx_k__tail, sizeof(__pyx_k__tail), 0, 0, 1, 1},
  {&__pyx_n_s__thisptr, __pyx_k__thisptr, sizeof(__pyx_k__thisptr), 0, 0, 1, 1},
  {&__pyx_n_s__throw, __pyx_k__throw, sizeof(__pyx_k__throw), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pydecode/hypergraph.pyx":20
 *         if isinstance(obj, Edge):
 *             if self.edge_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no edge labeling.")
 *             return self.edge_labels[obj.id]
 */
  __pyx_k_tuple_3 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_2)); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_3);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "pydecode/hypergraph.pyx":26
 *         if isinstance(obj, Node):
 *             if self.node_labels is None:
 *                 raise HypergraphAccessException(             # <<<<<<<<<<<<<<
 *                     "There is no node labeling.")
 *             return self.node_labels[obj.id]
 */
  __pyx_k_tuple_5 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_4)); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_5);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "pydecode/hypergraph.pyx":236
 * 
 *         if not self.started:
 *             raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                 "Must constuct graph in 'with' block.")
 * 
 */
  __pyx_k_tuple_15 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_14)); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_15);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "pydecode/hypergraph.pyx":254
 *                         + "Received %s" % (edge_cons))
 *                 if len(tail_nodes) == 0:
 *                     raise HypergraphConstructionException(             # <<<<<<<<<<<<<<
 *                         "An edge must have at least one tail node.")
 * 
 */
  __pyx_k_tuple_19 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_18)); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_19);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "pydecode/hypergraph.pyx":450
 *         if op == 3:
 *             return not self.equal(other)
 *         raise Exception("No inequality on paths.")             # <<<<<<<<<<<<<<
 * 
 *     property edges:
 */
  __pyx_k_tuple_29 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_28)); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_29);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

  /* "pydecode/hypergraph.pyx":462
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_k_tuple_32 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__self), ((PyObject *)__pyx_n_s__value)); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_32);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));
  __pyx_k_codeobj_33 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_34, __pyx_n_s____init__, 462, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hypergraph.pyx":465
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_k_tuple_36 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__self)); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_36);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));
  __pyx_k_codeobj_37 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_34, __pyx_n_s____str__, 465, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hypergraph.pyx":470
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_k_tuple_39 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__self), ((PyObject *)__pyx_n_s__value)); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_39);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));
  __pyx_k_codeobj_40 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_34, __pyx_n_s____init__, 470, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hypergraph.pyx":473
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_k_tuple_42 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__self)); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_42);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));
  __pyx_k_codeobj_43 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_34, __pyx_n_s____str__, 473, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inithypergraph(void); /*proto*/
PyMODINIT_FUNC inithypergraph(void)
#else
PyMODINIT_FUNC PyInit_hypergraph(void); /*proto*/
PyMODINIT_FUNC PyInit_hypergraph(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_hypergraph(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("hypergraph"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pydecode.hypergraph")) {
      if (unlikely(PyDict_SetItemString(modules, "pydecode.hypergraph", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pydecode__hypergraph) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_Labeling) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Labeling", (PyObject *)&__pyx_type_8pydecode_10hypergraph_Labeling) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Labeling = &__pyx_type_8pydecode_10hypergraph_Labeling;
  __pyx_vtabptr_8pydecode_10hypergraph_Path = &__pyx_vtable_8pydecode_10hypergraph_Path;
  __pyx_vtable_8pydecode_10hypergraph_Path.init = (struct __pyx_obj_8pydecode_10hypergraph_Path *(*)(struct __pyx_obj_8pydecode_10hypergraph_Path *, Hyperpath const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10hypergraph_4Path_init;
  __pyx_vtable_8pydecode_10hypergraph_Path.equal = (PyObject *(*)(struct __pyx_obj_8pydecode_10hypergraph_Path *, struct __pyx_obj_8pydecode_10hypergraph_Path *))__pyx_f_8pydecode_10hypergraph_4Path_equal;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_8pydecode_10hypergraph_Path, "__contains__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8pydecode_10hypergraph_4Path_6__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8pydecode_10hypergraph_4Path_6__contains__.doc = __pyx_doc_8pydecode_10hypergraph_4Path_6__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8pydecode_10hypergraph_4Path_6__contains__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_Path.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Path", (PyObject *)&__pyx_type_8pydecode_10hypergraph_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Path = &__pyx_type_8pydecode_10hypergraph_Path;
  __pyx_vtabptr_8pydecode_10hypergraph_Node = &__pyx_vtable_8pydecode_10hypergraph_Node;
  __pyx_vtable_8pydecode_10hypergraph_Node.init = (struct __pyx_obj_8pydecode_10hypergraph_Node *(*)(struct __pyx_obj_8pydecode_10hypergraph_Node *, Hypernode const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10hypergraph_4Node_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_Node.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_8pydecode_10hypergraph_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Node = &__pyx_type_8pydecode_10hypergraph_Node;
  __pyx_vtabptr_8pydecode_10hypergraph_Edge = &__pyx_vtable_8pydecode_10hypergraph_Edge;
  __pyx_vtable_8pydecode_10hypergraph_Edge.init = (struct __pyx_obj_8pydecode_10hypergraph_Edge *(*)(struct __pyx_obj_8pydecode_10hypergraph_Edge *, Hyperedge const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10hypergraph_4Edge_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_Edge.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Edge", (PyObject *)&__pyx_type_8pydecode_10hypergraph_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Edge = &__pyx_type_8pydecode_10hypergraph_Edge;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr = &__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_1_genexpr;
  __pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder = &__pyx_vtable_8pydecode_10hypergraph_GraphBuilder;
  __pyx_vtable_8pydecode_10hypergraph_GraphBuilder.init = (struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *(*)(struct __pyx_obj_8pydecode_10hypergraph_GraphBuilder *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph *))__pyx_f_8pydecode_10hypergraph_12GraphBuilder_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_GraphBuilder.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GraphBuilder", (PyObject *)&__pyx_type_8pydecode_10hypergraph_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_GraphBuilder = &__pyx_type_8pydecode_10hypergraph_GraphBuilder;
  __pyx_vtabptr_8pydecode_10hypergraph_Hypergraph = &__pyx_vtable_8pydecode_10hypergraph_Hypergraph;
  __pyx_vtable_8pydecode_10hypergraph_Hypergraph.init = (struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *(*)(struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, Hypergraph const *, struct __pyx_obj_8pydecode_10hypergraph_Labeling *))__pyx_f_8pydecode_10hypergraph_10Hypergraph_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_Hypergraph.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Hypergraph", (PyObject *)&__pyx_type_8pydecode_10hypergraph_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_Hypergraph = &__pyx_type_8pydecode_10hypergraph_Hypergraph;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_2___iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_2___iter__ = &__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_2___iter__;
  __pyx_vtabptr_8pydecode_10hypergraph__LazyEdges = &__pyx_vtable_8pydecode_10hypergraph__LazyEdges;
  __pyx_vtable_8pydecode_10hypergraph__LazyEdges.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10hypergraph__LazyEdges *, std::vector<Hyperedge const *>))__pyx_f_8pydecode_10hypergraph_10_LazyEdges_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph__LazyEdges.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LazyEdges", (PyObject *)&__pyx_type_8pydecode_10hypergraph__LazyEdges) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyEdges = &__pyx_type_8pydecode_10hypergraph__LazyEdges;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr = &__pyx_type_8pydecode_10hypergraph___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph___pyx_scope_struct____iter__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph___pyx_scope_struct____iter__ = &__pyx_type_8pydecode_10hypergraph___pyx_scope_struct____iter__;
  __pyx_vtabptr_8pydecode_10hypergraph__LazyNodes = &__pyx_vtable_8pydecode_10hypergraph__LazyNodes;
  __pyx_vtable_8pydecode_10hypergraph__LazyNodes.init = (PyObject *(*)(struct __pyx_obj_8pydecode_10hypergraph__LazyNodes *, std::vector<Hypernode const *>))__pyx_f_8pydecode_10hypergraph_10_LazyNodes_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph__LazyNodes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph__LazyNodes.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph__LazyNodes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "_LazyNodes", (PyObject *)&__pyx_type_8pydecode_10hypergraph__LazyNodes) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph__LazyNodes = &__pyx_type_8pydecode_10hypergraph__LazyNodes;
  __pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap = &__pyx_vtable_8pydecode_10hypergraph_HypergraphMap;
  __pyx_vtable_8pydecode_10hypergraph_HypergraphMap.init = (struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *(*)(struct __pyx_obj_8pydecode_10hypergraph_HypergraphMap *, HypergraphMap const *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *, struct __pyx_obj_8pydecode_10hypergraph_Hypergraph *))__pyx_f_8pydecode_10hypergraph_13HypergraphMap_init;
  if (PyType_Ready(&__pyx_type_8pydecode_10hypergraph_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_10hypergraph_HypergraphMap.tp_dict, __pyx_vtabptr_8pydecode_10hypergraph_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "HypergraphMap", (PyObject *)&__pyx_type_8pydecode_10hypergraph_HypergraphMap) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_10hypergraph_HypergraphMap = &__pyx_type_8pydecode_10hypergraph_HypergraphMap;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pydecode/hypergraph.pyx":9
 * 
 * 
 * cdef _hypergraph_registry_counts = {}             # <<<<<<<<<<<<<<
 * 
 * cdef class Labeling:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_XGOTREF(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts);
  __Pyx_DECREF_SET(__pyx_v_8pydecode_10hypergraph__hypergraph_registry_counts, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":212
 *                                        final_edge_labels)
 * 
 *     def add_node(self, edges=[], label=None):             # <<<<<<<<<<<<<<
 *         """
 *         add_node(edges=[], label=None)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_12 = ((PyObject *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":413
 *         del self.thisptr
 * 
 *     def __cinit__(self, Hypergraph graph=None, edges=[]):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_24 = ((PyObject *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":461
 * 
 * 
 * class HypergraphAccessException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "pydecode/hypergraph.pyx":462
 * 
 * class HypergraphAccessException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10hypergraph_25HypergraphAccessException_1__init__, 0, __pyx_n_s_35, NULL, __pyx_n_s_26, ((PyObject *)__pyx_k_codeobj_33)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":465
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10hypergraph_25HypergraphAccessException_3__str__, 0, __pyx_n_s_38, NULL, __pyx_n_s_26, ((PyObject *)__pyx_k_codeobj_37)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____str__, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/hypergraph.pyx":461
 * 
 * 
 * class HypergraphAccessException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_3 = __Pyx_CreateClass(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_t_1), __pyx_n_s_1, __pyx_n_s_1, __pyx_n_s_26); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_1, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":469
 * 
 * 
 * class HypergraphConstructionException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

  /* "pydecode/hypergraph.pyx":470
 * 
 * class HypergraphConstructionException(Exception):
 *     def __init__(self, value):             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10hypergraph_31HypergraphConstructionException_1__init__, 0, __pyx_n_s_41, NULL, __pyx_n_s_26, ((PyObject *)__pyx_k_codeobj_40)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____init__, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/hypergraph.pyx":473
 *         self.value = value
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return repr(self.value)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_8pydecode_10hypergraph_31HypergraphConstructionException_3__str__, 0, __pyx_n_s_44, NULL, __pyx_n_s_26, ((PyObject *)__pyx_k_codeobj_43)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyObject_SetItem(__pyx_t_1, __pyx_n_s____str__, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pydecode/hypergraph.pyx":469
 * 
 * 
 * class HypergraphConstructionException(Exception):             # <<<<<<<<<<<<<<
 *     def __init__(self, value):
 *         self.value = value
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_builtin_Exception);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_Exception);
  __Pyx_GIVEREF(__pyx_builtin_Exception);
  __pyx_t_2 = __Pyx_CreateClass(((PyObject *)__pyx_t_3), ((PyObject *)__pyx_t_1), __pyx_n_s_13, __pyx_n_s_13, __pyx_n_s_26); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_13, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "pydecode/hypergraph.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from libcpp.string cimport string
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pydecode.hypergraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pydecode.hypergraph");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        } else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (DECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    } else {
        return __Pyx_PyObject_CallMethod1(L, __pyx_n_s__append, x);
    }
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    PyObject* dict = PyModule_GetDict(__pyx_m);
    Py_XINCREF(dict);
    return dict;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    if (PyType_Ready(&__pyx_CyFunctionType_type) < 0)
        return -1;
    __pyx_CyFunctionType = &__pyx_CyFunctionType_type;
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s____pyx_vtable__, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static PyObject *__Pyx_FindPy2Metaclass(PyObject *bases) {
    PyObject *metaclass;
#if PY_MAJOR_VERSION < 3
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = __Pyx_PyObject_GetAttrStr(base, __pyx_n_s____class__);
        if (!metaclass) {
            PyErr_Clear();
            metaclass = (PyObject*) Py_TYPE(base);
        }
    } else {
        metaclass = (PyObject *) &PyClass_Type;
    }
#else
    if (PyTuple_Check(bases) && PyTuple_GET_SIZE(bases) > 0) {
        PyObject *base = PyTuple_GET_ITEM(bases, 0);
        metaclass = (PyObject*) Py_TYPE(base);
    } else {
        metaclass = (PyObject *) &PyType_Type;
    }
#endif
    Py_INCREF(metaclass);
    return metaclass;
}

static PyObject *__Pyx_CreateClass(PyObject *bases, PyObject *dict, PyObject *name,
                                   PyObject *qualname, PyObject *modname) {
    PyObject *result;
    PyObject *metaclass;
    if (PyDict_SetItem(dict, __pyx_n_s____module__, modname) < 0)
        return NULL;
    if (PyDict_SetItem(dict, __pyx_n_s____qualname__, qualname) < 0)
        return NULL;
    metaclass = PyDict_GetItem(dict, __pyx_n_s____metaclass__);
    if (metaclass) {
        Py_INCREF(metaclass);
    } else {
        metaclass = __Pyx_FindPy2Metaclass(bases);
    }
    result = PyObject_CallFunctionObjArgs(metaclass, name, bases, dict, NULL);
    Py_DECREF(metaclass);
    return result;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s__args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Generators always return to their most recent caller, not
         * necessarily their creator. */
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        /* Don't keep the reference to f_back any longer than necessary.  It
         * may keep a chain of frames alive or it could create a reference
         * cycle. */
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s__send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s__close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
#if PY_VERSION_HEX < 0x02050000
        PyErr_SetNone(PyExc_StopIteration);
#else
        PyErr_SetNone(PyExc_GeneratorExit);
#endif
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
#if PY_VERSION_HEX >= 0x02050000
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
#endif
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();      /* ignore these errors */
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
#if PY_VERSION_HEX >= 0x02050000
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
#endif
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s__throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    PyObject_GC_Track(self);
    if (gen->resume_label > 0) {
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
            return;                     /* resurrected.  :( */
    }
    PyObject_GC_UnTrack(self);
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
    /* Undo the temporary resurrection; can't use DECREF here, it would
     * cause a recursive call.
     */
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0)
        return; /* this is the normal path out */
    /* close() resurrected it!  Make it look like the original Py_DECREF
     * never happened.
     */
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
     * we need to undo that. */
    _Py_DEC_REFTOTAL;
#endif
    /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
     * chain, so no more to do there.
     * If COUNT_ALLOCS, the original decref bumped tp_frees, and
     * _Py_NewReference bumped tp_allocs:  both of those need to be
     * undone.
     */
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
}
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running",
#if PY_VERSION_HEX >= 0x02060000
     T_BOOL,
#else
     T_BYTE,
#endif
     offsetof(__pyx_GeneratorObject, is_running),
     READONLY,
     NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {__Pyx_NAMESTR("send"), (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {__Pyx_NAMESTR("throw"), (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {__Pyx_NAMESTR("close"), (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("generator"),         /*tp_name*/
    sizeof(__pyx_GeneratorObject),      /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_Generator_dealloc,/*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    0,                                   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    0,                                  /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_Generator_traverse,   /*tp_traverse*/
    0,                                  /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_GeneratorObject, gi_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    (iternextfunc) __Pyx_Generator_Next, /*tp_iternext*/
    __pyx_Generator_methods,            /*tp_methods*/
    __pyx_Generator_memberlist,         /*tp_members*/
    0,                                  /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    0,                                  /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    0,                                  /*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    __Pyx_Generator_del,                /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
    0,                                  /*tp_finalize*/
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    if (PyType_Ready(&__pyx_GeneratorType_type)) {
        return -1;
    }
    __pyx_GeneratorType = &__pyx_GeneratorType_type;
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
