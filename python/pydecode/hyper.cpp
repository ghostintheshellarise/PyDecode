/* Generated by Cython 0.19.1 on Mon Oct  7 14:34:36 2013 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER)
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pydecode__hyper
#define __PYX_HAVE_API__pydecode__hyper
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "Hypergraph/Algorithms.h"
#include "Hypergraph/Hypergraph.h"
#include "Hypergraph/Constraints.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "hyper.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_8pydecode_5hyper_Weights;
struct __pyx_obj_8pydecode_5hyper_Constraints;
struct __pyx_obj_8pydecode_5hyper_GraphBuilder;
struct __pyx_obj_8pydecode_5hyper_Node;
struct __pyx_obj_8pydecode_5hyper_Constraint;
struct __pyx_obj_8pydecode_5hyper_Edge;
struct __pyx_obj_8pydecode_5hyper_Path;
struct __pyx_obj_8pydecode_5hyper_Chart;
struct __pyx_obj_8pydecode_5hyper_Hypergraph;
struct __pyx_obj_8pydecode_5hyper_ConstrainedResult;

/* "pydecode/hyper.pyx":383
 *         return self.thisptr.has_edge(edge.edgeptr)
 * 
 * cdef class Weights:             # <<<<<<<<<<<<<<
 *     """
 *     Weights associated with a hypergraph.
 */
struct __pyx_obj_8pydecode_5hyper_Weights {
  PyObject_HEAD
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *hypergraph;
  HypergraphWeights const *thisptr;
};


/* "pydecode/hyper.pyx":433
 *         self.thisptr.has_edge(edge.edgeptr)
 * 
 * cdef class Constraints:             # <<<<<<<<<<<<<<
 *     """
 *     A class for storing the matrix of hypergraph constraints A y = b.
 */
struct __pyx_obj_8pydecode_5hyper_Constraints {
  PyObject_HEAD
  HypergraphConstraints *thisptr;
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *hypergraph;
};


/* "pydecode/hyper.pyx":223
 * 
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     """
 *     Build a hypergraph. Created using
 */
struct __pyx_obj_8pydecode_5hyper_GraphBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_GraphBuilder *__pyx_vtab;
  Hypergraph *thisptr;
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *hyper;
  PyObject *types;
  PyObject *node_labels;
  PyObject *indexed;
};


/* "pydecode/hyper.pyx":290
 *         return node
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */
struct __pyx_obj_8pydecode_5hyper_Node {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_Node *__pyx_vtab;
  Hypernode const *nodeptr;
  Hypergraph *graphptr;
};


/* "pydecode/hyper.pyx":420
 *         return result
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef const CConstraint *thisptr
 *     cdef init(self, const CConstraint *ptr):
 */
struct __pyx_obj_8pydecode_5hyper_Constraint {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_Constraint *__pyx_vtab;
  Constraint const *thisptr;
};


/* "pydecode/hyper.pyx":318
 *         return (self.nodeptr.id() == -1)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 * 
 */
struct __pyx_obj_8pydecode_5hyper_Edge {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_Edge *__pyx_vtab;
  Hyperedge const *edgeptr;
};


/* "pydecode/hyper.pyx":360
 *     return py_node
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     """
 *     A valid path in the hypergraph.
 */
struct __pyx_obj_8pydecode_5hyper_Path {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_Path *__pyx_vtab;
  Hyperpath const *thisptr;
};


/* "pydecode/hyper.pyx":86
 * #          vector[double] duals()
 * 
 * cdef class Chart:             # <<<<<<<<<<<<<<
 *     cdef vector[double] chart
 * 
 */
struct __pyx_obj_8pydecode_5hyper_Chart {
  PyObject_HEAD
  std::vector<double> chart;
};


/* "pydecode/hyper.pyx":189
 *             return convert_constraints(self.thisptr.constraints)
 * 
 * cdef class Hypergraph:             # <<<<<<<<<<<<<<
 *     cdef CHypergraph *thisptr
 *     cdef types
 */
struct __pyx_obj_8pydecode_5hyper_Hypergraph {
  PyObject_HEAD
  Hypergraph *thisptr;
  PyObject *types;
  PyObject *indexed_types;
  PyObject *node_labels;
};


/* "pydecode/hyper.pyx":172
 *     return results
 * 
 * cdef class ConstrainedResult:             # <<<<<<<<<<<<<<
 *     cdef CConstrainedResult thisptr
 *     cdef init(self, CConstrainedResult ptr):
 */
struct __pyx_obj_8pydecode_5hyper_ConstrainedResult {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pydecode_5hyper_ConstrainedResult *__pyx_vtab;
  ConstrainedResult thisptr;
};



struct __pyx_vtabstruct_8pydecode_5hyper_ConstrainedResult {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *, ConstrainedResult);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_ConstrainedResult *__pyx_vtabptr_8pydecode_5hyper_ConstrainedResult;


/* "pydecode/hyper.pyx":290
 *         return node
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef const CHypernode *nodeptr
 *     cdef CHypergraph *graphptr
 */

struct __pyx_vtabstruct_8pydecode_5hyper_Node {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_Node *, Hypernode const *);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Node *__pyx_vtabptr_8pydecode_5hyper_Node;


/* "pydecode/hyper.pyx":223
 * 
 * 
 * cdef class GraphBuilder:             # <<<<<<<<<<<<<<
 *     """
 *     Build a hypergraph. Created using
 */

struct __pyx_vtabstruct_8pydecode_5hyper_GraphBuilder {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *, struct __pyx_obj_8pydecode_5hyper_Hypergraph *, Hypergraph *, PyObject *);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_GraphBuilder *__pyx_vtabptr_8pydecode_5hyper_GraphBuilder;


/* "pydecode/hyper.pyx":360
 *     return py_node
 * 
 * cdef class Path:             # <<<<<<<<<<<<<<
 *     """
 *     A valid path in the hypergraph.
 */

struct __pyx_vtabstruct_8pydecode_5hyper_Path {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_Path *, Hyperpath const *);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Path *__pyx_vtabptr_8pydecode_5hyper_Path;


/* "pydecode/hyper.pyx":420
 *         return result
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef const CConstraint *thisptr
 *     cdef init(self, const CConstraint *ptr):
 */

struct __pyx_vtabstruct_8pydecode_5hyper_Constraint {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_Constraint *, Constraint const *);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Constraint *__pyx_vtabptr_8pydecode_5hyper_Constraint;


/* "pydecode/hyper.pyx":318
 *         return (self.nodeptr.id() == -1)
 * 
 * cdef class Edge:             # <<<<<<<<<<<<<<
 *     cdef const CHyperedge *edgeptr
 * 
 */

struct __pyx_vtabstruct_8pydecode_5hyper_Edge {
  PyObject *(*init)(struct __pyx_obj_8pydecode_5hyper_Edge *, Hyperedge const *);
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Edge *__pyx_vtabptr_8pydecode_5hyper_Edge;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#include <new>

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pydecode.hyper' */
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Weights = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Constraints = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_GraphBuilder = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Node = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Constraint = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Edge = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Path = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Chart = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_Hypergraph = 0;
static PyTypeObject *__pyx_ptype_8pydecode_5hyper_ConstrainedResult = 0;
static PyObject *__pyx_f_8pydecode_5hyper_convert_results(std::vector<ConstrainedResult>); /*proto*/
static PyObject *__pyx_f_8pydecode_5hyper_convert_constraints(std::vector<Constraint const *>); /*proto*/
static PyObject *__pyx_f_8pydecode_5hyper_convert_edges(std::vector<Hyperedge const *>); /*proto*/
static PyObject *__pyx_f_8pydecode_5hyper_convert_edge(Hyperedge const *); /*proto*/
static PyObject *__pyx_f_8pydecode_5hyper_convert_nodes(std::vector<Hypernode const *>); /*proto*/
static PyObject *__pyx_f_8pydecode_5hyper_convert_node(Hypernode const *); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
#define __Pyx_MODULE_NAME "pydecode.hyper"
int __pyx_module_is_main_pydecode__hyper = 0;

/* Implementation of 'pydecode.hyper' */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_pf_8pydecode_5hyper_5Chart___getitem__(struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_2outside_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights, struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_inside_chart); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4best_constrained(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights, struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_constraints); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_17ConstrainedResult___getattr__(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static int __pyx_pf_8pydecode_5hyper_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_2builder(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_indexed); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_4__getattr__(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_6edges_size(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_8label(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_10node_label(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder___enter__(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder_2__exit__(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder_4add_node(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label); /* proto */
static Py_hash_t __pyx_pf_8pydecode_5hyper_4Node___hash__(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Node_2__getattr__(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Node_4is_terminal(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_5hyper_4Node_6__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Node_8removed(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self); /* proto */
static int __pyx_pf_8pydecode_5hyper_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_8pydecode_5hyper_4Edge_2__hash__(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Edge_4__getattr__(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Edge_6removed(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_4Path___getattr__(struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static int __pyx_pf_8pydecode_5hyper_4Path_2__contains__(struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge); /* proto */
static int __pyx_pf_8pydecode_5hyper_7Weights___cinit__(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_7Weights_2__getitem__(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_7Weights_4dot(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Constraint___str__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_10Constraint_2__getattr__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static int __pyx_pf_8pydecode_5hyper_10Constraint_4__contains__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge); /* proto */
static int __pyx_pf_8pydecode_5hyper_11Constraints___cinit__(struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_hypergraph, PyObject *__pyx_v_constraints, PyObject *__pyx_v_builder); /* proto */
static PyObject *__pyx_pf_8pydecode_5hyper_11Constraints_2check(struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path); /* proto */
static PyObject *__pyx_tp_new_8pydecode_5hyper_Weights(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Constraints(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_GraphBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Constraint(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Edge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Path(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Chart(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_Hypergraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pydecode_5hyper_ConstrainedResult(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_3[] = "";
static char __pyx_k_4[] = "Bad node id.";
static char __pyx_k_5[] = "Bad edge id.";
static char __pyx_k_8[] = "/home/srush/Projects/decoding/python/pydecode/hyper.pyx";
static char __pyx_k_9[] = "pydecode.hyper";
static char __pyx_k__b[] = "b";
static char __pyx_k__c[] = "c";
static char __pyx_k__fn[] = "fn";
static char __pyx_k__id[] = "id";
static char __pyx_k__dual[] = "dual";
static char __pyx_k__head[] = "head";
static char __pyx_k__path[] = "path";
static char __pyx_k__root[] = "root";
static char __pyx_k__tail[] = "tail";
static char __pyx_k__chart[] = "chart";
static char __pyx_k__cpath[] = "cpath";
static char __pyx_k__edges[] = "edges";
static char __pyx_k__graph[] = "graph";
static char __pyx_k__hpath[] = "hpath";
static char __pyx_k__index[] = "index";
static char __pyx_k__label[] = "label";
static char __pyx_k__nodes[] = "nodes";
static char __pyx_k__append[] = "append";
static char __pyx_k__primal[] = "primal";
static char __pyx_k__builder[] = "builder";
static char __pyx_k__indexed[] = "indexed";
static char __pyx_k__removed[] = "removed";
static char __pyx_k__results[] = "results";
static char __pyx_k__weights[] = "weights";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__best_path[] = "best_path";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__exception[] = "exception";
static char __pyx_k__out_chart[] = "out_chart";
static char __pyx_k__hypergraph[] = "hypergraph";
static char __pyx_k__setdefault[] = "setdefault";
static char __pyx_k__constraints[] = "constraints";
static char __pyx_k__inside_chart[] = "inside_chart";
static char __pyx_k__outside_path[] = "outside_path";
static char __pyx_k____pyx_vtable__[] = "__pyx_vtable__";
static char __pyx_k__best_constrained[] = "best_constrained";
static PyObject *__pyx_kp_b_3;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_n_s_9;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____pyx_vtable__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__append;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__best_constrained;
static PyObject *__pyx_n_s__best_path;
static PyObject *__pyx_n_s__builder;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__chart;
static PyObject *__pyx_n_s__constraints;
static PyObject *__pyx_n_s__cpath;
static PyObject *__pyx_n_s__dual;
static PyObject *__pyx_n_s__edges;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__exception;
static PyObject *__pyx_n_s__fn;
static PyObject *__pyx_n_s__graph;
static PyObject *__pyx_n_s__head;
static PyObject *__pyx_n_s__hpath;
static PyObject *__pyx_n_s__hypergraph;
static PyObject *__pyx_n_s__id;
static PyObject *__pyx_n_s__index;
static PyObject *__pyx_n_s__indexed;
static PyObject *__pyx_n_s__inside_chart;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__nodes;
static PyObject *__pyx_n_s__out_chart;
static PyObject *__pyx_n_s__outside_path;
static PyObject *__pyx_n_s__path;
static PyObject *__pyx_n_s__primal;
static PyObject *__pyx_n_s__removed;
static PyObject *__pyx_n_s__results;
static PyObject *__pyx_n_s__root;
static PyObject *__pyx_n_s__setdefault;
static PyObject *__pyx_n_s__tail;
static PyObject *__pyx_n_s__weights;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_k_1;
static PyObject *__pyx_k_2;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_codeobj_7;
static PyObject *__pyx_k_codeobj_11;
static PyObject *__pyx_k_codeobj_13;

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_5Chart_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static char __pyx_doc_8pydecode_5hyper_5Chart___getitem__[] = "\n        Get the chart score for a node.\n\n        :param node: The node to check.\n        :returns: A score\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8pydecode_5hyper_5Chart___getitem__;
#endif
static PyObject *__pyx_pw_8pydecode_5hyper_5Chart_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_8pydecode_5hyper_Node, 1, "node", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_5Chart___getitem__(((struct __pyx_obj_8pydecode_5hyper_Chart *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_node));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":89
 *     cdef vector[double] chart
 * 
 *     def __getitem__(self, Node node):             # <<<<<<<<<<<<<<
 *         """
 *         Get the chart score for a node.
 */

static PyObject *__pyx_pf_8pydecode_5hyper_5Chart___getitem__(struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hyper.pyx":96
 *         :returns: A score
 *         """
 *         return self.chart[node.id]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_node), __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsSize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->chart[__pyx_t_2])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Chart.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_1best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_best_path[] = "best_path(Hypergraph graph, Weights weights)\n\n    Find the highest-score path in the hypergraph.\n\n    :param graph: The hypergraph to search.\n    :param weights: The weights of the hypergraph.\n    :returns: The best path and inside chart.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_5hyper_1best_path = {__Pyx_NAMESTR("best_path"), (PyCFunction)__pyx_pw_8pydecode_5hyper_1best_path, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_best_path)};
static PyObject *__pyx_pw_8pydecode_5hyper_1best_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("best_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__weights,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("best_path", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "best_path") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)values[0]);
    __pyx_v_weights = ((struct __pyx_obj_8pydecode_5hyper_Weights *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("best_path", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_5hyper_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_8pydecode_5hyper_Weights, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_best_path(__pyx_self, __pyx_v_graph, __pyx_v_weights);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":100
 * 
 * 
 * def best_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *               Weights weights):
 *     """
 */

static PyObject *__pyx_pf_8pydecode_5hyper_best_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights) {
  struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_chart = 0;
  Hyperpath const *__pyx_v_hpath;
  struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("best_path", 0);

  /* "pydecode/hyper.pyx":110
 *     """
 * 
 *     cdef Chart chart = Chart()             # <<<<<<<<<<<<<<
 *     cdef const CHyperpath *hpath = \
 *         viterbi_path(graph.thisptr,
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Chart)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_chart = ((struct __pyx_obj_8pydecode_5hyper_Chart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":114
 *         viterbi_path(graph.thisptr,
 *                      deref(weights.thisptr),
 *                      &chart.chart)             # <<<<<<<<<<<<<<
 *     cdef Path path = Path()
 *     path.init(hpath)
 */
  __pyx_v_hpath = viterbi_path(__pyx_v_graph->thisptr, (*__pyx_v_weights->thisptr), (&__pyx_v_chart->chart));

  /* "pydecode/hyper.pyx":115
 *                      deref(weights.thisptr),
 *                      &chart.chart)
 *     cdef Path path = Path()             # <<<<<<<<<<<<<<
 *     path.init(hpath)
 *     return path, chart
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Path)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path = ((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":116
 *                      &chart.chart)
 *     cdef Path path = Path()
 *     path.init(hpath)             # <<<<<<<<<<<<<<
 *     return path, chart
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Path *)__pyx_v_path->__pyx_vtab)->init(__pyx_v_path, __pyx_v_hpath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":117
 *     cdef Path path = Path()
 *     path.init(hpath)
 *     return path, chart             # <<<<<<<<<<<<<<
 * 
 * def outside_path(Hypergraph graph,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_path));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_path));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
  __Pyx_INCREF(((PyObject *)__pyx_v_chart));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_chart));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_chart));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.best_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chart);
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_3outside_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_2outside_path[] = "outside_path(Hypergraph graph, Weights weights, Chart inside_chart)\n\n    Find the outside score for the hypergraph.\n\n    :param graph: The hypergraph to search.\n    :param weights: The weights of the hypergraph.\n    :param inside_chart: The inside chart.\n    :returns: The outside chart.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_5hyper_3outside_path = {__Pyx_NAMESTR("outside_path"), (PyCFunction)__pyx_pw_8pydecode_5hyper_3outside_path, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_2outside_path)};
static PyObject *__pyx_pw_8pydecode_5hyper_3outside_path(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights = 0;
  struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_inside_chart = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("outside_path (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__weights,&__pyx_n_s__inside_chart,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside_path", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__inside_chart)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("outside_path", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outside_path") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)values[0]);
    __pyx_v_weights = ((struct __pyx_obj_8pydecode_5hyper_Weights *)values[1]);
    __pyx_v_inside_chart = ((struct __pyx_obj_8pydecode_5hyper_Chart *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("outside_path", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.outside_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_5hyper_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_8pydecode_5hyper_Weights, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inside_chart), __pyx_ptype_8pydecode_5hyper_Chart, 1, "inside_chart", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_2outside_path(__pyx_self, __pyx_v_graph, __pyx_v_weights, __pyx_v_inside_chart);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":119
 *     return path, chart
 * 
 * def outside_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  Weights weights,
 *                  Chart inside_chart):
 */

static PyObject *__pyx_pf_8pydecode_5hyper_2outside_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights, struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_inside_chart) {
  struct __pyx_obj_8pydecode_5hyper_Chart *__pyx_v_out_chart = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("outside_path", 0);

  /* "pydecode/hyper.pyx":130
 *     :returns: The outside chart.
 *     """
 *     cdef Chart out_chart = Chart()             # <<<<<<<<<<<<<<
 *     outside(graph.thisptr, deref(weights.thisptr),
 *             inside_chart.chart, &out_chart.chart)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Chart)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_chart = ((struct __pyx_obj_8pydecode_5hyper_Chart *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":132
 *     cdef Chart out_chart = Chart()
 *     outside(graph.thisptr, deref(weights.thisptr),
 *             inside_chart.chart, &out_chart.chart)             # <<<<<<<<<<<<<<
 *     return out_chart
 * 
 */
  outside(__pyx_v_graph->thisptr, (*__pyx_v_weights->thisptr), __pyx_v_inside_chart->chart, (&__pyx_v_out_chart->chart));

  /* "pydecode/hyper.pyx":133
 *     outside(graph.thisptr, deref(weights.thisptr),
 *             inside_chart.chart, &out_chart.chart)
 *     return out_chart             # <<<<<<<<<<<<<<
 * 
 * def best_constrained(Hypergraph graph,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out_chart));
  __pyx_r = ((PyObject *)__pyx_v_out_chart);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.outside_path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out_chart);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_5best_constrained(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4best_constrained[] = "best_constrained(Hypergraph graph, Weights weights, Constraints constraints)\n\n    Find the highest-scoring path satisfying constraints.\n\n    :param graph: The hypergraph to search.\n    :param weights: The weights of the hypergraph.\n    :param constraints: The hyperedge constraints.\n    :returns: The best path and the dual values.\n    ";
static PyMethodDef __pyx_mdef_8pydecode_5hyper_5best_constrained = {__Pyx_NAMESTR("best_constrained"), (PyCFunction)__pyx_pw_8pydecode_5hyper_5best_constrained, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_4best_constrained)};
static PyObject *__pyx_pw_8pydecode_5hyper_5best_constrained(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph = 0;
  struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights = 0;
  struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_constraints = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("best_constrained (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__weights,&__pyx_n_s__constraints,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("best_constrained", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__constraints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("best_constrained", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "best_constrained") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)values[0]);
    __pyx_v_weights = ((struct __pyx_obj_8pydecode_5hyper_Weights *)values[1]);
    __pyx_v_constraints = ((struct __pyx_obj_8pydecode_5hyper_Constraints *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("best_constrained", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.best_constrained", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_5hyper_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_8pydecode_5hyper_Weights, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_constraints), __pyx_ptype_8pydecode_5hyper_Constraints, 1, "constraints", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_4best_constrained(__pyx_self, __pyx_v_graph, __pyx_v_weights, __pyx_v_constraints);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":135
 *     return out_chart
 * 
 * def best_constrained(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                      Weights weights,
 *                      Constraints constraints):
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4best_constrained(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_weights, struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_constraints) {
  std::vector<ConstrainedResult> __pyx_v_results;
  Hyperpath *__pyx_v_cpath;
  struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("best_constrained", 0);

  /* "pydecode/hyper.pyx":150
 *                           deref(weights.thisptr),
 *                           deref(constraints.thisptr),
 *                           &results)             # <<<<<<<<<<<<<<
 * 
 *     cdef Path path = Path()
 */
  __pyx_v_cpath = best_constrained_path(__pyx_v_graph->thisptr, (*__pyx_v_weights->thisptr), (*__pyx_v_constraints->thisptr), (&__pyx_v_results));

  /* "pydecode/hyper.pyx":152
 *                           &results)
 * 
 *     cdef Path path = Path()             # <<<<<<<<<<<<<<
 *     path.init(cpath)
 *     return path, convert_results(results)
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Path)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_path = ((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":153
 * 
 *     cdef Path path = Path()
 *     path.init(cpath)             # <<<<<<<<<<<<<<
 *     return path, convert_results(results)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Path *)__pyx_v_path->__pyx_vtab)->init(__pyx_v_path, __pyx_v_cpath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":154
 *     cdef Path path = Path()
 *     path.init(cpath)
 *     return path, convert_results(results)             # <<<<<<<<<<<<<<
 * 
 * cdef convert_results(vector[CConstrainedResult] c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_results(__pyx_v_results); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_path));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_path));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_path));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hyper.best_constrained", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":156
 *     return path, convert_results(results)
 * 
 * cdef convert_results(vector[CConstrainedResult] c):             # <<<<<<<<<<<<<<
 *     cdef results = []
 *     for cresult in c:
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_results(std::vector<ConstrainedResult> __pyx_v_c) {
  PyObject *__pyx_v_results = 0;
  ConstrainedResult __pyx_v_cresult;
  struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *__pyx_v_py_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<ConstrainedResult>::iterator __pyx_t_2;
  ConstrainedResult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_results", 0);

  /* "pydecode/hyper.pyx":157
 * 
 * cdef convert_results(vector[CConstrainedResult] c):
 *     cdef results = []             # <<<<<<<<<<<<<<
 *     for cresult in c:
 *         py_res = ConstrainedResult()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":158
 * cdef convert_results(vector[CConstrainedResult] c):
 *     cdef results = []
 *     for cresult in c:             # <<<<<<<<<<<<<<
 *         py_res = ConstrainedResult()
 *         py_res.init(cresult)
 */
  __pyx_t_2 = __pyx_v_c.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_c.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_cresult = __pyx_t_3;

    /* "pydecode/hyper.pyx":159
 *     cdef results = []
 *     for cresult in c:
 *         py_res = ConstrainedResult()             # <<<<<<<<<<<<<<
 *         py_res.init(cresult)
 *         results.append(py_res)
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_ConstrainedResult)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(((PyObject *)__pyx_v_py_res));
    __pyx_v_py_res = ((struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":160
 *     for cresult in c:
 *         py_res = ConstrainedResult()
 *         py_res.init(cresult)             # <<<<<<<<<<<<<<
 *         results.append(py_res)
 *     return results
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_ConstrainedResult *)__pyx_v_py_res->__pyx_vtab)->init(__pyx_v_py_res, __pyx_v_cresult); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":161
 *         py_res = ConstrainedResult()
 *         py_res.init(cresult)
 *         results.append(py_res)             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_results, ((PyObject *)__pyx_v_py_res)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pydecode/hyper.pyx":162
 *         py_res.init(cresult)
 *         results.append(py_res)
 *     return results             # <<<<<<<<<<<<<<
 * 
 * cdef convert_constraints(vector[const CConstraint *] c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.convert_results", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":164
 *     return results
 * 
 * cdef convert_constraints(vector[const CConstraint *] c):             # <<<<<<<<<<<<<<
 *     cdef results = []
 *     for cresult in c:
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_constraints(std::vector<Constraint const *> __pyx_v_c) {
  PyObject *__pyx_v_results = 0;
  Constraint const *__pyx_v_cresult;
  struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_py_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Constraint const *>::iterator __pyx_t_2;
  Constraint const *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_constraints", 0);

  /* "pydecode/hyper.pyx":165
 * 
 * cdef convert_constraints(vector[const CConstraint *] c):
 *     cdef results = []             # <<<<<<<<<<<<<<
 *     for cresult in c:
 *         py_res = Constraint()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_results = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":166
 * cdef convert_constraints(vector[const CConstraint *] c):
 *     cdef results = []
 *     for cresult in c:             # <<<<<<<<<<<<<<
 *         py_res = Constraint()
 *         py_res.init(cresult)
 */
  __pyx_t_2 = __pyx_v_c.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_c.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_cresult = __pyx_t_3;

    /* "pydecode/hyper.pyx":167
 *     cdef results = []
 *     for cresult in c:
 *         py_res = Constraint()             # <<<<<<<<<<<<<<
 *         py_res.init(cresult)
 *         results.append(py_res)
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Constraint)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(((PyObject *)__pyx_v_py_res));
    __pyx_v_py_res = ((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":168
 *     for cresult in c:
 *         py_res = Constraint()
 *         py_res.init(cresult)             # <<<<<<<<<<<<<<
 *         results.append(py_res)
 *     return results
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Constraint *)__pyx_v_py_res->__pyx_vtab)->init(__pyx_v_py_res, __pyx_v_cresult); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":169
 *         py_res = Constraint()
 *         py_res.init(cresult)
 *         results.append(py_res)             # <<<<<<<<<<<<<<
 *     return results
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_results, ((PyObject *)__pyx_v_py_res)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pydecode/hyper.pyx":170
 *         py_res.init(cresult)
 *         results.append(py_res)
 *     return results             # <<<<<<<<<<<<<<
 * 
 * cdef class ConstrainedResult:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.convert_constraints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF((PyObject *)__pyx_v_py_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":174
 * cdef class ConstrainedResult:
 *     cdef CConstrainedResult thisptr
 *     cdef init(self, CConstrainedResult ptr):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_17ConstrainedResult_init(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *__pyx_v_self, ConstrainedResult __pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":175
 *     cdef CConstrainedResult thisptr
 *     cdef init(self, CConstrainedResult ptr):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_17ConstrainedResult_1__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_17ConstrainedResult_1__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_17ConstrainedResult___getattr__(((struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":177
 *         self.thisptr = ptr
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         if attr == "path":
 *             path = Path()
 */

static PyObject *__pyx_pf_8pydecode_5hyper_17ConstrainedResult___getattr__(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *__pyx_v_self, PyObject *__pyx_v_attr) {
  struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":178
 * 
 *     def __getattr__(self, attr):
 *         if attr == "path":             # <<<<<<<<<<<<<<
 *             path = Path()
 *             path.init(self.thisptr.path)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__path), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":179
 *     def __getattr__(self, attr):
 *         if attr == "path":
 *             path = Path()             # <<<<<<<<<<<<<<
 *             path.init(self.thisptr.path)
 *             return path
 */
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Path)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_path = ((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":180
 *         if attr == "path":
 *             path = Path()
 *             path.init(self.thisptr.path)             # <<<<<<<<<<<<<<
 *             return path
 *         if attr == "dual":
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Path *)__pyx_v_path->__pyx_vtab)->init(__pyx_v_path, __pyx_v_self->thisptr.path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pydecode/hyper.pyx":181
 *             path = Path()
 *             path.init(self.thisptr.path)
 *             return path             # <<<<<<<<<<<<<<
 *         if attr == "dual":
 *             return self.thisptr.dual
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_path));
    __pyx_r = ((PyObject *)__pyx_v_path);
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":182
 *             path.init(self.thisptr.path)
 *             return path
 *         if attr == "dual":             # <<<<<<<<<<<<<<
 *             return self.thisptr.dual
 *         if attr == "primal":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__dual), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":183
 *             return path
 *         if attr == "dual":
 *             return self.thisptr.dual             # <<<<<<<<<<<<<<
 *         if attr == "primal":
 *             return self.thisptr.primal
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr.dual); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/hyper.pyx":184
 *         if attr == "dual":
 *             return self.thisptr.dual
 *         if attr == "primal":             # <<<<<<<<<<<<<<
 *             return self.thisptr.primal
 *         if attr == "constraints":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__primal), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":185
 *             return self.thisptr.dual
 *         if attr == "primal":
 *             return self.thisptr.primal             # <<<<<<<<<<<<<<
 *         if attr == "constraints":
 *             return convert_constraints(self.thisptr.constraints)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr.primal); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pydecode/hyper.pyx":186
 *         if attr == "primal":
 *             return self.thisptr.primal
 *         if attr == "constraints":             # <<<<<<<<<<<<<<
 *             return convert_constraints(self.thisptr.constraints)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__constraints), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":187
 *             return self.thisptr.primal
 *         if attr == "constraints":
 *             return convert_constraints(self.thisptr.constraints)             # <<<<<<<<<<<<<<
 * 
 * cdef class Hypergraph:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_constraints(__pyx_v_self->thisptr.constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.ConstrainedResult.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_5hyper_10Hypergraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph___cinit__(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":194
 *     cdef indexed_types
 *     cdef node_labels
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHypergraph()
 *         self.types = []
 */

static int __pyx_pf_8pydecode_5hyper_10Hypergraph___cinit__(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/hyper.pyx":195
 *     cdef node_labels
 *     def __cinit__(self):
 *         self.thisptr = new CHypergraph()             # <<<<<<<<<<<<<<
 *         self.types = []
 *         self.node_labels = []
 */
  __pyx_v_self->thisptr = new Hypergraph();

  /* "pydecode/hyper.pyx":196
 *     def __cinit__(self):
 *         self.thisptr = new CHypergraph()
 *         self.types = []             # <<<<<<<<<<<<<<
 *         self.node_labels = []
 *         self.indexed_types = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->types);
  __Pyx_DECREF(__pyx_v_self->types);
  __pyx_v_self->types = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":197
 *         self.thisptr = new CHypergraph()
 *         self.types = []
 *         self.node_labels = []             # <<<<<<<<<<<<<<
 *         self.indexed_types = {}
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":198
 *         self.types = []
 *         self.node_labels = []
 *         self.indexed_types = {}             # <<<<<<<<<<<<<<
 * 
 *     def builder(self, indexed = False):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->indexed_types);
  __Pyx_DECREF(__pyx_v_self->indexed_types);
  __pyx_v_self->indexed_types = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_3builder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_10Hypergraph_2builder[] = "Hypergraph.builder(self, indexed=False)";
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_3builder(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indexed = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("builder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__indexed,0};
    PyObject* values[1] = {0};
    values[0] = __pyx_k_1;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indexed);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "builder") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indexed = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("builder", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.builder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph_2builder(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self), __pyx_v_indexed);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":200
 *         self.indexed_types = {}
 * 
 *     def builder(self, indexed = False):             # <<<<<<<<<<<<<<
 *         gb = GraphBuilder()
 *         gb.init(self, self.thisptr, indexed)
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_2builder(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_indexed) {
  struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_gb = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("builder", 0);

  /* "pydecode/hyper.pyx":201
 * 
 *     def builder(self, indexed = False):
 *         gb = GraphBuilder()             # <<<<<<<<<<<<<<
 *         gb.init(self, self.thisptr, indexed)
 *         return gb
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_GraphBuilder)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_gb = ((struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":202
 *     def builder(self, indexed = False):
 *         gb = GraphBuilder()
 *         gb.init(self, self.thisptr, indexed)             # <<<<<<<<<<<<<<
 *         return gb
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_GraphBuilder *)__pyx_v_gb->__pyx_vtab)->init(__pyx_v_gb, __pyx_v_self, __pyx_v_self->thisptr, __pyx_v_indexed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":203
 *         gb = GraphBuilder()
 *         gb.init(self, self.thisptr, indexed)
 *         return gb             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_gb));
  __pyx_r = ((PyObject *)__pyx_v_gb);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.builder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gb);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph_4__getattr__(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":205
 *         return gb
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         if attr == "nodes":
 *             return convert_nodes(self.thisptr.nodes())
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_4__getattr__(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":206
 * 
 *     def __getattr__(self, attr):
 *         if attr == "nodes":             # <<<<<<<<<<<<<<
 *             return convert_nodes(self.thisptr.nodes())
 *         if attr == "root":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__nodes), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":207
 *     def __getattr__(self, attr):
 *         if attr == "nodes":
 *             return convert_nodes(self.thisptr.nodes())             # <<<<<<<<<<<<<<
 *         if attr == "root":
 *             return convert_node(self.thisptr.root())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_nodes(__pyx_v_self->thisptr->nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":208
 *         if attr == "nodes":
 *             return convert_nodes(self.thisptr.nodes())
 *         if attr == "root":             # <<<<<<<<<<<<<<
 *             return convert_node(self.thisptr.root())
 *         if attr == "edges":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__root), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":209
 *             return convert_nodes(self.thisptr.nodes())
 *         if attr == "root":
 *             return convert_node(self.thisptr.root())             # <<<<<<<<<<<<<<
 *         if attr == "edges":
 *             return convert_edges(self.thisptr.edges())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_node(__pyx_v_self->thisptr->root()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/hyper.pyx":210
 *         if attr == "root":
 *             return convert_node(self.thisptr.root())
 *         if attr == "edges":             # <<<<<<<<<<<<<<
 *             return convert_edges(self.thisptr.edges())
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__edges), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":211
 *             return convert_node(self.thisptr.root())
 *         if attr == "edges":
 *             return convert_edges(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     def edges_size(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_edges(__pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_7edges_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_5hyper_10Hypergraph_6edges_size[] = "Hypergraph.edges_size(self)";
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_7edges_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("edges_size (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph_6edges_size(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":213
 *             return convert_edges(self.thisptr.edges())
 * 
 *     def edges_size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.edges().size()
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_6edges_size(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("edges_size", 0);

  /* "pydecode/hyper.pyx":214
 * 
 *     def edges_size(self):
 *         return self.thisptr.edges().size()             # <<<<<<<<<<<<<<
 * 
 *     def label(self, edge):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->edges().size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.edges_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_9label(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static char __pyx_doc_8pydecode_5hyper_10Hypergraph_8label[] = "Hypergraph.label(self, edge)";
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_9label(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("label (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph_8label(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self), ((PyObject *)__pyx_v_edge));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":216
 *         return self.thisptr.edges().size()
 * 
 *     def label(self, edge):             # <<<<<<<<<<<<<<
 *         return self.types[edge.id]
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_8label(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("label", 0);

  /* "pydecode/hyper.pyx":217
 * 
 *     def label(self, edge):
 *         return self.types[edge.id]             # <<<<<<<<<<<<<<
 * 
 *     def node_label(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->types, __pyx_t_1); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_11node_label(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static char __pyx_doc_8pydecode_5hyper_10Hypergraph_10node_label[] = "Hypergraph.node_label(self, node)";
static PyObject *__pyx_pw_8pydecode_5hyper_10Hypergraph_11node_label(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("node_label (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Hypergraph_10node_label(((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)__pyx_v_self), ((PyObject *)__pyx_v_node));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":219
 *         return self.types[edge.id]
 * 
 *     def node_label(self, node):             # <<<<<<<<<<<<<<
 *         return self.node_labels[node.id]
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Hypergraph_10node_label(struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("node_label", 0);

  /* "pydecode/hyper.pyx":220
 * 
 *     def node_label(self, node):
 *         return self.node_labels[node.id]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->node_labels, __pyx_t_1); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pydecode.hyper.Hypergraph.node_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":235
 *     cdef indexed
 * 
 *     cdef init(self, Hypergraph hyper, CHypergraph *ptr, indexed):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 *         self.indexed = indexed
 */

static PyObject *__pyx_f_8pydecode_5hyper_12GraphBuilder_init(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_hyper, Hypergraph *__pyx_v_ptr, PyObject *__pyx_v_indexed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":236
 * 
 *     cdef init(self, Hypergraph hyper, CHypergraph *ptr, indexed):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 *         self.indexed = indexed
 *         self.hyper = hyper
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  /* "pydecode/hyper.pyx":237
 *     cdef init(self, Hypergraph hyper, CHypergraph *ptr, indexed):
 *         self.thisptr = ptr
 *         self.indexed = indexed             # <<<<<<<<<<<<<<
 *         self.hyper = hyper
 *         self.types = []
 */
  __Pyx_INCREF(__pyx_v_indexed);
  __Pyx_GIVEREF(__pyx_v_indexed);
  __Pyx_GOTREF(__pyx_v_self->indexed);
  __Pyx_DECREF(__pyx_v_self->indexed);
  __pyx_v_self->indexed = __pyx_v_indexed;

  /* "pydecode/hyper.pyx":238
 *         self.thisptr = ptr
 *         self.indexed = indexed
 *         self.hyper = hyper             # <<<<<<<<<<<<<<
 *         self.types = []
 *         self.node_labels = []
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hyper));
  __Pyx_GOTREF(__pyx_v_self->hyper);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hyper));
  __pyx_v_self->hyper = __pyx_v_hyper;

  /* "pydecode/hyper.pyx":239
 *         self.indexed = indexed
 *         self.hyper = hyper
 *         self.types = []             # <<<<<<<<<<<<<<
 *         self.node_labels = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->types);
  __Pyx_DECREF(__pyx_v_self->types);
  __pyx_v_self->types = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":240
 *         self.hyper = hyper
 *         self.types = []
 *         self.node_labels = []             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self): return self
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(__pyx_v_self->node_labels);
  __Pyx_DECREF(__pyx_v_self->node_labels);
  __pyx_v_self->node_labels = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.GraphBuilder.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_1__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_5hyper_12GraphBuilder___enter__[] = "GraphBuilder.__enter__(self)";
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_1__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_12GraphBuilder___enter__(((struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":242
 *         self.node_labels = []
 * 
 *     def __enter__(self): return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exception, b, c):
 */

static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder___enter__(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_3__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_12GraphBuilder_2__exit__[] = "GraphBuilder.__exit__(self, exception, b, c)";
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_3__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exception = 0;
  CYTHON_UNUSED PyObject *__pyx_v_b = 0;
  CYTHON_UNUSED PyObject *__pyx_v_c = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__exception,&__pyx_n_s__b,&__pyx_n_s__c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__exception)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exception = values[0];
    __pyx_v_b = values[1];
    __pyx_v_c = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_5hyper_12GraphBuilder_2__exit__(((struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)__pyx_v_self), __pyx_v_exception, __pyx_v_b, __pyx_v_c);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":244
 *     def __enter__(self): return self
 * 
 *     def __exit__(self, exception, b, c):             # <<<<<<<<<<<<<<
 *         if exception:
 *            return False
 */

static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder_2__exit__(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_exception, CYTHON_UNUSED PyObject *__pyx_v_b, CYTHON_UNUSED PyObject *__pyx_v_c) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "pydecode/hyper.pyx":245
 * 
 *     def __exit__(self, exception, b, c):
 *         if exception:             # <<<<<<<<<<<<<<
 *            return False
 *         self.thisptr.finish()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_exception); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "pydecode/hyper.pyx":246
 *     def __exit__(self, exception, b, c):
 *         if exception:
 *            return False             # <<<<<<<<<<<<<<
 *         self.thisptr.finish()
 *         self.hyper.types = [None] * self.thisptr.edges().size()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":247
 *         if exception:
 *            return False
 *         self.thisptr.finish()             # <<<<<<<<<<<<<<
 *         self.hyper.types = [None] * self.thisptr.edges().size()
 *         self.hyper.node_labels = [None] * self.thisptr.nodes().size()
 */
  __pyx_v_self->thisptr->finish();

  /* "pydecode/hyper.pyx":248
 *            return False
 *         self.thisptr.finish()
 *         self.hyper.types = [None] * self.thisptr.edges().size()             # <<<<<<<<<<<<<<
 *         self.hyper.node_labels = [None] * self.thisptr.nodes().size()
 * 
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->edges().size()<0) ? 0:__pyx_v_self->thisptr->edges().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->edges().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(__pyx_v_self->hyper->types);
  __Pyx_DECREF(__pyx_v_self->hyper->types);
  __pyx_v_self->hyper->types = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hyper.pyx":249
 *         self.thisptr.finish()
 *         self.hyper.types = [None] * self.thisptr.edges().size()
 *         self.hyper.node_labels = [None] * self.thisptr.nodes().size()             # <<<<<<<<<<<<<<
 * 
 *         for node, t in self.node_labels:
 */
  __pyx_t_2 = PyList_New(1 * ((__pyx_v_self->thisptr->nodes().size()<0) ? 0:__pyx_v_self->thisptr->nodes().size())); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_self->thisptr->nodes().size(); __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None);
      __Pyx_GIVEREF(Py_None);
    }
  }
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(__pyx_v_self->hyper->node_labels);
  __Pyx_DECREF(__pyx_v_self->hyper->node_labels);
  __pyx_v_self->hyper->node_labels = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pydecode/hyper.pyx":251
 *         self.hyper.node_labels = [None] * self.thisptr.nodes().size()
 * 
 *         for node, t in self.node_labels:             # <<<<<<<<<<<<<<
 *             if not node.removed():
 *                 self.hyper.node_labels[node.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->node_labels) || PyTuple_CheckExact(__pyx_v_self->node_labels)) {
    __pyx_t_2 = __pyx_v_self->node_labels; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->node_labels); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_node);
    __pyx_v_node = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_v_t);
    __pyx_v_t = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "pydecode/hyper.pyx":252
 * 
 *         for node, t in self.node_labels:
 *             if not node.removed():             # <<<<<<<<<<<<<<
 *                 self.hyper.node_labels[node.id] = t
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s__removed); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = ((!__pyx_t_1) != 0);
    if (__pyx_t_10) {

      /* "pydecode/hyper.pyx":253
 *         for node, t in self.node_labels:
 *             if not node.removed():
 *                 self.hyper.node_labels[node.id] = t             # <<<<<<<<<<<<<<
 * 
 *         for edge, t in self.types:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s__id); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (PyObject_SetItem(__pyx_v_self->hyper->node_labels, __pyx_t_7, __pyx_v_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pydecode/hyper.pyx":255
 *                 self.hyper.node_labels[node.id] = t
 * 
 *         for edge, t in self.types:             # <<<<<<<<<<<<<<
 *             if not edge.removed():
 *                 self.hyper.types[edge.id] = t
 */
  if (PyList_CheckExact(__pyx_v_self->types) || PyTuple_CheckExact(__pyx_v_self->types)) {
    __pyx_t_2 = __pyx_v_self->types; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_7 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {
      PyObject* sequence = __pyx_t_7;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_edge);
    __pyx_v_edge = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_v_t);
    __pyx_v_t = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pydecode/hyper.pyx":256
 * 
 *         for edge, t in self.types:
 *             if not edge.removed():             # <<<<<<<<<<<<<<
 *                 self.hyper.types[edge.id] = t
 *                 if self.indexed:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__removed); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = ((!__pyx_t_10) != 0);
    if (__pyx_t_1) {

      /* "pydecode/hyper.pyx":257
 *         for edge, t in self.types:
 *             if not edge.removed():
 *                 self.hyper.types[edge.id] = t             # <<<<<<<<<<<<<<
 *                 if self.indexed:
 *                     self.hyper.indexed_types.setdefault(t.index(), [])
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      if (PyObject_SetItem(__pyx_v_self->hyper->types, __pyx_t_6, __pyx_v_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pydecode/hyper.pyx":258
 *             if not edge.removed():
 *                 self.hyper.types[edge.id] = t
 *                 if self.indexed:             # <<<<<<<<<<<<<<
 *                     self.hyper.indexed_types.setdefault(t.index(), [])
 *                     self.hyper.indexed_types[t.index()].append((edge.id, t))
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->indexed); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_1) {

        /* "pydecode/hyper.pyx":259
 *                 self.hyper.types[edge.id] = t
 *                 if self.indexed:
 *                     self.hyper.indexed_types.setdefault(t.index(), [])             # <<<<<<<<<<<<<<
 *                     self.hyper.indexed_types[t.index()].append((edge.id, t))
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->hyper->indexed_types, __pyx_n_s__setdefault); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s__index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 1, ((PyObject *)__pyx_t_7));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_7));
        __pyx_t_5 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "pydecode/hyper.pyx":260
 *                 if self.indexed:
 *                     self.hyper.indexed_types.setdefault(t.index(), [])
 *                     self.hyper.indexed_types[t.index()].append((edge.id, t))             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, edges = [], label = ""):
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_t, __pyx_n_s__index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyObject_GetItem(__pyx_v_self->hyper->indexed_types, __pyx_t_8); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_edge, __pyx_n_s__id); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_t);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_t);
        __Pyx_GIVEREF(__pyx_v_t);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_t_7, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L14;
      }
      __pyx_L14:;
      goto __pyx_L13;
    }
    __pyx_L13:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pydecode.hyper.GraphBuilder.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_5add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8pydecode_5hyper_12GraphBuilder_4add_node[] = "GraphBuilder.add_node(self, edges=[], label='')\n\n        Add a node to the hypergraph.\n\n        :param edges: A list of edges of the form ([v_2, v_3..], label).\n        :param label: Optional label for the node.\n\n        ";
static PyObject *__pyx_pw_8pydecode_5hyper_12GraphBuilder_5add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_label = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__edges,&__pyx_n_s__label,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k_2;
    values[1] = ((PyObject *)__pyx_kp_s_3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__edges);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edges = values[0];
    __pyx_v_label = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pydecode_5hyper_12GraphBuilder_4add_node(((struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)__pyx_v_self), __pyx_v_edges, __pyx_v_label);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":262
 *                     self.hyper.indexed_types[t.index()].append((edge.id, t))
 * 
 *     def add_node(self, edges = [], label = ""):             # <<<<<<<<<<<<<<
 *         """
 *         Add a node to the hypergraph.
 */

static PyObject *__pyx_pf_8pydecode_5hyper_12GraphBuilder_4add_node(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_label) {
  struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_node = 0;
  Hypernode const *__pyx_v_nodeptr;
  std::vector<Hypernode const *> __pyx_v_tail_node_ptrs;
  Hyperedge const *__pyx_v_edgeptr;
  PyObject *__pyx_v_tail_nodes = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_tail_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  std::string __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "pydecode/hyper.pyx":271
 *         """
 * 
 *         cdef Node node = Node()             # <<<<<<<<<<<<<<
 *         cdef const CHypernode *nodeptr
 *         cdef vector[const CHypernode *] tail_node_ptrs
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":275
 *         cdef vector[const CHypernode *] tail_node_ptrs
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:             # <<<<<<<<<<<<<<
 *             nodeptr = self.thisptr.add_terminal_node(str(label))
 *         else:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_edges, ((PyObject *)__pyx_t_1), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "pydecode/hyper.pyx":276
 *         cdef const CHyperedge *edgeptr
 *         if edges == []:
 *             nodeptr = self.thisptr.add_terminal_node(str(label))             # <<<<<<<<<<<<<<
 *         else:
 *             nodeptr = self.thisptr.start_node(str(label))
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_label);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_label);
    __Pyx_GIVEREF(__pyx_v_label);
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_nodeptr = __pyx_v_self->thisptr->add_terminal_node(__pyx_t_4);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "pydecode/hyper.pyx":278
 *             nodeptr = self.thisptr.add_terminal_node(str(label))
 *         else:
 *             nodeptr = self.thisptr.start_node(str(label))             # <<<<<<<<<<<<<<
 *             for tail_nodes, t in edges:
 *                 tail_node_ptrs.clear()
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_label);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_label);
    __Pyx_GIVEREF(__pyx_v_label);
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_nodeptr = __pyx_v_self->thisptr->start_node(__pyx_t_4);

    /* "pydecode/hyper.pyx":279
 *         else:
 *             nodeptr = self.thisptr.start_node(str(label))
 *             for tail_nodes, t in edges:             # <<<<<<<<<<<<<<
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:
 */
    if (PyList_CheckExact(__pyx_v_edges) || PyTuple_CheckExact(__pyx_v_edges)) {
      __pyx_t_2 = __pyx_v_edges; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_edges); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF(__pyx_v_tail_nodes);
      __pyx_v_tail_nodes = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "pydecode/hyper.pyx":280
 *             nodeptr = self.thisptr.start_node(str(label))
 *             for tail_nodes, t in edges:
 *                 tail_node_ptrs.clear()             # <<<<<<<<<<<<<<
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 */
      __pyx_v_tail_node_ptrs.clear();

      /* "pydecode/hyper.pyx":281
 *             for tail_nodes, t in edges:
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:             # <<<<<<<<<<<<<<
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs, "")
 */
      if (PyList_CheckExact(__pyx_v_tail_nodes) || PyTuple_CheckExact(__pyx_v_tail_nodes)) {
        __pyx_t_1 = __pyx_v_tail_nodes; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_tail_nodes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext;
      }
      for (;;) {
        if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_1)) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_8); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_1)) {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_8); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_8 = __pyx_t_12(__pyx_t_1);
          if (unlikely(!__pyx_t_8)) {
            if (PyErr_Occurred()) {
              if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF(__pyx_v_tail_node);
        __pyx_v_tail_node = __pyx_t_8;
        __pyx_t_8 = 0;

        /* "pydecode/hyper.pyx":282
 *                 tail_node_ptrs.clear()
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)             # <<<<<<<<<<<<<<
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs, "")
 *                 self.types.append((convert_edge(edgeptr), t))
 */
        __pyx_v_tail_node_ptrs.push_back(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_tail_node)->nodeptr);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pydecode/hyper.pyx":283
 *                 for tail_node in tail_nodes:
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs, "")             # <<<<<<<<<<<<<<
 *                 self.types.append((convert_edge(edgeptr), t))
 *             self.thisptr.end_node()
 */
      __pyx_t_4 = __pyx_convert_string_from_py_(((PyObject *)__pyx_kp_b_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_edgeptr = __pyx_v_self->thisptr->add_edge(__pyx_v_tail_node_ptrs, __pyx_t_4);

      /* "pydecode/hyper.pyx":284
 *                     tail_node_ptrs.push_back((<Node> tail_node).nodeptr)
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs, "")
 *                 self.types.append((convert_edge(edgeptr), t))             # <<<<<<<<<<<<<<
 *             self.thisptr.end_node()
 *         self.node_labels.append((node, label))
 */
      __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_edge(__pyx_v_edgeptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_t);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_t);
      __Pyx_GIVEREF(__pyx_v_t);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_self->types, ((PyObject *)__pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pydecode/hyper.pyx":285
 *                 edgeptr = self.thisptr.add_edge(tail_node_ptrs, "")
 *                 self.types.append((convert_edge(edgeptr), t))
 *             self.thisptr.end_node()             # <<<<<<<<<<<<<<
 *         self.node_labels.append((node, label))
 *         node.init(nodeptr)
 */
    __pyx_v_self->thisptr->end_node();
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":286
 *                 self.types.append((convert_edge(edgeptr), t))
 *             self.thisptr.end_node()
 *         self.node_labels.append((node, label))             # <<<<<<<<<<<<<<
 *         node.init(nodeptr)
 *         return node
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_node));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_node));
  __Pyx_INCREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  __pyx_t_1 = __Pyx_PyObject_Append(__pyx_v_self->node_labels, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":287
 *             self.thisptr.end_node()
 *         self.node_labels.append((node, label))
 *         node.init(nodeptr)             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Node *)__pyx_v_node->__pyx_vtab)->init(__pyx_v_node, __pyx_v_nodeptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":288
 *         self.node_labels.append((node, label))
 *         node.init(nodeptr)
 *         return node             # <<<<<<<<<<<<<<
 * 
 * cdef class Node:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_node));
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pydecode.hyper.GraphBuilder.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_tail_nodes);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_tail_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":294
 *     cdef CHypergraph *graphptr
 * 
 *     cdef init(self, const CHypernode *nodeptr):             # <<<<<<<<<<<<<<
 *         self.nodeptr = nodeptr
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_4Node_init(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self, Hypernode const *__pyx_v_nodeptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":295
 * 
 *     cdef init(self, const CHypernode *nodeptr):
 *         self.nodeptr = nodeptr             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __pyx_v_self->nodeptr = __pyx_v_nodeptr;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_5hyper_4Node_1__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_5hyper_4Node_1__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Node___hash__(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":297
 *         self.nodeptr = nodeptr
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

static Py_hash_t __pyx_pf_8pydecode_5hyper_4Node___hash__(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/hyper.pyx":298
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Node.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Node_2__getattr__(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":300
 *         return self.id
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         if attr == "id":
 *             assert self.nodeptr.id() != -1, "Bad node id."
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Node_2__getattr__(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":301
 * 
 *     def __getattr__(self, attr):
 *         if attr == "id":             # <<<<<<<<<<<<<<
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__id), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":302
 *     def __getattr__(self, attr):
 *         if attr == "id":
 *             assert self.nodeptr.id() != -1, "Bad node id."             # <<<<<<<<<<<<<<
 *             return self.nodeptr.id()
 *         if attr == "edges":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!((__pyx_v_self->nodeptr->id() != -1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_4));
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif

    /* "pydecode/hyper.pyx":303
 *         if attr == "id":
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()             # <<<<<<<<<<<<<<
 *         if attr == "edges":
 *             return convert_edges(self.nodeptr.edges())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->nodeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":304
 *             assert self.nodeptr.id() != -1, "Bad node id."
 *             return self.nodeptr.id()
 *         if attr == "edges":             # <<<<<<<<<<<<<<
 *             return convert_edges(self.nodeptr.edges())
 *         if attr == "label":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__edges), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":305
 *             return self.nodeptr.id()
 *         if attr == "edges":
 *             return convert_edges(self.nodeptr.edges())             # <<<<<<<<<<<<<<
 *         if attr == "label":
 *             return self.nodeptr.label()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_edges(__pyx_v_self->nodeptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/hyper.pyx":306
 *         if attr == "edges":
 *             return convert_edges(self.nodeptr.edges())
 *         if attr == "label":             # <<<<<<<<<<<<<<
 *             return self.nodeptr.label()
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__label), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":307
 *             return convert_edges(self.nodeptr.edges())
 *         if attr == "label":
 *             return self.nodeptr.label()             # <<<<<<<<<<<<<<
 * 
 *     def is_terminal(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->nodeptr->label()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_r = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Node.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_5is_terminal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4Node_4is_terminal[] = "Node.is_terminal(self)";
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_5is_terminal(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_terminal (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Node_4is_terminal(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":309
 *             return self.nodeptr.label()
 * 
 *     def is_terminal(self):             # <<<<<<<<<<<<<<
 *         return self.nodeptr.edges().size() == 0
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Node_4is_terminal(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_terminal", 0);

  /* "pydecode/hyper.pyx":310
 * 
 *     def is_terminal(self):
 *         return self.nodeptr.edges().size() == 0             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->edges().size() == 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Node.is_terminal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_4Node_7__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_5hyper_4Node_7__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Node_6__cinit__(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":312
 *         return self.nodeptr.edges().size() == 0
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static int __pyx_pf_8pydecode_5hyper_4Node_6__cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_9removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4Node_8removed[] = "Node.removed(self)";
static PyObject *__pyx_pw_8pydecode_5hyper_4Node_9removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Node_8removed(((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":315
 *         pass
 * 
 *     def removed(self):             # <<<<<<<<<<<<<<
 *         return (self.nodeptr.id() == -1)
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Node_8removed(struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removed", 0);

  /* "pydecode/hyper.pyx":316
 * 
 *     def removed(self):
 *         return (self.nodeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef class Edge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->nodeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Node.removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_5hyper_4Edge_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Edge___cinit__(((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":321
 *     cdef const CHyperedge *edgeptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static int __pyx_pf_8pydecode_5hyper_4Edge___cinit__(CYTHON_UNUSED struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static Py_hash_t __pyx_pw_8pydecode_5hyper_4Edge_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_8pydecode_5hyper_4Edge_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Edge_2__hash__(((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":324
 *         pass
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.id
 * 
 */

static Py_hash_t __pyx_pf_8pydecode_5hyper_4Edge_2__hash__(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "pydecode/hyper.pyx":325
 * 
 *     def __hash__(self):
 *         return self.id             # <<<<<<<<<<<<<<
 * 
 *     cdef init(self, const CHyperedge *ptr):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s__id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Edge.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":327
 *         return self.id
 * 
 *     cdef init(self, const CHyperedge *ptr):             # <<<<<<<<<<<<<<
 *         self.edgeptr = ptr
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_4Edge_init(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self, Hyperedge const *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":328
 * 
 *     cdef init(self, const CHyperedge *ptr):
 *         self.edgeptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_v_self->edgeptr = __pyx_v_ptr;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Edge_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_4Edge_5__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Edge_4__getattr__(((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":330
 *         self.edgeptr = ptr
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         if attr == "label":
 *             return self.edgeptr.label()
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Edge_4__getattr__(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":331
 * 
 *     def __getattr__(self, attr):
 *         if attr == "label":             # <<<<<<<<<<<<<<
 *             return self.edgeptr.label()
 *         if attr == "tail":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__label), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":332
 *     def __getattr__(self, attr):
 *         if attr == "label":
 *             return self.edgeptr.label()             # <<<<<<<<<<<<<<
 *         if attr == "tail":
 *             return convert_nodes(self.edgeptr.tail_nodes())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->edgeptr->label()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_r = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "pydecode/hyper.pyx":333
 *         if attr == "label":
 *             return self.edgeptr.label()
 *         if attr == "tail":             # <<<<<<<<<<<<<<
 *             return convert_nodes(self.edgeptr.tail_nodes())
 *         if attr == "head":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__tail), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":334
 *             return self.edgeptr.label()
 *         if attr == "tail":
 *             return convert_nodes(self.edgeptr.tail_nodes())             # <<<<<<<<<<<<<<
 *         if attr == "head":
 *             return convert_node(self.edgeptr.head_node())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_nodes(__pyx_v_self->edgeptr->tail_nodes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "pydecode/hyper.pyx":335
 *         if attr == "tail":
 *             return convert_nodes(self.edgeptr.tail_nodes())
 *         if attr == "head":             # <<<<<<<<<<<<<<
 *             return convert_node(self.edgeptr.head_node())
 *         if attr == "id":
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__head), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":336
 *             return convert_nodes(self.edgeptr.tail_nodes())
 *         if attr == "head":
 *             return convert_node(self.edgeptr.head_node())             # <<<<<<<<<<<<<<
 *         if attr == "id":
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_node(__pyx_v_self->edgeptr->head_node()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "pydecode/hyper.pyx":337
 *         if attr == "head":
 *             return convert_node(self.edgeptr.head_node())
 *         if attr == "id":             # <<<<<<<<<<<<<<
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__id), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":338
 *             return convert_node(self.edgeptr.head_node())
 *         if attr == "id":
 *             assert self.edgeptr.id() != -1, "Bad edge id."             # <<<<<<<<<<<<<<
 *             return self.edgeptr.id()
 * 
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!((__pyx_v_self->edgeptr->id() != -1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, ((PyObject *)__pyx_kp_s_5));
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #endif

    /* "pydecode/hyper.pyx":339
 *         if attr == "id":
 *             assert self.edgeptr.id() != -1, "Bad edge id."
 *             return self.edgeptr.id()             # <<<<<<<<<<<<<<
 * 
 *     def removed(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyInt_FromLong(__pyx_v_self->edgeptr->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Edge.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Edge_7removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4Edge_6removed[] = "Edge.removed(self)";
static PyObject *__pyx_pw_8pydecode_5hyper_4Edge_7removed(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removed (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Edge_6removed(((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":341
 *             return self.edgeptr.id()
 * 
 *     def removed(self):             # <<<<<<<<<<<<<<
 *         return (self.edgeptr.id() == -1)
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Edge_6removed(struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removed", 0);

  /* "pydecode/hyper.pyx":342
 * 
 *     def removed(self):
 *         return (self.edgeptr.id() == -1)             # <<<<<<<<<<<<<<
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->edgeptr->id() == -1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Edge.removed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":344
 *         return (self.edgeptr.id() == -1)
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges):             # <<<<<<<<<<<<<<
 *     return [convert_edge(edge) for edge in edges]
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_edges(std::vector<Hyperedge const *> __pyx_v_edges) {
  Hyperedge const *__pyx_v_edge;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hyperedge const *>::iterator __pyx_t_2;
  Hyperedge const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_edges", 0);

  /* "pydecode/hyper.pyx":345
 * 
 * cdef convert_edges(vector[const CHyperedge *] edges):
 *     return [convert_edge(edge) for edge in edges]             # <<<<<<<<<<<<<<
 * 
 * cdef convert_edge(const CHyperedge * edge):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_edges.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_edges.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_edge = __pyx_t_3;
    __pyx_t_4 = __pyx_f_8pydecode_5hyper_convert_edge(__pyx_v_edge); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hyper.convert_edges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":347
 *     return [convert_edge(edge) for edge in edges]
 * 
 * cdef convert_edge(const CHyperedge * edge):             # <<<<<<<<<<<<<<
 *     py_edge = Edge()
 *     py_edge.init(edge)
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_edge(Hyperedge const *__pyx_v_edge) {
  struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_py_edge = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_edge", 0);

  /* "pydecode/hyper.pyx":348
 * 
 * cdef convert_edge(const CHyperedge * edge):
 *     py_edge = Edge()             # <<<<<<<<<<<<<<
 *     py_edge.init(edge)
 *     return py_edge
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Edge)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_edge = ((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":349
 * cdef convert_edge(const CHyperedge * edge):
 *     py_edge = Edge()
 *     py_edge.init(edge)             # <<<<<<<<<<<<<<
 *     return py_edge
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Edge *)__pyx_v_py_edge->__pyx_vtab)->init(__pyx_v_py_edge, __pyx_v_edge); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":350
 *     py_edge = Edge()
 *     py_edge.init(edge)
 *     return py_edge             # <<<<<<<<<<<<<<
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_edge));
  __pyx_r = ((PyObject *)__pyx_v_py_edge);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.convert_edge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_edge);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":352
 *     return py_edge
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes):             # <<<<<<<<<<<<<<
 *     return [convert_node(node) for node in nodes]
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_nodes(std::vector<Hypernode const *> __pyx_v_nodes) {
  Hypernode const *__pyx_v_node;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Hypernode const *>::iterator __pyx_t_2;
  Hypernode const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_nodes", 0);

  /* "pydecode/hyper.pyx":353
 * 
 * cdef convert_nodes(vector[const CHypernode *] nodes):
 *     return [convert_node(node) for node in nodes]             # <<<<<<<<<<<<<<
 * 
 * cdef convert_node(const CHypernode * node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_nodes.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_nodes.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_node = __pyx_t_3;
    __pyx_t_4 = __pyx_f_8pydecode_5hyper_convert_node(__pyx_v_node); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pydecode.hyper.convert_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":355
 *     return [convert_node(node) for node in nodes]
 * 
 * cdef convert_node(const CHypernode * node):             # <<<<<<<<<<<<<<
 *     py_node = Node()
 *     py_node.init(node)
 */

static PyObject *__pyx_f_8pydecode_5hyper_convert_node(Hypernode const *__pyx_v_node) {
  struct __pyx_obj_8pydecode_5hyper_Node *__pyx_v_py_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_node", 0);

  /* "pydecode/hyper.pyx":356
 * 
 * cdef convert_node(const CHypernode * node):
 *     py_node = Node()             # <<<<<<<<<<<<<<
 *     py_node.init(node)
 *     return py_node
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Node)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_node = ((struct __pyx_obj_8pydecode_5hyper_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":357
 * cdef convert_node(const CHypernode * node):
 *     py_node = Node()
 *     py_node.init(node)             # <<<<<<<<<<<<<<
 *     return py_node
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Node *)__pyx_v_py_node->__pyx_vtab)->init(__pyx_v_py_node, __pyx_v_node); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":358
 *     py_node = Node()
 *     py_node.init(node)
 *     return py_node             # <<<<<<<<<<<<<<
 * 
 * cdef class Path:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_node));
  __pyx_r = ((PyObject *)__pyx_v_py_node);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.convert_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":365
 *     """
 *     cdef const CHyperpath *thisptr
 *     cdef init(self, const CHyperpath *path):             # <<<<<<<<<<<<<<
 *         self.thisptr = path
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_4Path_init(struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_self, Hyperpath const *__pyx_v_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":366
 *     cdef const CHyperpath *thisptr
 *     cdef init(self, const CHyperpath *path):
 *         self.thisptr = path             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_v_self->thisptr = __pyx_v_path;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_4Path_1__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4Path___getattr__[] = "\n        Returns the edges in the path.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8pydecode_5hyper_4Path___getattr__;
#endif
static PyObject *__pyx_pw_8pydecode_5hyper_4Path_1__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Path___getattr__(((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":368
 *         self.thisptr = path
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the edges in the path.
 */

static PyObject *__pyx_pf_8pydecode_5hyper_4Path___getattr__(struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":372
 *         Returns the edges in the path.
 *         """
 *         if attr == "edges":             # <<<<<<<<<<<<<<
 *             return convert_edges(self.thisptr.edges())
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__edges), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pydecode/hyper.pyx":373
 *         """
 *         if attr == "edges":
 *             return convert_edges(self.thisptr.edges())             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, Edge edge):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_f_8pydecode_5hyper_convert_edges(__pyx_v_self->thisptr->edges()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Path.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_4Path_3__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static char __pyx_doc_8pydecode_5hyper_4Path_2__contains__[] = "\n        Check whether an edge is in the path.\n\n        :param edge: The edge to check.\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8pydecode_5hyper_4Path_2__contains__;
#endif
static int __pyx_pw_8pydecode_5hyper_4Path_3__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_5hyper_Edge, 1, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_4Path_2__contains__(((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_edge));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":375
 *             return convert_edges(self.thisptr.edges())
 * 
 *     def __contains__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         """
 *         Check whether an edge is in the path.
 */

static int __pyx_pf_8pydecode_5hyper_4Path_2__contains__(struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "pydecode/hyper.pyx":381
 *         :param edge: The edge to check.
 *         """
 *         return self.thisptr.has_edge(edge.edgeptr)             # <<<<<<<<<<<<<<
 * 
 * cdef class Weights:
 */
  __pyx_r = __pyx_v_self->thisptr->has_edge(__pyx_v_edge->edgeptr);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_7Weights_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_5hyper_7Weights_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_fn = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__graph,&__pyx_n_s__fn,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)values[0]);
    __pyx_v_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.Weights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_8pydecode_5hyper_Hypergraph, 1, "graph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_7Weights___cinit__(((struct __pyx_obj_8pydecode_5hyper_Weights *)__pyx_v_self), __pyx_v_graph, __pyx_v_fn);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":389
 *     cdef Hypergraph hypergraph
 *     cdef const CHypergraphWeights *thisptr
 *     def __cinit__(self, Hypergraph graph, fn):             # <<<<<<<<<<<<<<
 *         """
 *         Build the weight vector for a hypergraph.
 */

static int __pyx_pf_8pydecode_5hyper_7Weights___cinit__(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_graph, PyObject *__pyx_v_fn) {
  std::vector<double> __pyx_v_weights;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ty = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pydecode/hyper.pyx":396
 *         :param fn: A function from edge labels to weights.
 *         """
 *         self.hypergraph = graph             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] weights
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_graph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_graph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_graph;

  /* "pydecode/hyper.pyx":399
 * 
 *         cdef vector[double] weights
 *         weights.resize(self.hypergraph.thisptr.edges().size())             # <<<<<<<<<<<<<<
 *         for i, ty in enumerate(self.hypergraph.types):
 *             weights[i] = fn(ty)
 */
  __pyx_v_weights.resize(__pyx_v_self->hypergraph->thisptr->edges().size());

  /* "pydecode/hyper.pyx":400
 *         cdef vector[double] weights
 *         weights.resize(self.hypergraph.thisptr.edges().size())
 *         for i, ty in enumerate(self.hypergraph.types):             # <<<<<<<<<<<<<<
 *             weights[i] = fn(ty)
 *         self.thisptr =  \
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_self->hypergraph->types) || PyTuple_CheckExact(__pyx_v_self->hypergraph->types)) {
    __pyx_t_2 = __pyx_v_self->hypergraph->types; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_self->hypergraph->types); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF(__pyx_v_ty);
    __pyx_v_ty = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_1;
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pydecode/hyper.pyx":401
 *         weights.resize(self.hypergraph.thisptr.edges().size())
 *         for i, ty in enumerate(self.hypergraph.types):
 *             weights[i] = fn(ty)             # <<<<<<<<<<<<<<
 *         self.thisptr =  \
 *           new CHypergraphWeights(self.hypergraph.thisptr,
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_ty);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_ty);
    __Pyx_GIVEREF(__pyx_v_ty);
    __pyx_t_6 = PyObject_Call(__pyx_v_fn, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyInt_AsSize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (__pyx_v_weights[__pyx_t_8]) = __pyx_t_7;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":402
 *         for i, ty in enumerate(self.hypergraph.types):
 *             weights[i] = fn(ty)
 *         self.thisptr =  \             # <<<<<<<<<<<<<<
 *           new CHypergraphWeights(self.hypergraph.thisptr,
 *                                  weights, 0.0)
 */
  __pyx_v_self->thisptr = new HypergraphWeights(__pyx_v_self->hypergraph->thisptr, __pyx_v_weights, 0.0);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pydecode.hyper.Weights.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ty);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_7Weights_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_7Weights_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_5hyper_Edge, 1, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_7Weights_2__getitem__(((struct __pyx_obj_8pydecode_5hyper_Weights *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_edge));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":406
 *                                  weights, 0.0)
 * 
 *     def __getitem__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         return self.thisptr.score(edge.edgeptr)
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_7Weights_2__getitem__(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pydecode/hyper.pyx":407
 * 
 *     def __getitem__(self, Edge edge):
 *         return self.thisptr.score(edge.edgeptr)             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, Path path):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->score(__pyx_v_edge->edgeptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Weights.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_7Weights_5dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_5hyper_7Weights_4dot[] = "Weights.dot(self, Path path)\n\n        Score a path with a weight vector.\n\n        :param path: The hyperpath  to score.\n        :return: The score.\n        ";
static PyObject *__pyx_pw_8pydecode_5hyper_7Weights_5dot(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_5hyper_Path, 1, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_7Weights_4dot(((struct __pyx_obj_8pydecode_5hyper_Weights *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_v_path));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":409
 *         return self.thisptr.score(edge.edgeptr)
 * 
 *     def dot(self, Path path):             # <<<<<<<<<<<<<<
 *         """
 *         Score a path with a weight vector.
 */

static PyObject *__pyx_pf_8pydecode_5hyper_7Weights_4dot(struct __pyx_obj_8pydecode_5hyper_Weights *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path) {
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pydecode/hyper.pyx":417
 *         """
 * 
 *         cdef double result = self.thisptr.dot(deref(path.thisptr))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_v_result = __pyx_v_self->thisptr->dot((*__pyx_v_path->thisptr));

  /* "pydecode/hyper.pyx":418
 * 
 *         cdef double result = self.thisptr.dot(deref(path.thisptr))
 *         return result             # <<<<<<<<<<<<<<
 * 
 * cdef class Constraint:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Weights.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":422
 * cdef class Constraint:
 *     cdef const CConstraint *thisptr
 *     cdef init(self, const CConstraint *ptr):             # <<<<<<<<<<<<<<
 *         self.thisptr = ptr
 * 
 */

static PyObject *__pyx_f_8pydecode_5hyper_10Constraint_init(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self, Constraint const *__pyx_v_ptr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "pydecode/hyper.pyx":423
 *     cdef const CConstraint *thisptr
 *     cdef init(self, const CConstraint *ptr):
 *         self.thisptr = ptr             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self): return self.thisptr.label
 */
  __pyx_v_self->thisptr = __pyx_v_ptr;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Constraint_1__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_10Constraint_1__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Constraint___str__(((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":425
 *         self.thisptr = ptr
 * 
 *     def __str__(self): return self.thisptr.label             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Constraint___str__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->thisptr->label); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Constraint.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_10Constraint_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_pw_8pydecode_5hyper_10Constraint_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Constraint_2__getattr__(((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_v_self), ((PyObject *)__pyx_v_attr));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":427
 *     def __str__(self): return self.thisptr.label
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         if attr == "label": return self.thisptr.label
 * 
 */

static PyObject *__pyx_pf_8pydecode_5hyper_10Constraint_2__getattr__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "pydecode/hyper.pyx":428
 * 
 *     def __getattr__(self, attr):
 *         if attr == "label": return self.thisptr.label             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, Edge edge):
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_attr, ((PyObject *)__pyx_n_s__label), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->thisptr->label); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_r = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Constraint.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_10Constraint_5__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge); /*proto*/
static int __pyx_pw_8pydecode_5hyper_10Constraint_5__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_edge) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_edge), __pyx_ptype_8pydecode_5hyper_Edge, 1, "edge", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_10Constraint_4__contains__(((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Edge *)__pyx_v_edge));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":430
 *         if attr == "label": return self.thisptr.label
 * 
 *     def __contains__(self, Edge edge):             # <<<<<<<<<<<<<<
 *         self.thisptr.has_edge(edge.edgeptr)
 * 
 */

static int __pyx_pf_8pydecode_5hyper_10Constraint_4__contains__(struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Edge *__pyx_v_edge) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "pydecode/hyper.pyx":431
 * 
 *     def __contains__(self, Edge edge):
 *         self.thisptr.has_edge(edge.edgeptr)             # <<<<<<<<<<<<<<
 * 
 * cdef class Constraints:
 */
  __pyx_v_self->thisptr->has_edge(__pyx_v_edge->edgeptr);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8pydecode_5hyper_11Constraints_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pydecode_5hyper_11Constraints_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_hypergraph = 0;
  PyObject *__pyx_v_constraints = 0;
  PyObject *__pyx_v_builder = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__hypergraph,&__pyx_n_s__constraints,&__pyx_n_s__builder,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__hypergraph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__constraints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__builder)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_hypergraph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)values[0]);
    __pyx_v_constraints = values[1];
    __pyx_v_builder = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pydecode.hyper.Constraints.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hypergraph), __pyx_ptype_8pydecode_5hyper_Hypergraph, 1, "hypergraph", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_11Constraints___cinit__(((struct __pyx_obj_8pydecode_5hyper_Constraints *)__pyx_v_self), __pyx_v_hypergraph, __pyx_v_constraints, __pyx_v_builder);
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":440
 *     cdef CHypergraphConstraints *thisptr
 *     cdef Hypergraph hypergraph
 *     def __cinit__(self, Hypergraph hypergraph, constraints, builder):             # <<<<<<<<<<<<<<
 *         self.thisptr = new CHypergraphConstraints(hypergraph.thisptr)
 *         self.hypergraph = hypergraph
 */

static int __pyx_pf_8pydecode_5hyper_11Constraints___cinit__(struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Hypergraph *__pyx_v_hypergraph, PyObject *__pyx_v_constraints, PyObject *__pyx_v_builder) {
  Constraint *__pyx_v_cons;
  struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_hcons = 0;
  PyObject *__pyx_v_by_label = NULL;
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_v_constant = NULL;
  std::vector<Hyperedge const *> __pyx_v_edges;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_ty = NULL;
  PyObject *__pyx_v_coeff = NULL;
  struct __pyx_obj_8pydecode_5hyper_Constraint *__pyx_v_constraint = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  std::string __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  size_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_constraints);

  /* "pydecode/hyper.pyx":441
 *     cdef Hypergraph hypergraph
 *     def __cinit__(self, Hypergraph hypergraph, constraints, builder):
 *         self.thisptr = new CHypergraphConstraints(hypergraph.thisptr)             # <<<<<<<<<<<<<<
 *         self.hypergraph = hypergraph
 *         cdef CConstraint *cons
 */
  __pyx_v_self->thisptr = new HypergraphConstraints(__pyx_v_hypergraph->thisptr);

  /* "pydecode/hyper.pyx":442
 *     def __cinit__(self, Hypergraph hypergraph, constraints, builder):
 *         self.thisptr = new CHypergraphConstraints(hypergraph.thisptr)
 *         self.hypergraph = hypergraph             # <<<<<<<<<<<<<<
 *         cdef CConstraint *cons
 *         cdef Constraint hcons
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_hypergraph));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_hypergraph));
  __Pyx_GOTREF(__pyx_v_self->hypergraph);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->hypergraph));
  __pyx_v_self->hypergraph = __pyx_v_hypergraph;

  /* "pydecode/hyper.pyx":445
 *         cdef CConstraint *cons
 *         cdef Constraint hcons
 *         by_label = {}             # <<<<<<<<<<<<<<
 *         for label, constant in constraints:
 *             cons = self.thisptr.add_constraint(label)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_by_label = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":446
 *         cdef Constraint hcons
 *         by_label = {}
 *         for label, constant in constraints:             # <<<<<<<<<<<<<<
 *             cons = self.thisptr.add_constraint(label)
 *             hcons = Constraint()
 */
  if (PyList_CheckExact(__pyx_v_constraints) || PyTuple_CheckExact(__pyx_v_constraints)) {
    __pyx_t_1 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_constraints); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF(__pyx_v_label);
    __pyx_v_label = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_v_constant);
    __pyx_v_constant = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pydecode/hyper.pyx":447
 *         by_label = {}
 *         for label, constant in constraints:
 *             cons = self.thisptr.add_constraint(label)             # <<<<<<<<<<<<<<
 *             hcons = Constraint()
 *             hcons.init(cons)
 */
    __pyx_t_9 = __pyx_convert_string_from_py_(__pyx_v_label); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cons = __pyx_v_self->thisptr->add_constraint(__pyx_t_9);

    /* "pydecode/hyper.pyx":448
 *         for label, constant in constraints:
 *             cons = self.thisptr.add_constraint(label)
 *             hcons = Constraint()             # <<<<<<<<<<<<<<
 *             hcons.init(cons)
 *             cons.set_constant(constant)
 */
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_8pydecode_5hyper_Constraint)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF(((PyObject *)__pyx_v_hcons));
    __pyx_v_hcons = ((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pydecode/hyper.pyx":449
 *             cons = self.thisptr.add_constraint(label)
 *             hcons = Constraint()
 *             hcons.init(cons)             # <<<<<<<<<<<<<<
 *             cons.set_constant(constant)
 *             by_label[label] = hcons
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_8pydecode_5hyper_Constraint *)__pyx_v_hcons->__pyx_vtab)->init(__pyx_v_hcons, __pyx_v_cons); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pydecode/hyper.pyx":450
 *             hcons = Constraint()
 *             hcons.init(cons)
 *             cons.set_constant(constant)             # <<<<<<<<<<<<<<
 *             by_label[label] = hcons
 * 
 */
    __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_constant); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cons->set_constant(__pyx_t_10);

    /* "pydecode/hyper.pyx":451
 *             hcons.init(cons)
 *             cons.set_constant(constant)
 *             by_label[label] = hcons             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[const CHyperedge *] edges = self.hypergraph.thisptr.edges()
 */
    if (PyDict_SetItem(((PyObject *)__pyx_v_by_label), __pyx_v_label, ((PyObject *)__pyx_v_hcons)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":453
 *             by_label[label] = hcons
 * 
 *         cdef vector[const CHyperedge *] edges = self.hypergraph.thisptr.edges()             # <<<<<<<<<<<<<<
 *         for i, ty in enumerate(self.hypergraph.types):
 *             constraints = builder(ty)
 */
  __pyx_v_edges = __pyx_v_self->hypergraph->thisptr->edges();

  /* "pydecode/hyper.pyx":454
 * 
 *         cdef vector[const CHyperedge *] edges = self.hypergraph.thisptr.edges()
 *         for i, ty in enumerate(self.hypergraph.types):             # <<<<<<<<<<<<<<
 *             constraints = builder(ty)
 *             for label, coeff in constraints:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (PyList_CheckExact(__pyx_v_self->hypergraph->types) || PyTuple_CheckExact(__pyx_v_self->hypergraph->types)) {
    __pyx_t_4 = __pyx_v_self->hypergraph->types; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_self->hypergraph->types); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_3(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF(__pyx_v_ty);
    __pyx_v_ty = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_1;
    __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pydecode/hyper.pyx":455
 *         cdef vector[const CHyperedge *] edges = self.hypergraph.thisptr.edges()
 *         for i, ty in enumerate(self.hypergraph.types):
 *             constraints = builder(ty)             # <<<<<<<<<<<<<<
 *             for label, coeff in constraints:
 *                 constraint = <Constraint> by_label[label]
 */
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_ty);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_ty);
    __Pyx_GIVEREF(__pyx_v_ty);
    __pyx_t_5 = PyObject_Call(__pyx_v_builder, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_v_constraints);
    __pyx_v_constraints = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "pydecode/hyper.pyx":456
 *         for i, ty in enumerate(self.hypergraph.types):
 *             constraints = builder(ty)
 *             for label, coeff in constraints:             # <<<<<<<<<<<<<<
 *                 constraint = <Constraint> by_label[label]
 *                 (<CConstraint *> constraint.thisptr).add_edge_term(edges[i], coeff)
 */
    if (PyList_CheckExact(__pyx_v_constraints) || PyTuple_CheckExact(__pyx_v_constraints)) {
      __pyx_t_5 = __pyx_v_constraints; __Pyx_INCREF(__pyx_t_5); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_constraints); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = Py_TYPE(__pyx_t_5)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_5)) {
        if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_5)) {
        if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_6 = __pyx_t_12(__pyx_t_5);
        if (unlikely(!__pyx_t_6)) {
          if (PyErr_Occurred()) {
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_13);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_13);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_8(__pyx_t_14); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_13 = __pyx_t_8(__pyx_t_14); if (unlikely(!__pyx_t_13)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_13);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_14), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF(__pyx_v_label);
      __pyx_v_label = __pyx_t_7;
      __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_v_coeff);
      __pyx_v_coeff = __pyx_t_13;
      __pyx_t_13 = 0;

      /* "pydecode/hyper.pyx":457
 *             constraints = builder(ty)
 *             for label, coeff in constraints:
 *                 constraint = <Constraint> by_label[label]             # <<<<<<<<<<<<<<
 *                 (<CConstraint *> constraint.thisptr).add_edge_term(edges[i], coeff)
 * 
 */
      __pyx_t_6 = __Pyx_PyDict_GetItem(((PyObject *)__pyx_v_by_label), __pyx_v_label); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = __pyx_t_6;
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(((PyObject *)__pyx_v_constraint));
      __pyx_v_constraint = ((struct __pyx_obj_8pydecode_5hyper_Constraint *)__pyx_t_13);
      __pyx_t_13 = 0;

      /* "pydecode/hyper.pyx":458
 *             for label, coeff in constraints:
 *                 constraint = <Constraint> by_label[label]
 *                 (<CConstraint *> constraint.thisptr).add_edge_term(edges[i], coeff)             # <<<<<<<<<<<<<<
 * 
 *     # def add(self, string label, fn, int constant, index = None):
 */
      __pyx_t_15 = __Pyx_PyInt_AsSize_t(__pyx_v_i); if (unlikely((__pyx_t_15 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_10 = __Pyx_PyInt_AsInt(__pyx_v_coeff); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((Constraint *)__pyx_v_constraint->thisptr)->add_edge_term((__pyx_v_edges[__pyx_t_15]), __pyx_t_10);
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pydecode.hyper.Constraints.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_hcons);
  __Pyx_XDECREF(__pyx_v_by_label);
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XDECREF(__pyx_v_constant);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_ty);
  __Pyx_XDECREF(__pyx_v_coeff);
  __Pyx_XDECREF((PyObject *)__pyx_v_constraint);
  __Pyx_XDECREF(__pyx_v_constraints);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8pydecode_5hyper_11Constraints_3check(PyObject *__pyx_v_self, PyObject *__pyx_v_path); /*proto*/
static char __pyx_doc_8pydecode_5hyper_11Constraints_2check[] = "Constraints.check(self, Path path)\n\n        Check which constraints a path violates.\n\n        :param path: The hyperpath to check\n        :returns: The labels of violated constraints.\n        ";
static PyObject *__pyx_pw_8pydecode_5hyper_11Constraints_3check(PyObject *__pyx_v_self, PyObject *__pyx_v_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), __pyx_ptype_8pydecode_5hyper_Path, 1, "path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8pydecode_5hyper_11Constraints_2check(((struct __pyx_obj_8pydecode_5hyper_Constraints *)__pyx_v_self), ((struct __pyx_obj_8pydecode_5hyper_Path *)__pyx_v_path));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pydecode/hyper.pyx":485
 *     #     return hcons
 * 
 *     def check(self, Path path):             # <<<<<<<<<<<<<<
 *         """
 *         Check which constraints a path violates.
 */

static PyObject *__pyx_pf_8pydecode_5hyper_11Constraints_2check(struct __pyx_obj_8pydecode_5hyper_Constraints *__pyx_v_self, struct __pyx_obj_8pydecode_5hyper_Path *__pyx_v_path) {
  std::vector<Constraint const *> __pyx_v_failed;
  std::vector<int> __pyx_v_count;
  PyObject *__pyx_v_ret = NULL;
  Constraint const *__pyx_v_cons;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<Constraint const *>::iterator __pyx_t_2;
  Constraint const *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);

  /* "pydecode/hyper.pyx":497
 *         self.thisptr.check_constraints(deref(path.thisptr),
 *                                        &failed,
 *                                        &count)             # <<<<<<<<<<<<<<
 *         ret = []
 *         for cons in failed:
 */
  __pyx_v_self->thisptr->check_constraints((*__pyx_v_path->thisptr), (&__pyx_v_failed), (&__pyx_v_count));

  /* "pydecode/hyper.pyx":498
 *                                        &failed,
 *                                        &count)
 *         ret = []             # <<<<<<<<<<<<<<
 *         for cons in failed:
 *             ret.append(cons.label)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":499
 *                                        &count)
 *         ret = []
 *         for cons in failed:             # <<<<<<<<<<<<<<
 *             ret.append(cons.label)
 *         return ret
 */
  __pyx_t_2 = __pyx_v_failed.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_failed.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_cons = __pyx_t_3;

    /* "pydecode/hyper.pyx":500
 *         ret = []
 *         for cons in failed:
 *             ret.append(cons.label)             # <<<<<<<<<<<<<<
 *         return ret
 */
    __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_cons->label); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  }

  /* "pydecode/hyper.pyx":501
 *         for cons in failed:
 *             ret.append(cons.label)
 *         return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pydecode.hyper.Constraints.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_v_data = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length));

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8pydecode_5hyper_Weights(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Weights *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Weights *)o);
  p->hypergraph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_5hyper_7Weights_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Weights(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Weights *p = (struct __pyx_obj_8pydecode_5hyper_Weights *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->hypergraph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_5hyper_Weights(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_5hyper_Weights *p = (struct __pyx_obj_8pydecode_5hyper_Weights *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_5hyper_Weights(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Weights *p = (struct __pyx_obj_8pydecode_5hyper_Weights *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_8pydecode_5hyper_Weights(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Weights[] = {
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pw_8pydecode_5hyper_7Weights_5dot, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_7Weights_4dot)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Weights = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_5hyper_Weights, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Weights = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_5hyper_7Weights_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Weights = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Weights"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Weights), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Weights, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Weights, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Weights, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Weights associated with a hypergraph.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_5hyper_Weights, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_5hyper_Weights, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Weights, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Weights, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_5hyper_Constraints(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Constraints *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Constraints *)o);
  p->hypergraph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_5hyper_11Constraints_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Constraints(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Constraints *p = (struct __pyx_obj_8pydecode_5hyper_Constraints *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->hypergraph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_5hyper_Constraints(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_5hyper_Constraints *p = (struct __pyx_obj_8pydecode_5hyper_Constraints *)o;
  if (p->hypergraph) {
    e = (*v)(((PyObject*)p->hypergraph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_5hyper_Constraints(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Constraints *p = (struct __pyx_obj_8pydecode_5hyper_Constraints *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->hypergraph);
  p->hypergraph = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Constraints[] = {
  {__Pyx_NAMESTR("check"), (PyCFunction)__pyx_pw_8pydecode_5hyper_11Constraints_3check, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_11Constraints_2check)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Constraints = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Constraints"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Constraints), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Constraints, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    A class for storing the matrix of hypergraph constraints A y = b.\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_5hyper_Constraints, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_5hyper_Constraints, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Constraints, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Constraints, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_GraphBuilder __pyx_vtable_8pydecode_5hyper_GraphBuilder;

static PyObject *__pyx_tp_new_8pydecode_5hyper_GraphBuilder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_GraphBuilder *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_GraphBuilder;
  p->hyper = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  p->types = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  p->indexed = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_GraphBuilder(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_GraphBuilder *p = (struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->hyper);
  Py_CLEAR(p->types);
  Py_CLEAR(p->node_labels);
  Py_CLEAR(p->indexed);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_5hyper_GraphBuilder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_5hyper_GraphBuilder *p = (struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)o;
  if (p->hyper) {
    e = (*v)(((PyObject*)p->hyper), a); if (e) return e;
  }
  if (p->types) {
    e = (*v)(p->types, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  if (p->indexed) {
    e = (*v)(p->indexed, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_5hyper_GraphBuilder(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_GraphBuilder *p = (struct __pyx_obj_8pydecode_5hyper_GraphBuilder *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->hyper);
  p->hyper = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->types);
  p->types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indexed);
  p->indexed = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_GraphBuilder[] = {
  {__Pyx_NAMESTR("__enter__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_12GraphBuilder_1__enter__, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_12GraphBuilder___enter__)},
  {__Pyx_NAMESTR("__exit__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_12GraphBuilder_3__exit__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_12GraphBuilder_2__exit__)},
  {__Pyx_NAMESTR("add_node"), (PyCFunction)__pyx_pw_8pydecode_5hyper_12GraphBuilder_5add_node, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_12GraphBuilder_4add_node)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_GraphBuilder = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.GraphBuilder"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_GraphBuilder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_GraphBuilder, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    Build a hypergraph. Created using\n\n    with hypergraph.builder() as b:\n    "), /*tp_doc*/
  __pyx_tp_traverse_8pydecode_5hyper_GraphBuilder, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_5hyper_GraphBuilder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_GraphBuilder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_GraphBuilder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Node __pyx_vtable_8pydecode_5hyper_Node;

static PyObject *__pyx_tp_new_8pydecode_5hyper_Node(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Node *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Node *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_Node;
  if (unlikely(__pyx_pw_8pydecode_5hyper_4Node_7__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Node(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_Node(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_4Node_3__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Node[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Node_3__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("is_terminal"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Node_5is_terminal, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_4Node_4is_terminal)},
  {__Pyx_NAMESTR("removed"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Node_9removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_4Node_8removed)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Node"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_5hyper_4Node_1__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_Node, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Node, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Constraint __pyx_vtable_8pydecode_5hyper_Constraint;

static PyObject *__pyx_tp_new_8pydecode_5hyper_Constraint(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Constraint *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Constraint *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_Constraint;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Constraint(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_Constraint(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_10Constraint_3__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Constraint[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Constraint_3__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Constraint = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_8pydecode_5hyper_10Constraint_5__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Constraint = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Constraint"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Constraint), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Constraint, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Constraint, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_8pydecode_5hyper_10Constraint_1__str__, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_Constraint, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Constraint, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Constraint, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Edge __pyx_vtable_8pydecode_5hyper_Edge;

static PyObject *__pyx_tp_new_8pydecode_5hyper_Edge(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Edge *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Edge *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_Edge;
  if (unlikely(__pyx_pw_8pydecode_5hyper_4Edge_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Edge(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_Edge(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_4Edge_5__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Edge[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Edge_5__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("removed"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Edge_7removed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_4Edge_6removed)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Edge = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Edge"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Edge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Edge, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_8pydecode_5hyper_4Edge_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_Edge, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Edge, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Edge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_Path __pyx_vtable_8pydecode_5hyper_Path;

static PyObject *__pyx_tp_new_8pydecode_5hyper_Path(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Path *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Path *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_Path;
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Path(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_Path(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_4Path_1__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Path[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_4Path_1__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_4Path___getattr__)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Path = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_8pydecode_5hyper_4Path_3__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Path = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Path"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Path), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Path, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Path, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_Path, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    A valid path in the hypergraph.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Path, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Path, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_5hyper_Chart(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Chart *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Chart *)o);
  new((void*)&(p->chart)) std::vector<double>();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Chart(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Chart *p = (struct __pyx_obj_8pydecode_5hyper_Chart *)o;
  p->chart.std::vector<double>::~vector();
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_8pydecode_5hyper_Chart(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Chart[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Chart = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_8pydecode_5hyper_Chart, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Chart = {
  0, /*mp_length*/
  __pyx_pw_8pydecode_5hyper_5Chart_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Chart = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Chart"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Chart), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Chart, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Chart, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Chart, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Chart, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Chart, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_8pydecode_5hyper_Hypergraph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_Hypergraph *)o);
  p->types = Py_None; Py_INCREF(Py_None);
  p->indexed_types = Py_None; Py_INCREF(Py_None);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pydecode_5hyper_10Hypergraph_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_Hypergraph(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *p = (struct __pyx_obj_8pydecode_5hyper_Hypergraph *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->types);
  Py_CLEAR(p->indexed_types);
  Py_CLEAR(p->node_labels);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pydecode_5hyper_Hypergraph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *p = (struct __pyx_obj_8pydecode_5hyper_Hypergraph *)o;
  if (p->types) {
    e = (*v)(p->types, a); if (e) return e;
  }
  if (p->indexed_types) {
    e = (*v)(p->indexed_types, a); if (e) return e;
  }
  if (p->node_labels) {
    e = (*v)(p->node_labels, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pydecode_5hyper_Hypergraph(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_Hypergraph *p = (struct __pyx_obj_8pydecode_5hyper_Hypergraph *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->types);
  p->types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indexed_types);
  p->indexed_types = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_labels);
  p->node_labels = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_Hypergraph(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_10Hypergraph_5__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_Hypergraph[] = {
  {__Pyx_NAMESTR("builder"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Hypergraph_3builder, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_10Hypergraph_2builder)},
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Hypergraph_5__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("edges_size"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Hypergraph_7edges_size, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_10Hypergraph_6edges_size)},
  {__Pyx_NAMESTR("label"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Hypergraph_9label, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_10Hypergraph_8label)},
  {__Pyx_NAMESTR("node_label"), (PyCFunction)__pyx_pw_8pydecode_5hyper_10Hypergraph_11node_label, METH_O, __Pyx_DOCSTR(__pyx_doc_8pydecode_5hyper_10Hypergraph_10node_label)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_Hypergraph = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.Hypergraph"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_Hypergraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_Hypergraph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_Hypergraph, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pydecode_5hyper_Hypergraph, /*tp_traverse*/
  __pyx_tp_clear_8pydecode_5hyper_Hypergraph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_Hypergraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_Hypergraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};
static struct __pyx_vtabstruct_8pydecode_5hyper_ConstrainedResult __pyx_vtable_8pydecode_5hyper_ConstrainedResult;

static PyObject *__pyx_tp_new_8pydecode_5hyper_ConstrainedResult(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *p;
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pydecode_5hyper_ConstrainedResult;
  new((void*)&(p->thisptr)) ConstrainedResult();
  return o;
}

static void __pyx_tp_dealloc_8pydecode_5hyper_ConstrainedResult(PyObject *o) {
  struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *p = (struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *)o;
  p->thisptr.ConstrainedResult::~ConstrainedResult();
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_8pydecode_5hyper_ConstrainedResult(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_8pydecode_5hyper_17ConstrainedResult_1__getattr__(o, n);
  }
  return v;
}

static PyMethodDef __pyx_methods_8pydecode_5hyper_ConstrainedResult[] = {
  {__Pyx_NAMESTR("__getattr__"), (PyCFunction)__pyx_pw_8pydecode_5hyper_17ConstrainedResult_1__getattr__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pydecode_5hyper_ConstrainedResult = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pydecode.hyper.ConstrainedResult"), /*tp_name*/
  sizeof(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pydecode_5hyper_ConstrainedResult, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_8pydecode_5hyper_ConstrainedResult, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pydecode_5hyper_ConstrainedResult, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pydecode_5hyper_ConstrainedResult, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("hyper"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 0, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_n_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____pyx_vtable__, __pyx_k____pyx_vtable__, sizeof(__pyx_k____pyx_vtable__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__append, __pyx_k__append, sizeof(__pyx_k__append), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__best_constrained, __pyx_k__best_constrained, sizeof(__pyx_k__best_constrained), 0, 0, 1, 1},
  {&__pyx_n_s__best_path, __pyx_k__best_path, sizeof(__pyx_k__best_path), 0, 0, 1, 1},
  {&__pyx_n_s__builder, __pyx_k__builder, sizeof(__pyx_k__builder), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__chart, __pyx_k__chart, sizeof(__pyx_k__chart), 0, 0, 1, 1},
  {&__pyx_n_s__constraints, __pyx_k__constraints, sizeof(__pyx_k__constraints), 0, 0, 1, 1},
  {&__pyx_n_s__cpath, __pyx_k__cpath, sizeof(__pyx_k__cpath), 0, 0, 1, 1},
  {&__pyx_n_s__dual, __pyx_k__dual, sizeof(__pyx_k__dual), 0, 0, 1, 1},
  {&__pyx_n_s__edges, __pyx_k__edges, sizeof(__pyx_k__edges), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__exception, __pyx_k__exception, sizeof(__pyx_k__exception), 0, 0, 1, 1},
  {&__pyx_n_s__fn, __pyx_k__fn, sizeof(__pyx_k__fn), 0, 0, 1, 1},
  {&__pyx_n_s__graph, __pyx_k__graph, sizeof(__pyx_k__graph), 0, 0, 1, 1},
  {&__pyx_n_s__head, __pyx_k__head, sizeof(__pyx_k__head), 0, 0, 1, 1},
  {&__pyx_n_s__hpath, __pyx_k__hpath, sizeof(__pyx_k__hpath), 0, 0, 1, 1},
  {&__pyx_n_s__hypergraph, __pyx_k__hypergraph, sizeof(__pyx_k__hypergraph), 0, 0, 1, 1},
  {&__pyx_n_s__id, __pyx_k__id, sizeof(__pyx_k__id), 0, 0, 1, 1},
  {&__pyx_n_s__index, __pyx_k__index, sizeof(__pyx_k__index), 0, 0, 1, 1},
  {&__pyx_n_s__indexed, __pyx_k__indexed, sizeof(__pyx_k__indexed), 0, 0, 1, 1},
  {&__pyx_n_s__inside_chart, __pyx_k__inside_chart, sizeof(__pyx_k__inside_chart), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__nodes, __pyx_k__nodes, sizeof(__pyx_k__nodes), 0, 0, 1, 1},
  {&__pyx_n_s__out_chart, __pyx_k__out_chart, sizeof(__pyx_k__out_chart), 0, 0, 1, 1},
  {&__pyx_n_s__outside_path, __pyx_k__outside_path, sizeof(__pyx_k__outside_path), 0, 0, 1, 1},
  {&__pyx_n_s__path, __pyx_k__path, sizeof(__pyx_k__path), 0, 0, 1, 1},
  {&__pyx_n_s__primal, __pyx_k__primal, sizeof(__pyx_k__primal), 0, 0, 1, 1},
  {&__pyx_n_s__removed, __pyx_k__removed, sizeof(__pyx_k__removed), 0, 0, 1, 1},
  {&__pyx_n_s__results, __pyx_k__results, sizeof(__pyx_k__results), 0, 0, 1, 1},
  {&__pyx_n_s__root, __pyx_k__root, sizeof(__pyx_k__root), 0, 0, 1, 1},
  {&__pyx_n_s__setdefault, __pyx_k__setdefault, sizeof(__pyx_k__setdefault), 0, 0, 1, 1},
  {&__pyx_n_s__tail, __pyx_k__tail, sizeof(__pyx_k__tail), 0, 0, 1, 1},
  {&__pyx_n_s__weights, __pyx_k__weights, sizeof(__pyx_k__weights), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pydecode/hyper.pyx":100
 * 
 * 
 * def best_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *               Weights weights):
 *     """
 */
  __pyx_k_tuple_6 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__graph), ((PyObject *)__pyx_n_s__weights), ((PyObject *)__pyx_n_s__chart), ((PyObject *)__pyx_n_s__hpath), ((PyObject *)__pyx_n_s__path)); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_6);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));
  __pyx_k_codeobj_7 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_8, __pyx_n_s__best_path, 100, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hyper.pyx":119
 *     return path, chart
 * 
 * def outside_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  Weights weights,
 *                  Chart inside_chart):
 */
  __pyx_k_tuple_10 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__graph), ((PyObject *)__pyx_n_s__weights), ((PyObject *)__pyx_n_s__inside_chart), ((PyObject *)__pyx_n_s__out_chart)); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_10);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));
  __pyx_k_codeobj_11 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_8, __pyx_n_s__outside_path, 119, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "pydecode/hyper.pyx":135
 *     return out_chart
 * 
 * def best_constrained(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                      Weights weights,
 *                      Constraints constraints):
 */
  __pyx_k_tuple_12 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__graph), ((PyObject *)__pyx_n_s__weights), ((PyObject *)__pyx_n_s__constraints), ((PyObject *)__pyx_n_s__results), ((PyObject *)__pyx_n_s__cpath), ((PyObject *)__pyx_n_s__path)); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_12);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));
  __pyx_k_codeobj_13 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_8, __pyx_n_s__best_constrained, 135, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inithyper(void); /*proto*/
PyMODINIT_FUNC inithyper(void)
#else
PyMODINIT_FUNC PyInit_hyper(void); /*proto*/
PyMODINIT_FUNC PyInit_hyper(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_hyper(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("hyper"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pydecode.hyper")) {
      if (unlikely(PyDict_SetItemString(modules, "pydecode.hyper", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pydecode__hyper) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Weights) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Weights", (PyObject *)&__pyx_type_8pydecode_5hyper_Weights) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Weights = &__pyx_type_8pydecode_5hyper_Weights;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Constraints) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Constraints", (PyObject *)&__pyx_type_8pydecode_5hyper_Constraints) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Constraints = &__pyx_type_8pydecode_5hyper_Constraints;
  __pyx_vtabptr_8pydecode_5hyper_GraphBuilder = &__pyx_vtable_8pydecode_5hyper_GraphBuilder;
  __pyx_vtable_8pydecode_5hyper_GraphBuilder.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_GraphBuilder *, struct __pyx_obj_8pydecode_5hyper_Hypergraph *, Hypergraph *, PyObject *))__pyx_f_8pydecode_5hyper_12GraphBuilder_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_GraphBuilder.tp_dict, __pyx_vtabptr_8pydecode_5hyper_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GraphBuilder", (PyObject *)&__pyx_type_8pydecode_5hyper_GraphBuilder) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_GraphBuilder = &__pyx_type_8pydecode_5hyper_GraphBuilder;
  __pyx_vtabptr_8pydecode_5hyper_Node = &__pyx_vtable_8pydecode_5hyper_Node;
  __pyx_vtable_8pydecode_5hyper_Node.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_Node *, Hypernode const *))__pyx_f_8pydecode_5hyper_4Node_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_Node.tp_dict, __pyx_vtabptr_8pydecode_5hyper_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_8pydecode_5hyper_Node) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Node = &__pyx_type_8pydecode_5hyper_Node;
  __pyx_vtabptr_8pydecode_5hyper_Constraint = &__pyx_vtable_8pydecode_5hyper_Constraint;
  __pyx_vtable_8pydecode_5hyper_Constraint.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_Constraint *, Constraint const *))__pyx_f_8pydecode_5hyper_10Constraint_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Constraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_Constraint.tp_dict, __pyx_vtabptr_8pydecode_5hyper_Constraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Constraint", (PyObject *)&__pyx_type_8pydecode_5hyper_Constraint) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Constraint = &__pyx_type_8pydecode_5hyper_Constraint;
  __pyx_vtabptr_8pydecode_5hyper_Edge = &__pyx_vtable_8pydecode_5hyper_Edge;
  __pyx_vtable_8pydecode_5hyper_Edge.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_Edge *, Hyperedge const *))__pyx_f_8pydecode_5hyper_4Edge_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_Edge.tp_dict, __pyx_vtabptr_8pydecode_5hyper_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Edge", (PyObject *)&__pyx_type_8pydecode_5hyper_Edge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Edge = &__pyx_type_8pydecode_5hyper_Edge;
  __pyx_vtabptr_8pydecode_5hyper_Path = &__pyx_vtable_8pydecode_5hyper_Path;
  __pyx_vtable_8pydecode_5hyper_Path.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_Path *, Hyperpath const *))__pyx_f_8pydecode_5hyper_4Path_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_8pydecode_5hyper_Path, "__getattr__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8pydecode_5hyper_4Path___getattr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8pydecode_5hyper_4Path___getattr__.doc = __pyx_doc_8pydecode_5hyper_4Path___getattr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8pydecode_5hyper_4Path___getattr__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_8pydecode_5hyper_Path, "__contains__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8pydecode_5hyper_4Path_2__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8pydecode_5hyper_4Path_2__contains__.doc = __pyx_doc_8pydecode_5hyper_4Path_2__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8pydecode_5hyper_4Path_2__contains__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_Path.tp_dict, __pyx_vtabptr_8pydecode_5hyper_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Path", (PyObject *)&__pyx_type_8pydecode_5hyper_Path) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Path = &__pyx_type_8pydecode_5hyper_Path;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Chart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_8pydecode_5hyper_Chart, "__getitem__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8pydecode_5hyper_5Chart___getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8pydecode_5hyper_5Chart___getitem__.doc = __pyx_doc_8pydecode_5hyper_5Chart___getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8pydecode_5hyper_5Chart___getitem__;
    }
  }
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "Chart", (PyObject *)&__pyx_type_8pydecode_5hyper_Chart) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Chart = &__pyx_type_8pydecode_5hyper_Chart;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Hypergraph", (PyObject *)&__pyx_type_8pydecode_5hyper_Hypergraph) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_Hypergraph = &__pyx_type_8pydecode_5hyper_Hypergraph;
  __pyx_vtabptr_8pydecode_5hyper_ConstrainedResult = &__pyx_vtable_8pydecode_5hyper_ConstrainedResult;
  __pyx_vtable_8pydecode_5hyper_ConstrainedResult.init = (PyObject *(*)(struct __pyx_obj_8pydecode_5hyper_ConstrainedResult *, ConstrainedResult))__pyx_f_8pydecode_5hyper_17ConstrainedResult_init;
  if (PyType_Ready(&__pyx_type_8pydecode_5hyper_ConstrainedResult) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pydecode_5hyper_ConstrainedResult.tp_dict, __pyx_vtabptr_8pydecode_5hyper_ConstrainedResult) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ConstrainedResult", (PyObject *)&__pyx_type_8pydecode_5hyper_ConstrainedResult) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pydecode_5hyper_ConstrainedResult = &__pyx_type_8pydecode_5hyper_ConstrainedResult;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pydecode/hyper.pyx":100
 * 
 * 
 * def best_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *               Weights weights):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_5hyper_1best_path, NULL, __pyx_n_s_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__best_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":119
 *     return path, chart
 * 
 * def outside_path(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                  Weights weights,
 *                  Chart inside_chart):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_5hyper_3outside_path, NULL, __pyx_n_s_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__outside_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":135
 *     return out_chart
 * 
 * def best_constrained(Hypergraph graph,             # <<<<<<<<<<<<<<
 *                      Weights weights,
 *                      Constraints constraints):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pydecode_5hyper_5best_constrained, NULL, __pyx_n_s_9); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__best_constrained, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":200
 *         self.indexed_types = {}
 * 
 *     def builder(self, indexed = False):             # <<<<<<<<<<<<<<
 *         gb = GraphBuilder()
 *         gb.init(self, self.thisptr, indexed)
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_1 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":262
 *                     self.hyper.indexed_types[t.index()].append((edge.id, t))
 * 
 *     def add_node(self, edges = [], label = ""):             # <<<<<<<<<<<<<<
 *         """
 *         Add a node to the hypergraph.
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_2 = ((PyObject *)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pydecode/hyper.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from libcpp.string cimport string
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init pydecode.hyper", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pydecode.hyper");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    } else {
        return __Pyx_PyObject_CallMethod1(L, __pyx_n_s__append, x);
    }
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s____pyx_vtable__, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
