// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hypergraph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Hypergraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hypergraph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hypergraph_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hypergraph_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hypergraph_Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hypergraph_Edge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hypergraph_2eproto() {
  protobuf_AddDesc_hypergraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hypergraph.proto");
  GOOGLE_CHECK(file != NULL);
  Hypergraph_descriptor_ = file->message_type(0);
  static const int Hypergraph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph, node_),
  };
  Hypergraph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hypergraph_descriptor_,
      Hypergraph::default_instance_,
      Hypergraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hypergraph));
  Hypergraph_Node_descriptor_ = Hypergraph_descriptor_->nested_type(0);
  static const int Hypergraph_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, edge_),
  };
  Hypergraph_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hypergraph_Node_descriptor_,
      Hypergraph_Node::default_instance_,
      Hypergraph_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Node, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hypergraph_Node));
  Hypergraph_Edge_descriptor_ = Hypergraph_descriptor_->nested_type(1);
  static const int Hypergraph_Edge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, tail_node_ids_),
  };
  Hypergraph_Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hypergraph_Edge_descriptor_,
      Hypergraph_Edge::default_instance_,
      Hypergraph_Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hypergraph_Edge, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hypergraph_Edge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hypergraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hypergraph_descriptor_, &Hypergraph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hypergraph_Node_descriptor_, &Hypergraph_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hypergraph_Edge_descriptor_, &Hypergraph_Edge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hypergraph_2eproto() {
  delete Hypergraph::default_instance_;
  delete Hypergraph_reflection_;
  delete Hypergraph_Node::default_instance_;
  delete Hypergraph_Node_reflection_;
  delete Hypergraph_Edge::default_instance_;
  delete Hypergraph_Edge_reflection_;
}

void protobuf_AddDesc_hypergraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020hypergraph.proto\"\322\001\n\nHypergraph\022\014\n\004roo"
    "t\030\005 \002(\005\022\036\n\004node\030\006 \003(\0132\020.Hypergraph.Node\032"
    "H\n\004Node\022\n\n\002id\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\022\036\n\004ed"
    "ge\030\003 \003(\0132\020.Hypergraph.Edge*\005\010d\020\310\001\032\?\n\004Edg"
    "e\022\n\n\002id\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\022\025\n\rtail_nod"
    "e_ids\030\003 \003(\005*\005\010d\020\310\001*\004\010\001\020\005*\005\010d\020\310\001B\002H\001", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hypergraph.proto", &protobuf_RegisterTypes);
  Hypergraph::default_instance_ = new Hypergraph();
  Hypergraph_Node::default_instance_ = new Hypergraph_Node();
  Hypergraph_Edge::default_instance_ = new Hypergraph_Edge();
  Hypergraph::default_instance_->InitAsDefaultInstance();
  Hypergraph_Node::default_instance_->InitAsDefaultInstance();
  Hypergraph_Edge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hypergraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hypergraph_2eproto {
  StaticDescriptorInitializer_hypergraph_2eproto() {
    protobuf_AddDesc_hypergraph_2eproto();
  }
} static_descriptor_initializer_hypergraph_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Hypergraph_Node::kIdFieldNumber;
const int Hypergraph_Node::kLabelFieldNumber;
const int Hypergraph_Node::kEdgeFieldNumber;
#endif  // !_MSC_VER

Hypergraph_Node::Hypergraph_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hypergraph_Node::InitAsDefaultInstance() {
}

Hypergraph_Node::Hypergraph_Node(const Hypergraph_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hypergraph_Node::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hypergraph_Node::~Hypergraph_Node() {
  SharedDtor();
}

void Hypergraph_Node::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Hypergraph_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hypergraph_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hypergraph_Node_descriptor_;
}

const Hypergraph_Node& Hypergraph_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hypergraph_2eproto();  return *default_instance_;
}

Hypergraph_Node* Hypergraph_Node::default_instance_ = NULL;

Hypergraph_Node* Hypergraph_Node::New() const {
  return new Hypergraph_Node;
}

void Hypergraph_Node::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hypergraph_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        break;
      }
      
      // repeated .Hypergraph.Edge edge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hypergraph_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated .Hypergraph.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hypergraph_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated .Hypergraph.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hypergraph_Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .Hypergraph.Edge edge = 3;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hypergraph_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hypergraph_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hypergraph_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hypergraph_Node::MergeFrom(const Hypergraph_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  edge_.MergeFrom(from.edge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hypergraph_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hypergraph_Node::CopyFrom(const Hypergraph_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hypergraph_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Hypergraph_Node::Swap(Hypergraph_Node* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    edge_.Swap(&other->edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Hypergraph_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hypergraph_Node_descriptor_;
  metadata.reflection = Hypergraph_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Hypergraph_Edge::kIdFieldNumber;
const int Hypergraph_Edge::kLabelFieldNumber;
const int Hypergraph_Edge::kTailNodeIdsFieldNumber;
#endif  // !_MSC_VER

Hypergraph_Edge::Hypergraph_Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hypergraph_Edge::InitAsDefaultInstance() {
}

Hypergraph_Edge::Hypergraph_Edge(const Hypergraph_Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hypergraph_Edge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hypergraph_Edge::~Hypergraph_Edge() {
  SharedDtor();
}

void Hypergraph_Edge::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Hypergraph_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hypergraph_Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hypergraph_Edge_descriptor_;
}

const Hypergraph_Edge& Hypergraph_Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hypergraph_2eproto();  return *default_instance_;
}

Hypergraph_Edge* Hypergraph_Edge::default_instance_ = NULL;

Hypergraph_Edge* Hypergraph_Edge::New() const {
  return new Hypergraph_Edge;
}

void Hypergraph_Edge::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  tail_node_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hypergraph_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tail_node_ids;
        break;
      }
      
      // repeated int32 tail_node_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tail_node_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_tail_node_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tail_node_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tail_node_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hypergraph_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated int32 tail_node_ids = 3;
  for (int i = 0; i < this->tail_node_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->tail_node_ids(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hypergraph_Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated int32 tail_node_ids = 3;
  for (int i = 0; i < this->tail_node_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->tail_node_ids(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hypergraph_Edge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated int32 tail_node_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tail_node_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tail_node_ids(i));
    }
    total_size += 1 * this->tail_node_ids_size() + data_size;
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hypergraph_Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hypergraph_Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hypergraph_Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hypergraph_Edge::MergeFrom(const Hypergraph_Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  tail_node_ids_.MergeFrom(from.tail_node_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hypergraph_Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hypergraph_Edge::CopyFrom(const Hypergraph_Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hypergraph_Edge::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Hypergraph_Edge::Swap(Hypergraph_Edge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    tail_node_ids_.Swap(&other->tail_node_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Hypergraph_Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hypergraph_Edge_descriptor_;
  metadata.reflection = Hypergraph_Edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Hypergraph::kRootFieldNumber;
const int Hypergraph::kNodeFieldNumber;
#endif  // !_MSC_VER

Hypergraph::Hypergraph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hypergraph::InitAsDefaultInstance() {
}

Hypergraph::Hypergraph(const Hypergraph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hypergraph::SharedCtor() {
  _cached_size_ = 0;
  root_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hypergraph::~Hypergraph() {
  SharedDtor();
}

void Hypergraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hypergraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hypergraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hypergraph_descriptor_;
}

const Hypergraph& Hypergraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hypergraph_2eproto();  return *default_instance_;
}

Hypergraph* Hypergraph::default_instance_ = NULL;

Hypergraph* Hypergraph::New() const {
  return new Hypergraph;
}

void Hypergraph::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    root_ = 0;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hypergraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 root = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &root_)));
          set_has_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_node;
        break;
      }
      
      // repeated .Hypergraph.Node node = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8u <= tag && tag < 40u) ||
            (800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hypergraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 5)
  _extensions_.SerializeWithCachedSizes(
      1, 5, output);
  
  // required int32 root = 5;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->root(), output);
  }
  
  // repeated .Hypergraph.Node node = 6;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->node(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hypergraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 5)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 5, target);
  
  // required int32 root = 5;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->root(), target);
  }
  
  // repeated .Hypergraph.Node node = 6;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->node(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hypergraph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 root = 5;
    if (has_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->root());
    }
    
  }
  // repeated .Hypergraph.Node node = 6;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hypergraph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hypergraph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hypergraph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hypergraph::MergeFrom(const Hypergraph& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root()) {
      set_root(from.root());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hypergraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hypergraph::CopyFrom(const Hypergraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hypergraph::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Hypergraph::Swap(Hypergraph* other) {
  if (other != this) {
    std::swap(root_, other->root_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Hypergraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hypergraph_descriptor_;
  metadata.reflection = Hypergraph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
